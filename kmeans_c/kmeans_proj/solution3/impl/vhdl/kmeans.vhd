-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity kmeans is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    centroids_x_V_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    centroids_x_V_ce0 : OUT STD_LOGIC;
    centroids_x_V_we0 : OUT STD_LOGIC;
    centroids_x_V_d0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    centroids_x_V_q0 : IN STD_LOGIC_VECTOR (16 downto 0);
    centroids_x_V_address1 : OUT STD_LOGIC_VECTOR (0 downto 0);
    centroids_x_V_ce1 : OUT STD_LOGIC;
    centroids_x_V_we1 : OUT STD_LOGIC;
    centroids_x_V_d1 : OUT STD_LOGIC_VECTOR (16 downto 0);
    centroids_x_V_q1 : IN STD_LOGIC_VECTOR (16 downto 0);
    centroids_y_V_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    centroids_y_V_ce0 : OUT STD_LOGIC;
    centroids_y_V_we0 : OUT STD_LOGIC;
    centroids_y_V_d0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    centroids_y_V_q0 : IN STD_LOGIC_VECTOR (16 downto 0);
    centroids_y_V_address1 : OUT STD_LOGIC_VECTOR (0 downto 0);
    centroids_y_V_ce1 : OUT STD_LOGIC;
    centroids_y_V_we1 : OUT STD_LOGIC;
    centroids_y_V_d1 : OUT STD_LOGIC_VECTOR (16 downto 0);
    centroids_y_V_q1 : IN STD_LOGIC_VECTOR (16 downto 0) );
end;


architecture behav of kmeans is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "kmeans,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=10.428875,HLS_SYN_LAT=272,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=0,HLS_SYN_FF=1439,HLS_SYN_LUT=2905,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (34 downto 0) := "00000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (34 downto 0) := "00000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (34 downto 0) := "00000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (34 downto 0) := "00000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (34 downto 0) := "00000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (34 downto 0) := "00000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (34 downto 0) := "00001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (34 downto 0) := "00010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (34 downto 0) := "00100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (34 downto 0) := "01000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (34 downto 0) := "10000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv6_32 : STD_LOGIC_VECTOR (5 downto 0) := "110010";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_const_lv6_3 : STD_LOGIC_VECTOR (5 downto 0) := "000011";
    constant ap_const_lv6_4 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_const_lv6_5 : STD_LOGIC_VECTOR (5 downto 0) := "000101";
    constant ap_const_lv6_6 : STD_LOGIC_VECTOR (5 downto 0) := "000110";
    constant ap_const_lv6_7 : STD_LOGIC_VECTOR (5 downto 0) := "000111";
    constant ap_const_lv6_8 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_const_lv6_9 : STD_LOGIC_VECTOR (5 downto 0) := "001001";
    constant ap_const_lv6_A : STD_LOGIC_VECTOR (5 downto 0) := "001010";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal x_data_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal x_data_V_ce0 : STD_LOGIC;
    signal x_data_V_q0 : STD_LOGIC_VECTOR (12 downto 0);
    signal x_data_V_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal x_data_V_ce1 : STD_LOGIC;
    signal x_data_V_q1 : STD_LOGIC_VECTOR (12 downto 0);
    signal y_data_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal y_data_V_ce0 : STD_LOGIC;
    signal y_data_V_q0 : STD_LOGIC_VECTOR (12 downto 0);
    signal y_data_V_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal y_data_V_ce1 : STD_LOGIC;
    signal y_data_V_q1 : STD_LOGIC_VECTOR (12 downto 0);
    signal i_fu_580_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal centroids_x_V_load_reg_1161 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal centroids_y_V_load_reg_1175 : STD_LOGIC_VECTOR (16 downto 0);
    signal centroids_x_V_load_1_reg_1189 : STD_LOGIC_VECTOR (16 downto 0);
    signal centroids_y_V_load_1_reg_1203 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln31_fu_616_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_reg_1220 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln30_fu_610_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln31_1_fu_628_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_1_reg_1235 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln703_fu_638_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln703_reg_1250 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal sub_ln703_1_fu_647_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln703_1_reg_1255 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln703_2_fu_652_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln703_2_reg_1260 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln703_3_fu_657_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln703_3_reg_1265 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln703_4_fu_666_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln703_4_reg_1270 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln703_5_fu_675_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln703_5_reg_1275 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln703_6_fu_680_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln703_6_reg_1280 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln703_7_fu_685_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln703_7_reg_1285 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln31_2_fu_696_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_2_reg_1290 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_3_fu_708_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_3_reg_1305 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_550_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1495_reg_1320 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_fu_568_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1495_1_reg_1325 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln703_8_fu_718_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln703_8_reg_1330 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln703_9_fu_727_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln703_9_reg_1335 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln703_10_fu_732_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln703_10_reg_1340 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln703_11_fu_737_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln703_11_reg_1345 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln703_12_fu_746_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln703_12_reg_1350 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln703_13_fu_755_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln703_13_reg_1355 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln703_14_fu_760_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln703_14_reg_1360 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln703_15_fu_765_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln703_15_reg_1365 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln31_4_fu_776_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_4_reg_1370 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_5_fu_788_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_5_reg_1385 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln1495_2_reg_1400 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal icmp_ln1495_3_reg_1405 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln703_16_fu_798_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln703_16_reg_1410 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln703_17_fu_807_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln703_17_reg_1415 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln703_18_fu_812_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln703_18_reg_1420 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln703_19_fu_817_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln703_19_reg_1425 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln703_20_fu_826_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln703_20_reg_1430 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln703_21_fu_835_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln703_21_reg_1435 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln703_22_fu_840_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln703_22_reg_1440 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln703_23_fu_845_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln703_23_reg_1445 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln31_6_fu_856_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_6_reg_1450 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_7_fu_868_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_7_reg_1465 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln1495_4_reg_1480 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal icmp_ln1495_5_reg_1485 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln703_24_fu_878_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln703_24_reg_1490 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln703_25_fu_887_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln703_25_reg_1495 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln703_26_fu_892_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln703_26_reg_1500 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln703_27_fu_897_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln703_27_reg_1505 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln703_28_fu_906_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln703_28_reg_1510 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln703_29_fu_915_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln703_29_reg_1515 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln703_30_fu_920_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln703_30_reg_1520 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln703_31_fu_925_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln703_31_reg_1525 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln31_8_fu_936_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_8_reg_1530 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_9_fu_948_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_9_reg_1545 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln30_8_fu_954_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln30_8_reg_1560 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln1495_6_reg_1565 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal icmp_ln1495_7_reg_1570 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln703_32_fu_964_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln703_32_reg_1575 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln703_33_fu_973_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln703_33_reg_1580 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln703_34_fu_978_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln703_34_reg_1585 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln703_35_fu_983_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln703_35_reg_1590 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln703_36_fu_992_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln703_36_reg_1595 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln703_37_fu_1001_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln703_37_reg_1600 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln703_38_fu_1006_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln703_38_reg_1605 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln703_39_fu_1011_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln703_39_reg_1610 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_ln1495_8_reg_1615 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal icmp_ln1495_9_reg_1620 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_1022_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_1_reg_1628 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal j_fu_1034_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_reg_1636 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal icmp_ln49_fu_1028_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln57_fu_1047_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln57_reg_1656 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln1148_fu_1057_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal mean_value_x_V_1_fu_1113_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal mean_value_y_V_1_fu_1121_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal count_1_fu_1129_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal data_cluster_id_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal data_cluster_id_ce0 : STD_LOGIC;
    signal data_cluster_id_we0 : STD_LOGIC;
    signal data_cluster_id_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal data_cluster_id_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal data_cluster_id_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal data_cluster_id_ce1 : STD_LOGIC;
    signal data_cluster_id_we1 : STD_LOGIC;
    signal data_cluster_id_d1 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_abs_custom_fu_498_ap_ready : STD_LOGIC;
    signal grp_abs_custom_fu_498_number_V : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_abs_custom_fu_498_ap_return : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_abs_custom_fu_503_ap_ready : STD_LOGIC;
    signal grp_abs_custom_fu_503_number_V : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_abs_custom_fu_503_ap_return : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_abs_custom_fu_508_ap_ready : STD_LOGIC;
    signal grp_abs_custom_fu_508_number_V : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_abs_custom_fu_508_ap_return : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_abs_custom_fu_513_ap_ready : STD_LOGIC;
    signal grp_abs_custom_fu_513_number_V : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_abs_custom_fu_513_ap_return : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_abs_custom_fu_518_ap_ready : STD_LOGIC;
    signal grp_abs_custom_fu_518_number_V : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_abs_custom_fu_518_ap_return : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_abs_custom_fu_523_ap_ready : STD_LOGIC;
    signal grp_abs_custom_fu_523_number_V : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_abs_custom_fu_523_ap_return : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_abs_custom_fu_528_ap_ready : STD_LOGIC;
    signal grp_abs_custom_fu_528_number_V : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_abs_custom_fu_528_ap_return : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_abs_custom_fu_533_ap_ready : STD_LOGIC;
    signal grp_abs_custom_fu_533_number_V : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_abs_custom_fu_533_ap_return : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Val2_1_reg_416 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln19_fu_574_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_0_reg_427 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal i_2_reg_439 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal p_Val2_s_reg_451 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_ln44_fu_1016_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_5_reg_463 : STD_LOGIC_VECTOR (16 downto 0);
    signal j_1_reg_475 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_V_reg_486 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln20_fu_586_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln50_fu_1040_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln58_fu_1137_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln728_fu_604_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_544_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_538_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_562_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_556_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln728_fu_592_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln_fu_596_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln30_fu_622_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln1265_fu_634_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln1265_1_fu_643_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln1265_2_fu_662_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln1265_3_fu_671_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln30_fu_690_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln30_1_fu_702_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln1265_4_fu_714_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln1265_5_fu_723_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln1265_6_fu_742_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln1265_7_fu_751_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln30_2_fu_770_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln30_3_fu_782_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln1265_8_fu_794_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln1265_9_fu_803_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln1265_10_fu_822_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln1265_11_fu_831_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln30_4_fu_850_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln30_5_fu_862_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln1265_12_fu_874_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln1265_13_fu_883_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln1265_14_fu_902_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln1265_15_fu_911_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln30_6_fu_930_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln30_7_fu_942_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln1265_16_fu_960_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln1265_17_fu_969_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln1265_18_fu_988_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln1265_19_fu_997_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_1061_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1061_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_1071_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1071_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln50_1_fu_1077_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal sext_ln1265_20_fu_1087_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln1265_21_fu_1097_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_ln50_fu_1081_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mean_value_x_V_fu_1091_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal mean_value_y_V_fu_1101_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal count_fu_1107_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1061_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_1071_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_1061_ap_start : STD_LOGIC;
    signal grp_fu_1061_ap_done : STD_LOGIC;
    signal grp_fu_1071_ap_start : STD_LOGIC;
    signal grp_fu_1071_ap_done : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (34 downto 0);

    component abs_custom IS
    port (
        ap_ready : OUT STD_LOGIC;
        number_V : IN STD_LOGIC_VECTOR (16 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component kmeans_sdiv_18s_1cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component kmeans_x_data_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component kmeans_y_data_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component kmeans_data_clustbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    x_data_V_U : component kmeans_x_data_V
    generic map (
        DataWidth => 13,
        AddressRange => 50,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => x_data_V_address0,
        ce0 => x_data_V_ce0,
        q0 => x_data_V_q0,
        address1 => x_data_V_address1,
        ce1 => x_data_V_ce1,
        q1 => x_data_V_q1);

    y_data_V_U : component kmeans_y_data_V
    generic map (
        DataWidth => 13,
        AddressRange => 50,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => y_data_V_address0,
        ce0 => y_data_V_ce0,
        q0 => y_data_V_q0,
        address1 => y_data_V_address1,
        ce1 => y_data_V_ce1,
        q1 => y_data_V_q1);

    data_cluster_id_U : component kmeans_data_clustbkb
    generic map (
        DataWidth => 1,
        AddressRange => 50,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => data_cluster_id_address0,
        ce0 => data_cluster_id_ce0,
        we0 => data_cluster_id_we0,
        d0 => data_cluster_id_d0,
        q0 => data_cluster_id_q0,
        address1 => data_cluster_id_address1,
        ce1 => data_cluster_id_ce1,
        we1 => data_cluster_id_we1,
        d1 => data_cluster_id_d1);

    grp_abs_custom_fu_498 : component abs_custom
    port map (
        ap_ready => grp_abs_custom_fu_498_ap_ready,
        number_V => grp_abs_custom_fu_498_number_V,
        ap_return => grp_abs_custom_fu_498_ap_return);

    grp_abs_custom_fu_503 : component abs_custom
    port map (
        ap_ready => grp_abs_custom_fu_503_ap_ready,
        number_V => grp_abs_custom_fu_503_number_V,
        ap_return => grp_abs_custom_fu_503_ap_return);

    grp_abs_custom_fu_508 : component abs_custom
    port map (
        ap_ready => grp_abs_custom_fu_508_ap_ready,
        number_V => grp_abs_custom_fu_508_number_V,
        ap_return => grp_abs_custom_fu_508_ap_return);

    grp_abs_custom_fu_513 : component abs_custom
    port map (
        ap_ready => grp_abs_custom_fu_513_ap_ready,
        number_V => grp_abs_custom_fu_513_number_V,
        ap_return => grp_abs_custom_fu_513_ap_return);

    grp_abs_custom_fu_518 : component abs_custom
    port map (
        ap_ready => grp_abs_custom_fu_518_ap_ready,
        number_V => grp_abs_custom_fu_518_number_V,
        ap_return => grp_abs_custom_fu_518_ap_return);

    grp_abs_custom_fu_523 : component abs_custom
    port map (
        ap_ready => grp_abs_custom_fu_523_ap_ready,
        number_V => grp_abs_custom_fu_523_number_V,
        ap_return => grp_abs_custom_fu_523_ap_return);

    grp_abs_custom_fu_528 : component abs_custom
    port map (
        ap_ready => grp_abs_custom_fu_528_ap_ready,
        number_V => grp_abs_custom_fu_528_number_V,
        ap_return => grp_abs_custom_fu_528_ap_return);

    grp_abs_custom_fu_533 : component abs_custom
    port map (
        ap_ready => grp_abs_custom_fu_533_ap_ready,
        number_V => grp_abs_custom_fu_533_number_V,
        ap_return => grp_abs_custom_fu_533_ap_return);

    kmeans_sdiv_18s_1cud_U2 : component kmeans_sdiv_18s_1cud
    generic map (
        ID => 1,
        NUM_STAGE => 22,
        din0_WIDTH => 18,
        din1_WIDTH => 17,
        dout_WIDTH => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_1061_ap_start,
        done => grp_fu_1061_ap_done,
        din0 => grp_fu_1061_p0,
        din1 => grp_fu_1061_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1061_p2);

    kmeans_sdiv_18s_1cud_U3 : component kmeans_sdiv_18s_1cud
    generic map (
        ID => 1,
        NUM_STAGE => 22,
        din0_WIDTH => 18,
        din1_WIDTH => 17,
        dout_WIDTH => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_1071_ap_start,
        done => grp_fu_1071_ap_done,
        din0 => grp_fu_1071_p0,
        din1 => grp_fu_1071_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1071_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_1_0_reg_427_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_1_0_reg_427 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                i_1_0_reg_427 <= add_ln30_8_reg_1560;
            end if; 
        end if;
    end process;

    i_2_reg_439_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln30_fu_610_p2 = ap_const_lv1_1))) then 
                i_2_reg_439 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
                i_2_reg_439 <= i_1_reg_1628;
            end if; 
        end if;
    end process;

    j_1_reg_475_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln44_fu_1016_p2 = ap_const_lv1_0))) then 
                j_1_reg_475 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                j_1_reg_475 <= j_reg_1636;
            end if; 
        end if;
    end process;

    p_Val2_1_reg_416_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln19_fu_574_p2 = ap_const_lv1_0))) then 
                p_Val2_1_reg_416 <= i_fu_580_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_Val2_1_reg_416 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    p_Val2_5_reg_463_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln44_fu_1016_p2 = ap_const_lv1_0))) then 
                p_Val2_5_reg_463 <= ap_const_lv17_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                p_Val2_5_reg_463 <= mean_value_y_V_1_fu_1121_p3;
            end if; 
        end if;
    end process;

    p_Val2_s_reg_451_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln44_fu_1016_p2 = ap_const_lv1_0))) then 
                p_Val2_s_reg_451 <= ap_const_lv17_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                p_Val2_s_reg_451 <= mean_value_x_V_1_fu_1113_p3;
            end if; 
        end if;
    end process;

    tmp_V_reg_486_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln44_fu_1016_p2 = ap_const_lv1_0))) then 
                tmp_V_reg_486 <= ap_const_lv16_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                tmp_V_reg_486 <= count_1_fu_1129_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                add_ln30_8_reg_1560 <= add_ln30_8_fu_954_p2;
                icmp_ln1495_4_reg_1480 <= grp_fu_550_p2;
                icmp_ln1495_5_reg_1485 <= grp_fu_568_p2;
                sub_ln703_24_reg_1490 <= sub_ln703_24_fu_878_p2;
                sub_ln703_25_reg_1495 <= sub_ln703_25_fu_887_p2;
                sub_ln703_26_reg_1500 <= sub_ln703_26_fu_892_p2;
                sub_ln703_27_reg_1505 <= sub_ln703_27_fu_897_p2;
                sub_ln703_28_reg_1510 <= sub_ln703_28_fu_906_p2;
                sub_ln703_29_reg_1515 <= sub_ln703_29_fu_915_p2;
                sub_ln703_30_reg_1520 <= sub_ln703_30_fu_920_p2;
                sub_ln703_31_reg_1525 <= sub_ln703_31_fu_925_p2;
                    zext_ln31_8_reg_1530(5 downto 0) <= zext_ln31_8_fu_936_p1(5 downto 0);
                    zext_ln31_9_reg_1545(5 downto 0) <= zext_ln31_9_fu_948_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                centroids_x_V_load_1_reg_1189 <= centroids_x_V_q1;
                centroids_x_V_load_reg_1161 <= centroids_x_V_q0;
                centroids_y_V_load_1_reg_1203 <= centroids_y_V_q1;
                centroids_y_V_load_reg_1175 <= centroids_y_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                i_1_reg_1628 <= i_1_fu_1022_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                icmp_ln1495_1_reg_1325 <= grp_fu_568_p2;
                icmp_ln1495_reg_1320 <= grp_fu_550_p2;
                sub_ln703_10_reg_1340 <= sub_ln703_10_fu_732_p2;
                sub_ln703_11_reg_1345 <= sub_ln703_11_fu_737_p2;
                sub_ln703_12_reg_1350 <= sub_ln703_12_fu_746_p2;
                sub_ln703_13_reg_1355 <= sub_ln703_13_fu_755_p2;
                sub_ln703_14_reg_1360 <= sub_ln703_14_fu_760_p2;
                sub_ln703_15_reg_1365 <= sub_ln703_15_fu_765_p2;
                sub_ln703_8_reg_1330 <= sub_ln703_8_fu_718_p2;
                sub_ln703_9_reg_1335 <= sub_ln703_9_fu_727_p2;
                    zext_ln31_4_reg_1370(5 downto 0) <= zext_ln31_4_fu_776_p1(5 downto 0);
                    zext_ln31_5_reg_1385(5 downto 0) <= zext_ln31_5_fu_788_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                icmp_ln1495_2_reg_1400 <= grp_fu_550_p2;
                icmp_ln1495_3_reg_1405 <= grp_fu_568_p2;
                sub_ln703_16_reg_1410 <= sub_ln703_16_fu_798_p2;
                sub_ln703_17_reg_1415 <= sub_ln703_17_fu_807_p2;
                sub_ln703_18_reg_1420 <= sub_ln703_18_fu_812_p2;
                sub_ln703_19_reg_1425 <= sub_ln703_19_fu_817_p2;
                sub_ln703_20_reg_1430 <= sub_ln703_20_fu_826_p2;
                sub_ln703_21_reg_1435 <= sub_ln703_21_fu_835_p2;
                sub_ln703_22_reg_1440 <= sub_ln703_22_fu_840_p2;
                sub_ln703_23_reg_1445 <= sub_ln703_23_fu_845_p2;
                    zext_ln31_6_reg_1450(5 downto 0) <= zext_ln31_6_fu_856_p1(5 downto 0);
                    zext_ln31_7_reg_1465(5 downto 0) <= zext_ln31_7_fu_868_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                icmp_ln1495_6_reg_1565 <= grp_fu_550_p2;
                icmp_ln1495_7_reg_1570 <= grp_fu_568_p2;
                sub_ln703_32_reg_1575 <= sub_ln703_32_fu_964_p2;
                sub_ln703_33_reg_1580 <= sub_ln703_33_fu_973_p2;
                sub_ln703_34_reg_1585 <= sub_ln703_34_fu_978_p2;
                sub_ln703_35_reg_1590 <= sub_ln703_35_fu_983_p2;
                sub_ln703_36_reg_1595 <= sub_ln703_36_fu_992_p2;
                sub_ln703_37_reg_1600 <= sub_ln703_37_fu_1001_p2;
                sub_ln703_38_reg_1605 <= sub_ln703_38_fu_1006_p2;
                sub_ln703_39_reg_1610 <= sub_ln703_39_fu_1011_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                icmp_ln1495_8_reg_1615 <= grp_fu_550_p2;
                icmp_ln1495_9_reg_1620 <= grp_fu_568_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln49_fu_1028_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                icmp_ln57_reg_1656 <= icmp_ln57_fu_1047_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                j_reg_1636 <= j_fu_1034_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                sub_ln703_1_reg_1255 <= sub_ln703_1_fu_647_p2;
                sub_ln703_2_reg_1260 <= sub_ln703_2_fu_652_p2;
                sub_ln703_3_reg_1265 <= sub_ln703_3_fu_657_p2;
                sub_ln703_4_reg_1270 <= sub_ln703_4_fu_666_p2;
                sub_ln703_5_reg_1275 <= sub_ln703_5_fu_675_p2;
                sub_ln703_6_reg_1280 <= sub_ln703_6_fu_680_p2;
                sub_ln703_7_reg_1285 <= sub_ln703_7_fu_685_p2;
                sub_ln703_reg_1250 <= sub_ln703_fu_638_p2;
                    zext_ln31_2_reg_1290(5 downto 0) <= zext_ln31_2_fu_696_p1(5 downto 0);
                    zext_ln31_3_reg_1305(5 downto 0) <= zext_ln31_3_fu_708_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln30_fu_610_p2 = ap_const_lv1_0))) then
                    zext_ln31_1_reg_1235(5 downto 1) <= zext_ln31_1_fu_628_p1(5 downto 1);
                    zext_ln31_reg_1220(5 downto 0) <= zext_ln31_fu_616_p1(5 downto 0);
            end if;
        end if;
    end process;
    zext_ln31_reg_1220(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln31_1_reg_1235(0) <= '1';
    zext_ln31_1_reg_1235(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln31_2_reg_1290(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln31_3_reg_1305(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln31_4_reg_1370(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln31_5_reg_1385(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln31_6_reg_1450(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln31_7_reg_1465(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln31_8_reg_1530(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln31_9_reg_1545(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state4, icmp_ln30_fu_610_p2, ap_CS_fsm_state12, ap_CS_fsm_state13, icmp_ln49_fu_1028_p2, icmp_ln57_fu_1047_p2, icmp_ln19_fu_574_p2, icmp_ln44_fu_1016_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln19_fu_574_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln30_fu_610_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state12 => 
                if (((icmp_ln44_fu_1016_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                if (((icmp_ln57_fu_1047_p2 = ap_const_lv1_1) and (icmp_ln49_fu_1028_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                elsif (((icmp_ln49_fu_1028_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln57_fu_1047_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln30_1_fu_702_p2 <= std_logic_vector(unsigned(i_1_0_reg_427) + unsigned(ap_const_lv6_3));
    add_ln30_2_fu_770_p2 <= std_logic_vector(unsigned(i_1_0_reg_427) + unsigned(ap_const_lv6_4));
    add_ln30_3_fu_782_p2 <= std_logic_vector(unsigned(i_1_0_reg_427) + unsigned(ap_const_lv6_5));
    add_ln30_4_fu_850_p2 <= std_logic_vector(unsigned(i_1_0_reg_427) + unsigned(ap_const_lv6_6));
    add_ln30_5_fu_862_p2 <= std_logic_vector(unsigned(i_1_0_reg_427) + unsigned(ap_const_lv6_7));
    add_ln30_6_fu_930_p2 <= std_logic_vector(unsigned(i_1_0_reg_427) + unsigned(ap_const_lv6_8));
    add_ln30_7_fu_942_p2 <= std_logic_vector(unsigned(i_1_0_reg_427) + unsigned(ap_const_lv6_9));
    add_ln30_8_fu_954_p2 <= std_logic_vector(unsigned(i_1_0_reg_427) + unsigned(ap_const_lv6_A));
    add_ln30_fu_690_p2 <= std_logic_vector(unsigned(i_1_0_reg_427) + unsigned(ap_const_lv6_2));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state12, icmp_ln44_fu_1016_p2)
    begin
        if (((icmp_ln44_fu_1016_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state12, icmp_ln44_fu_1016_p2)
    begin
        if (((icmp_ln44_fu_1016_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    centroids_x_V_address0_assign_proc : process(ap_CS_fsm_state2, icmp_ln19_fu_574_p2, zext_ln20_fu_586_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
            if ((icmp_ln19_fu_574_p2 = ap_const_lv1_1)) then 
                centroids_x_V_address0 <= ap_const_lv1_0;
            elsif ((icmp_ln19_fu_574_p2 = ap_const_lv1_0)) then 
                centroids_x_V_address0 <= zext_ln20_fu_586_p1(1 - 1 downto 0);
            else 
                centroids_x_V_address0 <= "X";
            end if;
        else 
            centroids_x_V_address0 <= "X";
        end if; 
    end process;


    centroids_x_V_address1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state35, zext_ln58_fu_1137_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            centroids_x_V_address1 <= zext_ln58_fu_1137_p1(1 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            centroids_x_V_address1 <= ap_const_lv1_1;
        else 
            centroids_x_V_address1 <= "X";
        end if; 
    end process;


    centroids_x_V_ce0_assign_proc : process(ap_CS_fsm_state2, icmp_ln19_fu_574_p2)
    begin
        if ((((icmp_ln19_fu_574_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln19_fu_574_p2 = ap_const_lv1_0)))) then 
            centroids_x_V_ce0 <= ap_const_logic_1;
        else 
            centroids_x_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    centroids_x_V_ce1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state35)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            centroids_x_V_ce1 <= ap_const_logic_1;
        else 
            centroids_x_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    centroids_x_V_d0 <= zext_ln728_fu_604_p1;
    centroids_x_V_d1 <= grp_fu_1061_p2(17 - 1 downto 0);

    centroids_x_V_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln19_fu_574_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln19_fu_574_p2 = ap_const_lv1_0))) then 
            centroids_x_V_we0 <= ap_const_logic_1;
        else 
            centroids_x_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    centroids_x_V_we1_assign_proc : process(icmp_ln57_reg_1656, ap_CS_fsm_state35)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state35) and (icmp_ln57_reg_1656 = ap_const_lv1_0))) then 
            centroids_x_V_we1 <= ap_const_logic_1;
        else 
            centroids_x_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    centroids_y_V_address0_assign_proc : process(ap_CS_fsm_state2, icmp_ln19_fu_574_p2, zext_ln20_fu_586_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
            if ((icmp_ln19_fu_574_p2 = ap_const_lv1_1)) then 
                centroids_y_V_address0 <= ap_const_lv1_0;
            elsif ((icmp_ln19_fu_574_p2 = ap_const_lv1_0)) then 
                centroids_y_V_address0 <= zext_ln20_fu_586_p1(1 - 1 downto 0);
            else 
                centroids_y_V_address0 <= "X";
            end if;
        else 
            centroids_y_V_address0 <= "X";
        end if; 
    end process;


    centroids_y_V_address1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state35, zext_ln58_fu_1137_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            centroids_y_V_address1 <= zext_ln58_fu_1137_p1(1 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            centroids_y_V_address1 <= ap_const_lv1_1;
        else 
            centroids_y_V_address1 <= "X";
        end if; 
    end process;


    centroids_y_V_ce0_assign_proc : process(ap_CS_fsm_state2, icmp_ln19_fu_574_p2)
    begin
        if ((((icmp_ln19_fu_574_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln19_fu_574_p2 = ap_const_lv1_0)))) then 
            centroids_y_V_ce0 <= ap_const_logic_1;
        else 
            centroids_y_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    centroids_y_V_ce1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state35)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            centroids_y_V_ce1 <= ap_const_logic_1;
        else 
            centroids_y_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    centroids_y_V_d0 <= zext_ln728_fu_604_p1;
    centroids_y_V_d1 <= grp_fu_1071_p2(17 - 1 downto 0);

    centroids_y_V_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln19_fu_574_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln19_fu_574_p2 = ap_const_lv1_0))) then 
            centroids_y_V_we0 <= ap_const_logic_1;
        else 
            centroids_y_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    centroids_y_V_we1_assign_proc : process(icmp_ln57_reg_1656, ap_CS_fsm_state35)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state35) and (icmp_ln57_reg_1656 = ap_const_lv1_0))) then 
            centroids_y_V_we1 <= ap_const_logic_1;
        else 
            centroids_y_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    count_1_fu_1129_p3 <= 
        count_fu_1107_p2 when (icmp_ln50_fu_1081_p2(0) = '1') else 
        tmp_V_reg_486;
    count_fu_1107_p2 <= std_logic_vector(unsigned(tmp_V_reg_486) + unsigned(ap_const_lv16_1));

    data_cluster_id_address0_assign_proc : process(zext_ln31_reg_1220, zext_ln31_2_reg_1290, zext_ln31_4_reg_1370, ap_CS_fsm_state7, zext_ln31_6_reg_1450, ap_CS_fsm_state8, zext_ln31_8_reg_1530, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state13, ap_CS_fsm_state11, zext_ln50_fu_1040_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            data_cluster_id_address0 <= zext_ln50_fu_1040_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            data_cluster_id_address0 <= zext_ln31_8_reg_1530(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            data_cluster_id_address0 <= zext_ln31_6_reg_1450(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            data_cluster_id_address0 <= zext_ln31_4_reg_1370(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            data_cluster_id_address0 <= zext_ln31_2_reg_1290(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            data_cluster_id_address0 <= zext_ln31_reg_1220(6 - 1 downto 0);
        else 
            data_cluster_id_address0 <= "XXXXXX";
        end if; 
    end process;


    data_cluster_id_address1_assign_proc : process(zext_ln31_1_reg_1235, zext_ln31_3_reg_1305, zext_ln31_5_reg_1385, ap_CS_fsm_state7, zext_ln31_7_reg_1465, ap_CS_fsm_state8, zext_ln31_9_reg_1545, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            data_cluster_id_address1 <= zext_ln31_9_reg_1545(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            data_cluster_id_address1 <= zext_ln31_7_reg_1465(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            data_cluster_id_address1 <= zext_ln31_5_reg_1385(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            data_cluster_id_address1 <= zext_ln31_3_reg_1305(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            data_cluster_id_address1 <= zext_ln31_1_reg_1235(6 - 1 downto 0);
        else 
            data_cluster_id_address1 <= "XXXXXX";
        end if; 
    end process;


    data_cluster_id_ce0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state13, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            data_cluster_id_ce0 <= ap_const_logic_1;
        else 
            data_cluster_id_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_cluster_id_ce1_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            data_cluster_id_ce1 <= ap_const_logic_1;
        else 
            data_cluster_id_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    data_cluster_id_d0_assign_proc : process(icmp_ln1495_reg_1320, icmp_ln1495_2_reg_1400, ap_CS_fsm_state7, icmp_ln1495_4_reg_1480, ap_CS_fsm_state8, icmp_ln1495_6_reg_1565, ap_CS_fsm_state9, icmp_ln1495_8_reg_1615, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            data_cluster_id_d0 <= icmp_ln1495_8_reg_1615;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            data_cluster_id_d0 <= icmp_ln1495_6_reg_1565;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            data_cluster_id_d0 <= icmp_ln1495_4_reg_1480;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            data_cluster_id_d0 <= icmp_ln1495_2_reg_1400;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            data_cluster_id_d0 <= icmp_ln1495_reg_1320;
        else 
            data_cluster_id_d0 <= "X";
        end if; 
    end process;


    data_cluster_id_d1_assign_proc : process(icmp_ln1495_1_reg_1325, ap_CS_fsm_state7, icmp_ln1495_3_reg_1405, ap_CS_fsm_state8, icmp_ln1495_5_reg_1485, ap_CS_fsm_state9, icmp_ln1495_7_reg_1570, ap_CS_fsm_state10, icmp_ln1495_9_reg_1620, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            data_cluster_id_d1 <= icmp_ln1495_9_reg_1620;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            data_cluster_id_d1 <= icmp_ln1495_7_reg_1570;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            data_cluster_id_d1 <= icmp_ln1495_5_reg_1485;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            data_cluster_id_d1 <= icmp_ln1495_3_reg_1405;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            data_cluster_id_d1 <= icmp_ln1495_1_reg_1325;
        else 
            data_cluster_id_d1 <= "X";
        end if; 
    end process;


    data_cluster_id_we0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            data_cluster_id_we0 <= ap_const_logic_1;
        else 
            data_cluster_id_we0 <= ap_const_logic_0;
        end if; 
    end process;


    data_cluster_id_we1_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            data_cluster_id_we1 <= ap_const_logic_1;
        else 
            data_cluster_id_we1 <= ap_const_logic_0;
        end if; 
    end process;


    grp_abs_custom_fu_498_number_V_assign_proc : process(sub_ln703_reg_1250, ap_CS_fsm_state6, sub_ln703_8_reg_1330, ap_CS_fsm_state7, sub_ln703_16_reg_1410, ap_CS_fsm_state8, sub_ln703_24_reg_1490, ap_CS_fsm_state9, sub_ln703_32_reg_1575, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_abs_custom_fu_498_number_V <= sub_ln703_32_reg_1575;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_abs_custom_fu_498_number_V <= sub_ln703_24_reg_1490;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_abs_custom_fu_498_number_V <= sub_ln703_16_reg_1410;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_abs_custom_fu_498_number_V <= sub_ln703_8_reg_1330;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_abs_custom_fu_498_number_V <= sub_ln703_reg_1250;
        else 
            grp_abs_custom_fu_498_number_V <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_abs_custom_fu_503_number_V_assign_proc : process(sub_ln703_1_reg_1255, ap_CS_fsm_state6, sub_ln703_9_reg_1335, ap_CS_fsm_state7, sub_ln703_17_reg_1415, ap_CS_fsm_state8, sub_ln703_25_reg_1495, ap_CS_fsm_state9, sub_ln703_33_reg_1580, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_abs_custom_fu_503_number_V <= sub_ln703_33_reg_1580;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_abs_custom_fu_503_number_V <= sub_ln703_25_reg_1495;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_abs_custom_fu_503_number_V <= sub_ln703_17_reg_1415;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_abs_custom_fu_503_number_V <= sub_ln703_9_reg_1335;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_abs_custom_fu_503_number_V <= sub_ln703_1_reg_1255;
        else 
            grp_abs_custom_fu_503_number_V <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_abs_custom_fu_508_number_V_assign_proc : process(sub_ln703_2_reg_1260, ap_CS_fsm_state6, sub_ln703_10_reg_1340, ap_CS_fsm_state7, sub_ln703_18_reg_1420, ap_CS_fsm_state8, sub_ln703_26_reg_1500, ap_CS_fsm_state9, sub_ln703_34_reg_1585, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_abs_custom_fu_508_number_V <= sub_ln703_34_reg_1585;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_abs_custom_fu_508_number_V <= sub_ln703_26_reg_1500;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_abs_custom_fu_508_number_V <= sub_ln703_18_reg_1420;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_abs_custom_fu_508_number_V <= sub_ln703_10_reg_1340;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_abs_custom_fu_508_number_V <= sub_ln703_2_reg_1260;
        else 
            grp_abs_custom_fu_508_number_V <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_abs_custom_fu_513_number_V_assign_proc : process(sub_ln703_3_reg_1265, ap_CS_fsm_state6, sub_ln703_11_reg_1345, ap_CS_fsm_state7, sub_ln703_19_reg_1425, ap_CS_fsm_state8, sub_ln703_27_reg_1505, ap_CS_fsm_state9, sub_ln703_35_reg_1590, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_abs_custom_fu_513_number_V <= sub_ln703_35_reg_1590;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_abs_custom_fu_513_number_V <= sub_ln703_27_reg_1505;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_abs_custom_fu_513_number_V <= sub_ln703_19_reg_1425;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_abs_custom_fu_513_number_V <= sub_ln703_11_reg_1345;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_abs_custom_fu_513_number_V <= sub_ln703_3_reg_1265;
        else 
            grp_abs_custom_fu_513_number_V <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_abs_custom_fu_518_number_V_assign_proc : process(sub_ln703_4_reg_1270, ap_CS_fsm_state6, sub_ln703_12_reg_1350, ap_CS_fsm_state7, sub_ln703_20_reg_1430, ap_CS_fsm_state8, sub_ln703_28_reg_1510, ap_CS_fsm_state9, sub_ln703_36_reg_1595, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_abs_custom_fu_518_number_V <= sub_ln703_36_reg_1595;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_abs_custom_fu_518_number_V <= sub_ln703_28_reg_1510;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_abs_custom_fu_518_number_V <= sub_ln703_20_reg_1430;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_abs_custom_fu_518_number_V <= sub_ln703_12_reg_1350;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_abs_custom_fu_518_number_V <= sub_ln703_4_reg_1270;
        else 
            grp_abs_custom_fu_518_number_V <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_abs_custom_fu_523_number_V_assign_proc : process(sub_ln703_5_reg_1275, ap_CS_fsm_state6, sub_ln703_13_reg_1355, ap_CS_fsm_state7, sub_ln703_21_reg_1435, ap_CS_fsm_state8, sub_ln703_29_reg_1515, ap_CS_fsm_state9, sub_ln703_37_reg_1600, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_abs_custom_fu_523_number_V <= sub_ln703_37_reg_1600;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_abs_custom_fu_523_number_V <= sub_ln703_29_reg_1515;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_abs_custom_fu_523_number_V <= sub_ln703_21_reg_1435;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_abs_custom_fu_523_number_V <= sub_ln703_13_reg_1355;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_abs_custom_fu_523_number_V <= sub_ln703_5_reg_1275;
        else 
            grp_abs_custom_fu_523_number_V <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_abs_custom_fu_528_number_V_assign_proc : process(sub_ln703_6_reg_1280, ap_CS_fsm_state6, sub_ln703_14_reg_1360, ap_CS_fsm_state7, sub_ln703_22_reg_1440, ap_CS_fsm_state8, sub_ln703_30_reg_1520, ap_CS_fsm_state9, sub_ln703_38_reg_1605, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_abs_custom_fu_528_number_V <= sub_ln703_38_reg_1605;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_abs_custom_fu_528_number_V <= sub_ln703_30_reg_1520;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_abs_custom_fu_528_number_V <= sub_ln703_22_reg_1440;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_abs_custom_fu_528_number_V <= sub_ln703_14_reg_1360;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_abs_custom_fu_528_number_V <= sub_ln703_6_reg_1280;
        else 
            grp_abs_custom_fu_528_number_V <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_abs_custom_fu_533_number_V_assign_proc : process(sub_ln703_7_reg_1285, ap_CS_fsm_state6, sub_ln703_15_reg_1365, ap_CS_fsm_state7, sub_ln703_23_reg_1445, ap_CS_fsm_state8, sub_ln703_31_reg_1525, ap_CS_fsm_state9, sub_ln703_39_reg_1610, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_abs_custom_fu_533_number_V <= sub_ln703_39_reg_1610;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_abs_custom_fu_533_number_V <= sub_ln703_31_reg_1525;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_abs_custom_fu_533_number_V <= sub_ln703_23_reg_1445;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_abs_custom_fu_533_number_V <= sub_ln703_15_reg_1365;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_abs_custom_fu_533_number_V <= sub_ln703_7_reg_1285;
        else 
            grp_abs_custom_fu_533_number_V <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1061_ap_start_assign_proc : process(ap_CS_fsm_state13, icmp_ln49_fu_1028_p2, icmp_ln57_fu_1047_p2)
    begin
        if (((icmp_ln49_fu_1028_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln57_fu_1047_p2 = ap_const_lv1_0))) then 
            grp_fu_1061_ap_start <= ap_const_logic_1;
        else 
            grp_fu_1061_ap_start <= ap_const_logic_0;
        end if; 
    end process;

        grp_fu_1061_p0 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_s_reg_451),18));

    grp_fu_1061_p1 <= zext_ln1148_fu_1057_p1(17 - 1 downto 0);

    grp_fu_1071_ap_start_assign_proc : process(ap_CS_fsm_state13, icmp_ln49_fu_1028_p2, icmp_ln57_fu_1047_p2)
    begin
        if (((icmp_ln49_fu_1028_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln57_fu_1047_p2 = ap_const_lv1_0))) then 
            grp_fu_1071_ap_start <= ap_const_logic_1;
        else 
            grp_fu_1071_ap_start <= ap_const_logic_0;
        end if; 
    end process;

        grp_fu_1071_p0 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_5_reg_463),18));

    grp_fu_1071_p1 <= zext_ln1148_fu_1057_p1(17 - 1 downto 0);
    grp_fu_538_p2 <= std_logic_vector(unsigned(grp_abs_custom_fu_503_ap_return) + unsigned(grp_abs_custom_fu_498_ap_return));
    grp_fu_544_p2 <= std_logic_vector(unsigned(grp_abs_custom_fu_513_ap_return) + unsigned(grp_abs_custom_fu_508_ap_return));
    grp_fu_550_p2 <= "1" when (signed(grp_fu_544_p2) < signed(grp_fu_538_p2)) else "0";
    grp_fu_556_p2 <= std_logic_vector(unsigned(grp_abs_custom_fu_523_ap_return) + unsigned(grp_abs_custom_fu_518_ap_return));
    grp_fu_562_p2 <= std_logic_vector(unsigned(grp_abs_custom_fu_533_ap_return) + unsigned(grp_abs_custom_fu_528_ap_return));
    grp_fu_568_p2 <= "1" when (signed(grp_fu_562_p2) < signed(grp_fu_556_p2)) else "0";
    i_1_fu_1022_p2 <= std_logic_vector(unsigned(i_2_reg_439) + unsigned(ap_const_lv2_1));
    i_fu_580_p2 <= std_logic_vector(unsigned(p_Val2_1_reg_416) + unsigned(ap_const_lv2_1));
    icmp_ln19_fu_574_p2 <= "1" when (p_Val2_1_reg_416 = ap_const_lv2_2) else "0";
    icmp_ln30_fu_610_p2 <= "1" when (i_1_0_reg_427 = ap_const_lv6_32) else "0";
    icmp_ln44_fu_1016_p2 <= "1" when (i_2_reg_439 = ap_const_lv2_2) else "0";
    icmp_ln49_fu_1028_p2 <= "1" when (j_1_reg_475 = ap_const_lv6_32) else "0";
    icmp_ln50_fu_1081_p2 <= "1" when (zext_ln50_1_fu_1077_p1 = i_2_reg_439) else "0";
    icmp_ln57_fu_1047_p2 <= "1" when (tmp_V_reg_486 = ap_const_lv16_0) else "0";
    j_fu_1034_p2 <= std_logic_vector(unsigned(j_1_reg_475) + unsigned(ap_const_lv6_1));
    mean_value_x_V_1_fu_1113_p3 <= 
        mean_value_x_V_fu_1091_p2 when (icmp_ln50_fu_1081_p2(0) = '1') else 
        p_Val2_s_reg_451;
    mean_value_x_V_fu_1091_p2 <= std_logic_vector(signed(sext_ln1265_20_fu_1087_p1) + signed(p_Val2_s_reg_451));
    mean_value_y_V_1_fu_1121_p3 <= 
        mean_value_y_V_fu_1101_p2 when (icmp_ln50_fu_1081_p2(0) = '1') else 
        p_Val2_5_reg_463;
    mean_value_y_V_fu_1101_p2 <= std_logic_vector(signed(sext_ln1265_21_fu_1097_p1) + signed(p_Val2_5_reg_463));
    or_ln30_fu_622_p2 <= (i_1_0_reg_427 or ap_const_lv6_1);
        sext_ln1265_10_fu_822_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(x_data_V_q1),17));

        sext_ln1265_11_fu_831_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(y_data_V_q1),17));

        sext_ln1265_12_fu_874_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(x_data_V_q0),17));

        sext_ln1265_13_fu_883_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(y_data_V_q0),17));

        sext_ln1265_14_fu_902_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(x_data_V_q1),17));

        sext_ln1265_15_fu_911_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(y_data_V_q1),17));

        sext_ln1265_16_fu_960_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(x_data_V_q0),17));

        sext_ln1265_17_fu_969_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(y_data_V_q0),17));

        sext_ln1265_18_fu_988_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(x_data_V_q1),17));

        sext_ln1265_19_fu_997_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(y_data_V_q1),17));

        sext_ln1265_1_fu_643_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(y_data_V_q0),17));

        sext_ln1265_20_fu_1087_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(x_data_V_q0),17));

        sext_ln1265_21_fu_1097_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(y_data_V_q0),17));

        sext_ln1265_2_fu_662_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(x_data_V_q1),17));

        sext_ln1265_3_fu_671_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(y_data_V_q1),17));

        sext_ln1265_4_fu_714_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(x_data_V_q0),17));

        sext_ln1265_5_fu_723_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(y_data_V_q0),17));

        sext_ln1265_6_fu_742_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(x_data_V_q1),17));

        sext_ln1265_7_fu_751_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(y_data_V_q1),17));

        sext_ln1265_8_fu_794_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(x_data_V_q0),17));

        sext_ln1265_9_fu_803_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(y_data_V_q0),17));

        sext_ln1265_fu_634_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(x_data_V_q0),17));

    shl_ln_fu_596_p3 <= (trunc_ln728_fu_592_p1 & ap_const_lv10_0);
    sub_ln703_10_fu_732_p2 <= std_logic_vector(signed(sext_ln1265_4_fu_714_p1) - signed(centroids_x_V_load_1_reg_1189));
    sub_ln703_11_fu_737_p2 <= std_logic_vector(signed(sext_ln1265_5_fu_723_p1) - signed(centroids_y_V_load_1_reg_1203));
    sub_ln703_12_fu_746_p2 <= std_logic_vector(signed(sext_ln1265_6_fu_742_p1) - signed(centroids_x_V_load_reg_1161));
    sub_ln703_13_fu_755_p2 <= std_logic_vector(signed(sext_ln1265_7_fu_751_p1) - signed(centroids_y_V_load_reg_1175));
    sub_ln703_14_fu_760_p2 <= std_logic_vector(signed(sext_ln1265_6_fu_742_p1) - signed(centroids_x_V_load_1_reg_1189));
    sub_ln703_15_fu_765_p2 <= std_logic_vector(signed(sext_ln1265_7_fu_751_p1) - signed(centroids_y_V_load_1_reg_1203));
    sub_ln703_16_fu_798_p2 <= std_logic_vector(signed(sext_ln1265_8_fu_794_p1) - signed(centroids_x_V_load_reg_1161));
    sub_ln703_17_fu_807_p2 <= std_logic_vector(signed(sext_ln1265_9_fu_803_p1) - signed(centroids_y_V_load_reg_1175));
    sub_ln703_18_fu_812_p2 <= std_logic_vector(signed(sext_ln1265_8_fu_794_p1) - signed(centroids_x_V_load_1_reg_1189));
    sub_ln703_19_fu_817_p2 <= std_logic_vector(signed(sext_ln1265_9_fu_803_p1) - signed(centroids_y_V_load_1_reg_1203));
    sub_ln703_1_fu_647_p2 <= std_logic_vector(signed(sext_ln1265_1_fu_643_p1) - signed(centroids_y_V_load_reg_1175));
    sub_ln703_20_fu_826_p2 <= std_logic_vector(signed(sext_ln1265_10_fu_822_p1) - signed(centroids_x_V_load_reg_1161));
    sub_ln703_21_fu_835_p2 <= std_logic_vector(signed(sext_ln1265_11_fu_831_p1) - signed(centroids_y_V_load_reg_1175));
    sub_ln703_22_fu_840_p2 <= std_logic_vector(signed(sext_ln1265_10_fu_822_p1) - signed(centroids_x_V_load_1_reg_1189));
    sub_ln703_23_fu_845_p2 <= std_logic_vector(signed(sext_ln1265_11_fu_831_p1) - signed(centroids_y_V_load_1_reg_1203));
    sub_ln703_24_fu_878_p2 <= std_logic_vector(signed(sext_ln1265_12_fu_874_p1) - signed(centroids_x_V_load_reg_1161));
    sub_ln703_25_fu_887_p2 <= std_logic_vector(signed(sext_ln1265_13_fu_883_p1) - signed(centroids_y_V_load_reg_1175));
    sub_ln703_26_fu_892_p2 <= std_logic_vector(signed(sext_ln1265_12_fu_874_p1) - signed(centroids_x_V_load_1_reg_1189));
    sub_ln703_27_fu_897_p2 <= std_logic_vector(signed(sext_ln1265_13_fu_883_p1) - signed(centroids_y_V_load_1_reg_1203));
    sub_ln703_28_fu_906_p2 <= std_logic_vector(signed(sext_ln1265_14_fu_902_p1) - signed(centroids_x_V_load_reg_1161));
    sub_ln703_29_fu_915_p2 <= std_logic_vector(signed(sext_ln1265_15_fu_911_p1) - signed(centroids_y_V_load_reg_1175));
    sub_ln703_2_fu_652_p2 <= std_logic_vector(signed(sext_ln1265_fu_634_p1) - signed(centroids_x_V_load_1_reg_1189));
    sub_ln703_30_fu_920_p2 <= std_logic_vector(signed(sext_ln1265_14_fu_902_p1) - signed(centroids_x_V_load_1_reg_1189));
    sub_ln703_31_fu_925_p2 <= std_logic_vector(signed(sext_ln1265_15_fu_911_p1) - signed(centroids_y_V_load_1_reg_1203));
    sub_ln703_32_fu_964_p2 <= std_logic_vector(signed(sext_ln1265_16_fu_960_p1) - signed(centroids_x_V_load_reg_1161));
    sub_ln703_33_fu_973_p2 <= std_logic_vector(signed(sext_ln1265_17_fu_969_p1) - signed(centroids_y_V_load_reg_1175));
    sub_ln703_34_fu_978_p2 <= std_logic_vector(signed(sext_ln1265_16_fu_960_p1) - signed(centroids_x_V_load_1_reg_1189));
    sub_ln703_35_fu_983_p2 <= std_logic_vector(signed(sext_ln1265_17_fu_969_p1) - signed(centroids_y_V_load_1_reg_1203));
    sub_ln703_36_fu_992_p2 <= std_logic_vector(signed(sext_ln1265_18_fu_988_p1) - signed(centroids_x_V_load_reg_1161));
    sub_ln703_37_fu_1001_p2 <= std_logic_vector(signed(sext_ln1265_19_fu_997_p1) - signed(centroids_y_V_load_reg_1175));
    sub_ln703_38_fu_1006_p2 <= std_logic_vector(signed(sext_ln1265_18_fu_988_p1) - signed(centroids_x_V_load_1_reg_1189));
    sub_ln703_39_fu_1011_p2 <= std_logic_vector(signed(sext_ln1265_19_fu_997_p1) - signed(centroids_y_V_load_1_reg_1203));
    sub_ln703_3_fu_657_p2 <= std_logic_vector(signed(sext_ln1265_1_fu_643_p1) - signed(centroids_y_V_load_1_reg_1203));
    sub_ln703_4_fu_666_p2 <= std_logic_vector(signed(sext_ln1265_2_fu_662_p1) - signed(centroids_x_V_load_reg_1161));
    sub_ln703_5_fu_675_p2 <= std_logic_vector(signed(sext_ln1265_3_fu_671_p1) - signed(centroids_y_V_load_reg_1175));
    sub_ln703_6_fu_680_p2 <= std_logic_vector(signed(sext_ln1265_2_fu_662_p1) - signed(centroids_x_V_load_1_reg_1189));
    sub_ln703_7_fu_685_p2 <= std_logic_vector(signed(sext_ln1265_3_fu_671_p1) - signed(centroids_y_V_load_1_reg_1203));
    sub_ln703_8_fu_718_p2 <= std_logic_vector(signed(sext_ln1265_4_fu_714_p1) - signed(centroids_x_V_load_reg_1161));
    sub_ln703_9_fu_727_p2 <= std_logic_vector(signed(sext_ln1265_5_fu_723_p1) - signed(centroids_y_V_load_reg_1175));
    sub_ln703_fu_638_p2 <= std_logic_vector(signed(sext_ln1265_fu_634_p1) - signed(centroids_x_V_load_reg_1161));
    trunc_ln728_fu_592_p1 <= p_Val2_1_reg_416(1 - 1 downto 0);

    x_data_V_address0_assign_proc : process(zext_ln31_fu_616_p1, ap_CS_fsm_state4, ap_CS_fsm_state5, zext_ln31_2_fu_696_p1, ap_CS_fsm_state6, zext_ln31_4_fu_776_p1, ap_CS_fsm_state7, zext_ln31_6_fu_856_p1, ap_CS_fsm_state8, zext_ln31_8_fu_936_p1, ap_CS_fsm_state13, zext_ln50_fu_1040_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            x_data_V_address0 <= zext_ln50_fu_1040_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            x_data_V_address0 <= zext_ln31_8_fu_936_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            x_data_V_address0 <= zext_ln31_6_fu_856_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            x_data_V_address0 <= zext_ln31_4_fu_776_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            x_data_V_address0 <= zext_ln31_2_fu_696_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            x_data_V_address0 <= zext_ln31_fu_616_p1(6 - 1 downto 0);
        else 
            x_data_V_address0 <= "XXXXXX";
        end if; 
    end process;


    x_data_V_address1_assign_proc : process(ap_CS_fsm_state4, zext_ln31_1_fu_628_p1, ap_CS_fsm_state5, zext_ln31_3_fu_708_p1, ap_CS_fsm_state6, zext_ln31_5_fu_788_p1, ap_CS_fsm_state7, zext_ln31_7_fu_868_p1, ap_CS_fsm_state8, zext_ln31_9_fu_948_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            x_data_V_address1 <= zext_ln31_9_fu_948_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            x_data_V_address1 <= zext_ln31_7_fu_868_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            x_data_V_address1 <= zext_ln31_5_fu_788_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            x_data_V_address1 <= zext_ln31_3_fu_708_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            x_data_V_address1 <= zext_ln31_1_fu_628_p1(6 - 1 downto 0);
        else 
            x_data_V_address1 <= "XXXXXX";
        end if; 
    end process;


    x_data_V_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            x_data_V_ce0 <= ap_const_logic_1;
        else 
            x_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    x_data_V_ce1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            x_data_V_ce1 <= ap_const_logic_1;
        else 
            x_data_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    y_data_V_address0_assign_proc : process(zext_ln31_fu_616_p1, ap_CS_fsm_state4, ap_CS_fsm_state5, zext_ln31_2_fu_696_p1, ap_CS_fsm_state6, zext_ln31_4_fu_776_p1, ap_CS_fsm_state7, zext_ln31_6_fu_856_p1, ap_CS_fsm_state8, zext_ln31_8_fu_936_p1, ap_CS_fsm_state13, zext_ln50_fu_1040_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            y_data_V_address0 <= zext_ln50_fu_1040_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            y_data_V_address0 <= zext_ln31_8_fu_936_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            y_data_V_address0 <= zext_ln31_6_fu_856_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            y_data_V_address0 <= zext_ln31_4_fu_776_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            y_data_V_address0 <= zext_ln31_2_fu_696_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            y_data_V_address0 <= zext_ln31_fu_616_p1(6 - 1 downto 0);
        else 
            y_data_V_address0 <= "XXXXXX";
        end if; 
    end process;


    y_data_V_address1_assign_proc : process(ap_CS_fsm_state4, zext_ln31_1_fu_628_p1, ap_CS_fsm_state5, zext_ln31_3_fu_708_p1, ap_CS_fsm_state6, zext_ln31_5_fu_788_p1, ap_CS_fsm_state7, zext_ln31_7_fu_868_p1, ap_CS_fsm_state8, zext_ln31_9_fu_948_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            y_data_V_address1 <= zext_ln31_9_fu_948_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            y_data_V_address1 <= zext_ln31_7_fu_868_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            y_data_V_address1 <= zext_ln31_5_fu_788_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            y_data_V_address1 <= zext_ln31_3_fu_708_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            y_data_V_address1 <= zext_ln31_1_fu_628_p1(6 - 1 downto 0);
        else 
            y_data_V_address1 <= "XXXXXX";
        end if; 
    end process;


    y_data_V_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            y_data_V_ce0 <= ap_const_logic_1;
        else 
            y_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    y_data_V_ce1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            y_data_V_ce1 <= ap_const_logic_1;
        else 
            y_data_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln1148_fu_1057_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_reg_486),18));
    zext_ln20_fu_586_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_1_reg_416),64));
    zext_ln31_1_fu_628_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln30_fu_622_p2),64));
    zext_ln31_2_fu_696_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln30_fu_690_p2),64));
    zext_ln31_3_fu_708_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln30_1_fu_702_p2),64));
    zext_ln31_4_fu_776_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln30_2_fu_770_p2),64));
    zext_ln31_5_fu_788_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln30_3_fu_782_p2),64));
    zext_ln31_6_fu_856_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln30_4_fu_850_p2),64));
    zext_ln31_7_fu_868_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln30_5_fu_862_p2),64));
    zext_ln31_8_fu_936_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln30_6_fu_930_p2),64));
    zext_ln31_9_fu_948_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln30_7_fu_942_p2),64));
    zext_ln31_fu_616_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_0_reg_427),64));
    zext_ln50_1_fu_1077_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data_cluster_id_q0),2));
    zext_ln50_fu_1040_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_1_reg_475),64));
    zext_ln58_fu_1137_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_439),64));
    zext_ln728_fu_604_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_596_p3),17));
end behav;
