// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "abs_custom.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic abs_custom::ap_const_logic_1 = sc_dt::Log_1;
const bool abs_custom::ap_const_boolean_1 = true;
const sc_lv<32> abs_custom::ap_const_lv32_10 = "10000";
const sc_lv<17> abs_custom::ap_const_lv17_0 = "00000000000000000";
const sc_logic abs_custom::ap_const_logic_0 = sc_dt::Log_0;

abs_custom::abs_custom(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_ready);

    SC_METHOD(thread_ap_return);
    sensitive << ( number_V );
    sensitive << ( tmp_fu_16_p3 );
    sensitive << ( sub_ln703_fu_24_p2 );

    SC_METHOD(thread_sub_ln703_fu_24_p2);
    sensitive << ( number_V );

    SC_METHOD(thread_tmp_fu_16_p3);
    sensitive << ( number_V );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "abs_custom_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, number_V, "(port)number_V");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, tmp_fu_16_p3, "tmp_fu_16_p3");
    sc_trace(mVcdFile, sub_ln703_fu_24_p2, "sub_ln703_fu_24_p2");
#endif

    }
}

abs_custom::~abs_custom() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void abs_custom::thread_ap_ready() {
    ap_ready = ap_const_logic_1;
}

void abs_custom::thread_ap_return() {
    ap_return = (!tmp_fu_16_p3.read()[0].is_01())? sc_lv<17>(): ((tmp_fu_16_p3.read()[0].to_bool())? sub_ln703_fu_24_p2.read(): number_V.read());
}

void abs_custom::thread_sub_ln703_fu_24_p2() {
    sub_ln703_fu_24_p2 = (!ap_const_lv17_0.is_01() || !number_V.read().is_01())? sc_lv<17>(): (sc_biguint<17>(ap_const_lv17_0) - sc_biguint<17>(number_V.read()));
}

void abs_custom::thread_tmp_fu_16_p3() {
    tmp_fu_16_p3 = number_V.read().range(16, 16);
}

}

