-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity kmeans is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    centroids_x_V_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    centroids_x_V_ce0 : OUT STD_LOGIC;
    centroids_x_V_we0 : OUT STD_LOGIC;
    centroids_x_V_d0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    centroids_x_V_q0 : IN STD_LOGIC_VECTOR (16 downto 0);
    centroids_x_V_address1 : OUT STD_LOGIC_VECTOR (0 downto 0);
    centroids_x_V_ce1 : OUT STD_LOGIC;
    centroids_x_V_we1 : OUT STD_LOGIC;
    centroids_x_V_d1 : OUT STD_LOGIC_VECTOR (16 downto 0);
    centroids_x_V_q1 : IN STD_LOGIC_VECTOR (16 downto 0);
    centroids_y_V_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    centroids_y_V_ce0 : OUT STD_LOGIC;
    centroids_y_V_we0 : OUT STD_LOGIC;
    centroids_y_V_d0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    centroids_y_V_q0 : IN STD_LOGIC_VECTOR (16 downto 0);
    centroids_y_V_address1 : OUT STD_LOGIC_VECTOR (0 downto 0);
    centroids_y_V_ce1 : OUT STD_LOGIC;
    centroids_y_V_we1 : OUT STD_LOGIC;
    centroids_y_V_d1 : OUT STD_LOGIC_VECTOR (16 downto 0);
    centroids_y_V_q1 : IN STD_LOGIC_VECTOR (16 downto 0) );
end;


architecture behav of kmeans is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "kmeans,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.457000,HLS_SYN_LAT=432,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1078,HLS_SYN_LUT=1407,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (30 downto 0) := "0000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (30 downto 0) := "0000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (30 downto 0) := "0000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (30 downto 0) := "0000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (30 downto 0) := "0000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (30 downto 0) := "0000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (30 downto 0) := "0001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (30 downto 0) := "0010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (30 downto 0) := "0100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (30 downto 0) := "1000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv6_32 : STD_LOGIC_VECTOR (5 downto 0) := "110010";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal x_data_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal x_data_V_ce0 : STD_LOGIC;
    signal x_data_V_q0 : STD_LOGIC_VECTOR (12 downto 0);
    signal y_data_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal y_data_V_ce0 : STD_LOGIC;
    signal y_data_V_q0 : STD_LOGIC_VECTOR (12 downto 0);
    signal i_fu_262_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal centroids_x_V_load_reg_582 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal centroids_y_V_load_reg_587 : STD_LOGIC_VECTOR (16 downto 0);
    signal centroids_x_V_load_1_reg_592 : STD_LOGIC_VECTOR (16 downto 0);
    signal centroids_y_V_load_1_reg_597 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln30_fu_298_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln30_reg_605 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal zext_ln31_fu_304_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_reg_610 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln30_fu_292_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_data_V_load_reg_625 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal y_data_V_load_reg_630 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln703_fu_370_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln703_reg_635 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal add_ln703_1_fu_430_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln703_1_reg_640 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln44_fu_447_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln44_reg_648 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal add_ln49_fu_459_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln49_reg_656 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal icmp_ln49_fu_453_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln57_fu_472_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln57_reg_676 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln50_fu_534_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal select_ln50_1_fu_542_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal select_ln50_2_fu_550_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_cluster_id_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal data_cluster_id_ce0 : STD_LOGIC;
    signal data_cluster_id_we0 : STD_LOGIC;
    signal data_cluster_id_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal data_cluster_id_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_s_reg_175 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln19_fu_256_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_0_reg_186 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal i_2_0_reg_197 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal p_Val2_13_0_reg_209 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_ln44_fu_441_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_15_0_reg_221 : STD_LOGIC_VECTOR (16 downto 0);
    signal j_1_0_reg_233 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_op_assign_0_reg_244 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln20_fu_268_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln50_fu_465_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln58_fu_558_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln731_fu_286_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln731_fu_274_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln_fu_278_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln1265_fu_310_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln703_fu_313_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_fu_318_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln703_4_fu_326_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln1265_1_fu_340_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln703_1_fu_343_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_1_fu_348_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln703_5_fu_356_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal select_ln4_fu_332_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal select_ln4_1_fu_362_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln703_2_fu_376_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_2_fu_381_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln703_6_fu_389_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln703_3_fu_403_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_3_fu_408_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln703_7_fu_416_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal select_ln4_2_fu_395_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal select_ln4_3_fu_422_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_482_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_492_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln50_1_fu_498_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal sext_ln1265_2_fu_508_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln1265_3_fu_518_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_ln50_fu_502_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln703_2_fu_512_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln703_3_fu_522_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln53_fu_528_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_482_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_492_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_482_ap_start : STD_LOGIC;
    signal grp_fu_482_ap_done : STD_LOGIC;
    signal grp_fu_492_ap_start : STD_LOGIC;
    signal grp_fu_492_ap_done : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (30 downto 0);

    component kmeans_sdiv_18s_3cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component kmeans_x_data_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component kmeans_y_data_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component kmeans_data_clustbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    x_data_V_U : component kmeans_x_data_V
    generic map (
        DataWidth => 13,
        AddressRange => 50,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => x_data_V_address0,
        ce0 => x_data_V_ce0,
        q0 => x_data_V_q0);

    y_data_V_U : component kmeans_y_data_V
    generic map (
        DataWidth => 13,
        AddressRange => 50,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => y_data_V_address0,
        ce0 => y_data_V_ce0,
        q0 => y_data_V_q0);

    data_cluster_id_U : component kmeans_data_clustbkb
    generic map (
        DataWidth => 1,
        AddressRange => 50,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => data_cluster_id_address0,
        ce0 => data_cluster_id_ce0,
        we0 => data_cluster_id_we0,
        d0 => data_cluster_id_d0,
        q0 => data_cluster_id_q0);

    kmeans_sdiv_18s_3cud_U1 : component kmeans_sdiv_18s_3cud
    generic map (
        ID => 1,
        NUM_STAGE => 22,
        din0_WIDTH => 18,
        din1_WIDTH => 32,
        dout_WIDTH => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_482_ap_start,
        done => grp_fu_482_ap_done,
        din0 => grp_fu_482_p0,
        din1 => i_op_assign_0_reg_244,
        ce => ap_const_logic_1,
        dout => grp_fu_482_p2);

    kmeans_sdiv_18s_3cud_U2 : component kmeans_sdiv_18s_3cud
    generic map (
        ID => 1,
        NUM_STAGE => 22,
        din0_WIDTH => 18,
        din1_WIDTH => 32,
        dout_WIDTH => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_492_ap_start,
        done => grp_fu_492_ap_done,
        din0 => grp_fu_492_p0,
        din1 => i_op_assign_0_reg_244,
        ce => ap_const_logic_1,
        dout => grp_fu_492_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_1_0_reg_186_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_1_0_reg_186 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                i_1_0_reg_186 <= add_ln30_reg_605;
            end if; 
        end if;
    end process;

    i_2_0_reg_197_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln30_fu_292_p2 = ap_const_lv1_1))) then 
                i_2_0_reg_197 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
                i_2_0_reg_197 <= add_ln44_reg_648;
            end if; 
        end if;
    end process;

    i_op_assign_0_reg_244_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln44_fu_441_p2 = ap_const_lv1_0))) then 
                i_op_assign_0_reg_244 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                i_op_assign_0_reg_244 <= select_ln50_2_fu_550_p3;
            end if; 
        end if;
    end process;

    j_1_0_reg_233_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln44_fu_441_p2 = ap_const_lv1_0))) then 
                j_1_0_reg_233 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                j_1_0_reg_233 <= add_ln49_reg_656;
            end if; 
        end if;
    end process;

    p_Val2_13_0_reg_209_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln44_fu_441_p2 = ap_const_lv1_0))) then 
                p_Val2_13_0_reg_209 <= ap_const_lv17_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                p_Val2_13_0_reg_209 <= select_ln50_fu_534_p3;
            end if; 
        end if;
    end process;

    p_Val2_15_0_reg_221_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln44_fu_441_p2 = ap_const_lv1_0))) then 
                p_Val2_15_0_reg_221 <= ap_const_lv17_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                p_Val2_15_0_reg_221 <= select_ln50_1_fu_542_p3;
            end if; 
        end if;
    end process;

    p_Val2_s_reg_175_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln19_fu_256_p2 = ap_const_lv1_0))) then 
                p_Val2_s_reg_175 <= i_fu_262_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_Val2_s_reg_175 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                add_ln30_reg_605 <= add_ln30_fu_298_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                add_ln44_reg_648 <= add_ln44_fu_447_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                add_ln49_reg_656 <= add_ln49_fu_459_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                add_ln703_1_reg_640 <= add_ln703_1_fu_430_p2;
                add_ln703_reg_635 <= add_ln703_fu_370_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                centroids_x_V_load_1_reg_592 <= centroids_x_V_q1;
                centroids_x_V_load_reg_582 <= centroids_x_V_q0;
                centroids_y_V_load_1_reg_597 <= centroids_y_V_q1;
                centroids_y_V_load_reg_587 <= centroids_y_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln49_fu_453_p2 = ap_const_lv1_1))) then
                icmp_ln57_reg_676 <= icmp_ln57_fu_472_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                x_data_V_load_reg_625 <= x_data_V_q0;
                y_data_V_load_reg_630 <= y_data_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln30_fu_292_p2 = ap_const_lv1_0))) then
                    zext_ln31_reg_610(5 downto 0) <= zext_ln31_fu_304_p1(5 downto 0);
            end if;
        end if;
    end process;
    zext_ln31_reg_610(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state4, icmp_ln30_fu_292_p2, ap_CS_fsm_state8, ap_CS_fsm_state9, icmp_ln49_fu_453_p2, icmp_ln57_fu_472_p2, icmp_ln19_fu_256_p2, icmp_ln44_fu_441_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln19_fu_256_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln30_fu_292_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln44_fu_441_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln57_fu_472_p2 = ap_const_lv1_1) and (icmp_ln49_fu_453_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln49_fu_453_p2 = ap_const_lv1_1) and (icmp_ln57_fu_472_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln30_fu_298_p2 <= std_logic_vector(unsigned(i_1_0_reg_186) + unsigned(ap_const_lv6_1));
    add_ln44_fu_447_p2 <= std_logic_vector(unsigned(i_2_0_reg_197) + unsigned(ap_const_lv2_1));
    add_ln49_fu_459_p2 <= std_logic_vector(unsigned(j_1_0_reg_233) + unsigned(ap_const_lv6_1));
    add_ln53_fu_528_p2 <= std_logic_vector(unsigned(i_op_assign_0_reg_244) + unsigned(ap_const_lv32_1));
    add_ln703_1_fu_430_p2 <= std_logic_vector(unsigned(select_ln4_2_fu_395_p3) + unsigned(select_ln4_3_fu_422_p3));
    add_ln703_2_fu_512_p2 <= std_logic_vector(signed(sext_ln1265_2_fu_508_p1) + signed(p_Val2_13_0_reg_209));
    add_ln703_3_fu_522_p2 <= std_logic_vector(signed(sext_ln1265_3_fu_518_p1) + signed(p_Val2_15_0_reg_221));
    add_ln703_fu_370_p2 <= std_logic_vector(unsigned(select_ln4_fu_332_p3) + unsigned(select_ln4_1_fu_362_p3));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state8, icmp_ln44_fu_441_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln44_fu_441_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state8, icmp_ln44_fu_441_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln44_fu_441_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    centroids_x_V_address0_assign_proc : process(ap_CS_fsm_state2, icmp_ln19_fu_256_p2, zext_ln20_fu_268_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
            if ((icmp_ln19_fu_256_p2 = ap_const_lv1_1)) then 
                centroids_x_V_address0 <= ap_const_lv1_0;
            elsif ((icmp_ln19_fu_256_p2 = ap_const_lv1_0)) then 
                centroids_x_V_address0 <= zext_ln20_fu_268_p1(1 - 1 downto 0);
            else 
                centroids_x_V_address0 <= "X";
            end if;
        else 
            centroids_x_V_address0 <= "X";
        end if; 
    end process;


    centroids_x_V_address1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state31, zext_ln58_fu_558_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            centroids_x_V_address1 <= zext_ln58_fu_558_p1(1 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            centroids_x_V_address1 <= ap_const_lv1_1;
        else 
            centroids_x_V_address1 <= "X";
        end if; 
    end process;


    centroids_x_V_ce0_assign_proc : process(ap_CS_fsm_state2, icmp_ln19_fu_256_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln19_fu_256_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln19_fu_256_p2 = ap_const_lv1_0)))) then 
            centroids_x_V_ce0 <= ap_const_logic_1;
        else 
            centroids_x_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    centroids_x_V_ce1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state31)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            centroids_x_V_ce1 <= ap_const_logic_1;
        else 
            centroids_x_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    centroids_x_V_d0 <= zext_ln731_fu_286_p1;
    centroids_x_V_d1 <= grp_fu_482_p2(17 - 1 downto 0);

    centroids_x_V_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln19_fu_256_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln19_fu_256_p2 = ap_const_lv1_0))) then 
            centroids_x_V_we0 <= ap_const_logic_1;
        else 
            centroids_x_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    centroids_x_V_we1_assign_proc : process(icmp_ln57_reg_676, ap_CS_fsm_state31)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state31) and (icmp_ln57_reg_676 = ap_const_lv1_0))) then 
            centroids_x_V_we1 <= ap_const_logic_1;
        else 
            centroids_x_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    centroids_y_V_address0_assign_proc : process(ap_CS_fsm_state2, icmp_ln19_fu_256_p2, zext_ln20_fu_268_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
            if ((icmp_ln19_fu_256_p2 = ap_const_lv1_1)) then 
                centroids_y_V_address0 <= ap_const_lv1_0;
            elsif ((icmp_ln19_fu_256_p2 = ap_const_lv1_0)) then 
                centroids_y_V_address0 <= zext_ln20_fu_268_p1(1 - 1 downto 0);
            else 
                centroids_y_V_address0 <= "X";
            end if;
        else 
            centroids_y_V_address0 <= "X";
        end if; 
    end process;


    centroids_y_V_address1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state31, zext_ln58_fu_558_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            centroids_y_V_address1 <= zext_ln58_fu_558_p1(1 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            centroids_y_V_address1 <= ap_const_lv1_1;
        else 
            centroids_y_V_address1 <= "X";
        end if; 
    end process;


    centroids_y_V_ce0_assign_proc : process(ap_CS_fsm_state2, icmp_ln19_fu_256_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln19_fu_256_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln19_fu_256_p2 = ap_const_lv1_0)))) then 
            centroids_y_V_ce0 <= ap_const_logic_1;
        else 
            centroids_y_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    centroids_y_V_ce1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state31)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            centroids_y_V_ce1 <= ap_const_logic_1;
        else 
            centroids_y_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    centroids_y_V_d0 <= zext_ln731_fu_286_p1;
    centroids_y_V_d1 <= grp_fu_492_p2(17 - 1 downto 0);

    centroids_y_V_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln19_fu_256_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln19_fu_256_p2 = ap_const_lv1_0))) then 
            centroids_y_V_we0 <= ap_const_logic_1;
        else 
            centroids_y_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    centroids_y_V_we1_assign_proc : process(icmp_ln57_reg_676, ap_CS_fsm_state31)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state31) and (icmp_ln57_reg_676 = ap_const_lv1_0))) then 
            centroids_y_V_we1 <= ap_const_logic_1;
        else 
            centroids_y_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    data_cluster_id_address0_assign_proc : process(zext_ln31_reg_610, ap_CS_fsm_state9, ap_CS_fsm_state7, zext_ln50_fu_465_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            data_cluster_id_address0 <= zext_ln50_fu_465_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            data_cluster_id_address0 <= zext_ln31_reg_610(6 - 1 downto 0);
        else 
            data_cluster_id_address0 <= "XXXXXX";
        end if; 
    end process;


    data_cluster_id_ce0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            data_cluster_id_ce0 <= ap_const_logic_1;
        else 
            data_cluster_id_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    data_cluster_id_d0 <= "1" when (signed(add_ln703_1_reg_640) < signed(add_ln703_reg_635)) else "0";

    data_cluster_id_we0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            data_cluster_id_we0 <= ap_const_logic_1;
        else 
            data_cluster_id_we0 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_482_ap_start_assign_proc : process(ap_CS_fsm_state9, icmp_ln49_fu_453_p2, icmp_ln57_fu_472_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln49_fu_453_p2 = ap_const_lv1_1) and (icmp_ln57_fu_472_p2 = ap_const_lv1_0))) then 
            grp_fu_482_ap_start <= ap_const_logic_1;
        else 
            grp_fu_482_ap_start <= ap_const_logic_0;
        end if; 
    end process;

        grp_fu_482_p0 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_13_0_reg_209),18));


    grp_fu_492_ap_start_assign_proc : process(ap_CS_fsm_state9, icmp_ln49_fu_453_p2, icmp_ln57_fu_472_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln49_fu_453_p2 = ap_const_lv1_1) and (icmp_ln57_fu_472_p2 = ap_const_lv1_0))) then 
            grp_fu_492_ap_start <= ap_const_logic_1;
        else 
            grp_fu_492_ap_start <= ap_const_logic_0;
        end if; 
    end process;

        grp_fu_492_p0 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_15_0_reg_221),18));

    i_fu_262_p2 <= std_logic_vector(unsigned(p_Val2_s_reg_175) + unsigned(ap_const_lv2_1));
    icmp_ln19_fu_256_p2 <= "1" when (p_Val2_s_reg_175 = ap_const_lv2_2) else "0";
    icmp_ln30_fu_292_p2 <= "1" when (i_1_0_reg_186 = ap_const_lv6_32) else "0";
    icmp_ln44_fu_441_p2 <= "1" when (i_2_0_reg_197 = ap_const_lv2_2) else "0";
    icmp_ln49_fu_453_p2 <= "1" when (j_1_0_reg_233 = ap_const_lv6_32) else "0";
    icmp_ln50_fu_502_p2 <= "1" when (zext_ln50_1_fu_498_p1 = i_2_0_reg_197) else "0";
    icmp_ln57_fu_472_p2 <= "1" when (i_op_assign_0_reg_244 = ap_const_lv32_0) else "0";
    select_ln4_1_fu_362_p3 <= 
        sub_ln703_5_fu_356_p2 when (tmp_1_fu_348_p3(0) = '1') else 
        sub_ln703_1_fu_343_p2;
    select_ln4_2_fu_395_p3 <= 
        sub_ln703_6_fu_389_p2 when (tmp_2_fu_381_p3(0) = '1') else 
        sub_ln703_2_fu_376_p2;
    select_ln4_3_fu_422_p3 <= 
        sub_ln703_7_fu_416_p2 when (tmp_3_fu_408_p3(0) = '1') else 
        sub_ln703_3_fu_403_p2;
    select_ln4_fu_332_p3 <= 
        sub_ln703_4_fu_326_p2 when (tmp_fu_318_p3(0) = '1') else 
        sub_ln703_fu_313_p2;
    select_ln50_1_fu_542_p3 <= 
        add_ln703_3_fu_522_p2 when (icmp_ln50_fu_502_p2(0) = '1') else 
        p_Val2_15_0_reg_221;
    select_ln50_2_fu_550_p3 <= 
        add_ln53_fu_528_p2 when (icmp_ln50_fu_502_p2(0) = '1') else 
        i_op_assign_0_reg_244;
    select_ln50_fu_534_p3 <= 
        add_ln703_2_fu_512_p2 when (icmp_ln50_fu_502_p2(0) = '1') else 
        p_Val2_13_0_reg_209;
        sext_ln1265_1_fu_340_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(y_data_V_load_reg_630),17));

        sext_ln1265_2_fu_508_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(x_data_V_q0),17));

        sext_ln1265_3_fu_518_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(y_data_V_q0),17));

        sext_ln1265_fu_310_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(x_data_V_load_reg_625),17));

    shl_ln_fu_278_p3 <= (trunc_ln731_fu_274_p1 & ap_const_lv10_0);
    sub_ln703_1_fu_343_p2 <= std_logic_vector(signed(sext_ln1265_1_fu_340_p1) - signed(centroids_y_V_load_reg_587));
    sub_ln703_2_fu_376_p2 <= std_logic_vector(signed(sext_ln1265_fu_310_p1) - signed(centroids_x_V_load_1_reg_592));
    sub_ln703_3_fu_403_p2 <= std_logic_vector(signed(sext_ln1265_1_fu_340_p1) - signed(centroids_y_V_load_1_reg_597));
    sub_ln703_4_fu_326_p2 <= std_logic_vector(unsigned(ap_const_lv17_0) - unsigned(sub_ln703_fu_313_p2));
    sub_ln703_5_fu_356_p2 <= std_logic_vector(unsigned(ap_const_lv17_0) - unsigned(sub_ln703_1_fu_343_p2));
    sub_ln703_6_fu_389_p2 <= std_logic_vector(unsigned(ap_const_lv17_0) - unsigned(sub_ln703_2_fu_376_p2));
    sub_ln703_7_fu_416_p2 <= std_logic_vector(unsigned(ap_const_lv17_0) - unsigned(sub_ln703_3_fu_403_p2));
    sub_ln703_fu_313_p2 <= std_logic_vector(signed(sext_ln1265_fu_310_p1) - signed(centroids_x_V_load_reg_582));
    tmp_1_fu_348_p3 <= sub_ln703_1_fu_343_p2(16 downto 16);
    tmp_2_fu_381_p3 <= sub_ln703_2_fu_376_p2(16 downto 16);
    tmp_3_fu_408_p3 <= sub_ln703_3_fu_403_p2(16 downto 16);
    tmp_fu_318_p3 <= sub_ln703_fu_313_p2(16 downto 16);
    trunc_ln731_fu_274_p1 <= p_Val2_s_reg_175(1 - 1 downto 0);

    x_data_V_address0_assign_proc : process(ap_CS_fsm_state4, zext_ln31_fu_304_p1, ap_CS_fsm_state9, zext_ln50_fu_465_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            x_data_V_address0 <= zext_ln50_fu_465_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            x_data_V_address0 <= zext_ln31_fu_304_p1(6 - 1 downto 0);
        else 
            x_data_V_address0 <= "XXXXXX";
        end if; 
    end process;


    x_data_V_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            x_data_V_ce0 <= ap_const_logic_1;
        else 
            x_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    y_data_V_address0_assign_proc : process(ap_CS_fsm_state4, zext_ln31_fu_304_p1, ap_CS_fsm_state9, zext_ln50_fu_465_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            y_data_V_address0 <= zext_ln50_fu_465_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            y_data_V_address0 <= zext_ln31_fu_304_p1(6 - 1 downto 0);
        else 
            y_data_V_address0 <= "XXXXXX";
        end if; 
    end process;


    y_data_V_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            y_data_V_ce0 <= ap_const_logic_1;
        else 
            y_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln20_fu_268_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_s_reg_175),64));
    zext_ln31_fu_304_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_0_reg_186),64));
    zext_ln50_1_fu_498_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data_cluster_id_q0),2));
    zext_ln50_fu_465_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_1_0_reg_233),64));
    zext_ln58_fu_558_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_0_reg_197),64));
    zext_ln731_fu_286_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_278_p3),17));
end behav;
