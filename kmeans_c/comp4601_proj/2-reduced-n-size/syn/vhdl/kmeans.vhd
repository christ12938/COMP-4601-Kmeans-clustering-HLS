-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity kmeans is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    centroids_x_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    centroids_x_ce0 : OUT STD_LOGIC;
    centroids_x_we0 : OUT STD_LOGIC;
    centroids_x_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    centroids_x_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    centroids_x_address1 : OUT STD_LOGIC_VECTOR (0 downto 0);
    centroids_x_ce1 : OUT STD_LOGIC;
    centroids_x_we1 : OUT STD_LOGIC;
    centroids_x_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    centroids_x_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    centroids_y_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    centroids_y_ce0 : OUT STD_LOGIC;
    centroids_y_we0 : OUT STD_LOGIC;
    centroids_y_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    centroids_y_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    centroids_y_address1 : OUT STD_LOGIC_VECTOR (0 downto 0);
    centroids_y_ce1 : OUT STD_LOGIC;
    centroids_y_we1 : OUT STD_LOGIC;
    centroids_y_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    centroids_y_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of kmeans is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "kmeans,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.514000,HLS_SYN_LAT=4992,HLS_SYN_TPT=none,HLS_SYN_MEM=270,HLS_SYN_DSP=294,HLS_SYN_FF=83050,HLS_SYN_LUT=41806,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state98 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state99 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state100 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state101 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state102 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state103 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state104 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state105 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state106 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state107 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state108 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state109 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state110 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state111 : STD_LOGIC_VECTOR (121 downto 0) := "00000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state112 : STD_LOGIC_VECTOR (121 downto 0) := "00000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state113 : STD_LOGIC_VECTOR (121 downto 0) := "00000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state114 : STD_LOGIC_VECTOR (121 downto 0) := "00000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state115 : STD_LOGIC_VECTOR (121 downto 0) := "00000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state116 : STD_LOGIC_VECTOR (121 downto 0) := "00000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state117 : STD_LOGIC_VECTOR (121 downto 0) := "00000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state118 : STD_LOGIC_VECTOR (121 downto 0) := "00001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state119 : STD_LOGIC_VECTOR (121 downto 0) := "00010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state120 : STD_LOGIC_VECTOR (121 downto 0) := "00100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state121 : STD_LOGIC_VECTOR (121 downto 0) := "01000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state122 : STD_LOGIC_VECTOR (121 downto 0) := "10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv32_5A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011010";
    constant ap_const_lv32_5B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011011";
    constant ap_const_lv32_5D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011101";
    constant ap_const_lv32_5E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_64 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100100";
    constant ap_const_lv32_69 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_5C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011100";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_79 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111001";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_6A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101010";
    constant ap_const_lv32_59 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv6_32 : STD_LOGIC_VECTOR (5 downto 0) := "110010";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (121 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal x_data_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal x_data_ce0 : STD_LOGIC;
    signal x_data_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_data_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal y_data_ce0 : STD_LOGIC;
    signal y_data_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_467 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state96 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state96 : signal is "none";
    signal reg_474 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln13_fu_481_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_fu_492_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_reg_690 : STD_LOGIC_VECTOR (1 downto 0);
    signal centroids_x_load_reg_695 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal centroids_y_load_reg_700 : STD_LOGIC_VECTOR (31 downto 0);
    signal centroids_x_load_1_reg_705 : STD_LOGIC_VECTOR (31 downto 0);
    signal centroids_y_load_1_reg_710 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln24_fu_510_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln24_reg_718 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal zext_ln25_fu_516_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln25_reg_723 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln24_fu_504_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_401_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_738 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal grp_fu_405_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_743 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_409_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_748 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_413_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_reg_753 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_443_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_assign_reg_758 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal grp_fu_446_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_assign_1_reg_763 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_449_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_assign_2_reg_768 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_452_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_assign_3_reg_773 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_pow_generic_double_s_fu_285_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_reg_778 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state84 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state84 : signal is "none";
    signal grp_pow_generic_double_s_fu_314_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i1_reg_783 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_pow_generic_double_s_fu_343_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i2_reg_788 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_pow_generic_double_s_fu_372_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i3_reg_793 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_459_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_reg_798 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state89 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state89 : signal is "none";
    signal grp_fu_463_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_reg_803 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_437_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal min_distance_s_reg_808 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state91 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state91 : signal is "none";
    signal grp_fu_440_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal distance_reg_814 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln29_fu_556_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_reg_820 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state92 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state92 : signal is "none";
    signal icmp_ln29_1_fu_562_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_1_reg_825 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_2_fu_568_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_2_reg_830 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_3_fu_574_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_3_reg_835 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln38_fu_607_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln38_reg_843 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state94 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state94 : signal is "none";
    signal add_ln43_fu_619_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln43_reg_851 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state95 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state95 : signal is "none";
    signal icmp_ln43_fu_613_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_fu_632_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_reg_871 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln44_fu_642_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln44_reg_875 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln44_2_fu_654_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln44_2_reg_881 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln44_fu_662_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state101 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state101 : signal is "none";
    signal select_ln44_1_fu_669_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_431_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_reg_896 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state106 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state106 : signal is "none";
    signal data_cluster_id_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal data_cluster_id_ce0 : STD_LOGIC;
    signal data_cluster_id_we0 : STD_LOGIC;
    signal data_cluster_id_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal data_cluster_id_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pow_generic_double_s_fu_285_ap_start : STD_LOGIC;
    signal grp_pow_generic_double_s_fu_285_ap_done : STD_LOGIC;
    signal grp_pow_generic_double_s_fu_285_ap_idle : STD_LOGIC;
    signal grp_pow_generic_double_s_fu_285_ap_ready : STD_LOGIC;
    signal grp_pow_generic_double_s_fu_314_ap_start : STD_LOGIC;
    signal grp_pow_generic_double_s_fu_314_ap_done : STD_LOGIC;
    signal grp_pow_generic_double_s_fu_314_ap_idle : STD_LOGIC;
    signal grp_pow_generic_double_s_fu_314_ap_ready : STD_LOGIC;
    signal grp_pow_generic_double_s_fu_343_ap_start : STD_LOGIC;
    signal grp_pow_generic_double_s_fu_343_ap_done : STD_LOGIC;
    signal grp_pow_generic_double_s_fu_343_ap_idle : STD_LOGIC;
    signal grp_pow_generic_double_s_fu_343_ap_ready : STD_LOGIC;
    signal grp_pow_generic_double_s_fu_372_ap_start : STD_LOGIC;
    signal grp_pow_generic_double_s_fu_372_ap_done : STD_LOGIC;
    signal grp_pow_generic_double_s_fu_372_ap_idle : STD_LOGIC;
    signal grp_pow_generic_double_s_fu_372_ap_ready : STD_LOGIC;
    signal i_0_reg_203 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal i_1_0_reg_215 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state93 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state93 : signal is "none";
    signal i_2_0_reg_226 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state122 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state122 : signal is "none";
    signal mean_value_y_0_0_reg_238 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln38_fu_601_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mean_value_x_0_0_reg_250 : STD_LOGIC_VECTOR (31 downto 0);
    signal count_0_0_reg_262 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_1_0_reg_274 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_pow_generic_double_s_fu_285_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (121 downto 0);
    signal ap_NS_fsm_state18 : STD_LOGIC;
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal grp_pow_generic_double_s_fu_314_ap_start_reg : STD_LOGIC := '0';
    signal grp_pow_generic_double_s_fu_343_ap_start_reg : STD_LOGIC := '0';
    signal grp_pow_generic_double_s_fu_372_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln14_fu_498_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln44_fu_625_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln52_fu_676_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_419_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_425_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_401_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_401_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state97 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state97 : signal is "none";
    signal grp_fu_405_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_405_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state107 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state107 : signal is "none";
    signal grp_fu_431_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state90 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state90 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state85 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state85 : signal is "none";
    signal bitcast_ln29_fu_522_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln29_1_fu_539_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_525_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln29_fu_535_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_10_fu_542_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln29_1_fu_552_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_ln29_fu_580_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln29_1_fu_584_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln29_fu_588_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_455_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln44_1_fu_638_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln47_fu_648_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_401_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_405_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln13_fu_486_p2 : STD_LOGIC_VECTOR (0 downto 0);

    component pow_generic_double_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        base_r : IN STD_LOGIC_VECTOR (63 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component kmeans_faddfsub_3CeG IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kmeans_fsub_32ns_DeQ IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kmeans_fdiv_32ns_Ee0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kmeans_sitofp_32nFfa IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kmeans_fptrunc_64Gfk IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kmeans_fpext_32nsHfu IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component kmeans_fcmp_32ns_IfE IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component kmeans_dadd_64ns_JfO IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component kmeans_x_data IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kmeans_y_data IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kmeans_data_clustBew IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    x_data_U : component kmeans_x_data
    generic map (
        DataWidth => 32,
        AddressRange => 50,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => x_data_address0,
        ce0 => x_data_ce0,
        q0 => x_data_q0);

    y_data_U : component kmeans_y_data
    generic map (
        DataWidth => 32,
        AddressRange => 50,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => y_data_address0,
        ce0 => y_data_ce0,
        q0 => y_data_q0);

    data_cluster_id_U : component kmeans_data_clustBew
    generic map (
        DataWidth => 1,
        AddressRange => 50,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => data_cluster_id_address0,
        ce0 => data_cluster_id_ce0,
        we0 => data_cluster_id_we0,
        d0 => data_cluster_id_d0,
        q0 => data_cluster_id_q0);

    grp_pow_generic_double_s_fu_285 : component pow_generic_double_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_pow_generic_double_s_fu_285_ap_start,
        ap_done => grp_pow_generic_double_s_fu_285_ap_done,
        ap_idle => grp_pow_generic_double_s_fu_285_ap_idle,
        ap_ready => grp_pow_generic_double_s_fu_285_ap_ready,
        base_r => x_assign_reg_758,
        ap_return => grp_pow_generic_double_s_fu_285_ap_return);

    grp_pow_generic_double_s_fu_314 : component pow_generic_double_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_pow_generic_double_s_fu_314_ap_start,
        ap_done => grp_pow_generic_double_s_fu_314_ap_done,
        ap_idle => grp_pow_generic_double_s_fu_314_ap_idle,
        ap_ready => grp_pow_generic_double_s_fu_314_ap_ready,
        base_r => x_assign_1_reg_763,
        ap_return => grp_pow_generic_double_s_fu_314_ap_return);

    grp_pow_generic_double_s_fu_343 : component pow_generic_double_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_pow_generic_double_s_fu_343_ap_start,
        ap_done => grp_pow_generic_double_s_fu_343_ap_done,
        ap_idle => grp_pow_generic_double_s_fu_343_ap_idle,
        ap_ready => grp_pow_generic_double_s_fu_343_ap_ready,
        base_r => x_assign_2_reg_768,
        ap_return => grp_pow_generic_double_s_fu_343_ap_return);

    grp_pow_generic_double_s_fu_372 : component pow_generic_double_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_pow_generic_double_s_fu_372_ap_start,
        ap_done => grp_pow_generic_double_s_fu_372_ap_done,
        ap_idle => grp_pow_generic_double_s_fu_372_ap_idle,
        ap_ready => grp_pow_generic_double_s_fu_372_ap_ready,
        base_r => x_assign_3_reg_773,
        ap_return => grp_pow_generic_double_s_fu_372_ap_return);

    kmeans_faddfsub_3CeG_U42 : component kmeans_faddfsub_3CeG
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_401_p0,
        din1 => grp_fu_401_p1,
        opcode => grp_fu_401_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_401_p2);

    kmeans_faddfsub_3CeG_U43 : component kmeans_faddfsub_3CeG
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_405_p0,
        din1 => grp_fu_405_p1,
        opcode => grp_fu_405_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_405_p2);

    kmeans_fsub_32ns_DeQ_U44 : component kmeans_fsub_32ns_DeQ
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_467,
        din1 => centroids_x_load_1_reg_705,
        ce => ap_const_logic_1,
        dout => grp_fu_409_p2);

    kmeans_fsub_32ns_DeQ_U45 : component kmeans_fsub_32ns_DeQ
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_474,
        din1 => centroids_y_load_1_reg_710,
        ce => ap_const_logic_1,
        dout => grp_fu_413_p2);

    kmeans_fdiv_32ns_Ee0_U46 : component kmeans_fdiv_32ns_Ee0
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => mean_value_x_0_0_reg_250,
        din1 => tmp_5_reg_896,
        ce => ap_const_logic_1,
        dout => grp_fu_419_p2);

    kmeans_fdiv_32ns_Ee0_U47 : component kmeans_fdiv_32ns_Ee0
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => mean_value_y_0_0_reg_238,
        din1 => tmp_5_reg_896,
        ce => ap_const_logic_1,
        dout => grp_fu_425_p2);

    kmeans_sitofp_32nFfa_U48 : component kmeans_sitofp_32nFfa
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_431_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_431_p1);

    kmeans_fptrunc_64Gfk_U49 : component kmeans_fptrunc_64Gfk
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_4_reg_798,
        ce => ap_const_logic_1,
        dout => grp_fu_437_p1);

    kmeans_fptrunc_64Gfk_U50 : component kmeans_fptrunc_64Gfk
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_8_reg_803,
        ce => ap_const_logic_1,
        dout => grp_fu_440_p1);

    kmeans_fpext_32nsHfu_U51 : component kmeans_fpext_32nsHfu
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_s_reg_738,
        ce => ap_const_logic_1,
        dout => grp_fu_443_p1);

    kmeans_fpext_32nsHfu_U52 : component kmeans_fpext_32nsHfu
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_2_reg_743,
        ce => ap_const_logic_1,
        dout => grp_fu_446_p1);

    kmeans_fpext_32nsHfu_U53 : component kmeans_fpext_32nsHfu
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_1_reg_748,
        ce => ap_const_logic_1,
        dout => grp_fu_449_p1);

    kmeans_fpext_32nsHfu_U54 : component kmeans_fpext_32nsHfu
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_3_reg_753,
        ce => ap_const_logic_1,
        dout => grp_fu_452_p1);

    kmeans_fcmp_32ns_IfE_U55 : component kmeans_fcmp_32ns_IfE
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => distance_reg_814,
        din1 => min_distance_s_reg_808,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_4,
        dout => grp_fu_455_p2);

    kmeans_dadd_64ns_JfO_U56 : component kmeans_dadd_64ns_JfO
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_i_reg_778,
        din1 => tmp_i1_reg_783,
        ce => ap_const_logic_1,
        dout => grp_fu_459_p2);

    kmeans_dadd_64ns_JfO_U57 : component kmeans_dadd_64ns_JfO
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_i2_reg_788,
        din1 => tmp_i3_reg_793,
        ce => ap_const_logic_1,
        dout => grp_fu_463_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_pow_generic_double_s_fu_285_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_pow_generic_double_s_fu_285_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_NS_fsm_state18) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                    grp_pow_generic_double_s_fu_285_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_pow_generic_double_s_fu_285_ap_ready = ap_const_logic_1)) then 
                    grp_pow_generic_double_s_fu_285_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_pow_generic_double_s_fu_314_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_pow_generic_double_s_fu_314_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_NS_fsm_state18) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                    grp_pow_generic_double_s_fu_314_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_pow_generic_double_s_fu_314_ap_ready = ap_const_logic_1)) then 
                    grp_pow_generic_double_s_fu_314_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_pow_generic_double_s_fu_343_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_pow_generic_double_s_fu_343_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_NS_fsm_state18) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                    grp_pow_generic_double_s_fu_343_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_pow_generic_double_s_fu_343_ap_ready = ap_const_logic_1)) then 
                    grp_pow_generic_double_s_fu_343_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_pow_generic_double_s_fu_372_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_pow_generic_double_s_fu_372_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_NS_fsm_state18) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                    grp_pow_generic_double_s_fu_372_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_pow_generic_double_s_fu_372_ap_ready = ap_const_logic_1)) then 
                    grp_pow_generic_double_s_fu_372_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    count_0_0_reg_262_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln38_fu_601_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state94))) then 
                count_0_0_reg_262 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
                count_0_0_reg_262 <= select_ln44_2_reg_881;
            end if; 
        end if;
    end process;

    i_0_reg_203_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                i_0_reg_203 <= i_reg_690;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_203 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    i_1_0_reg_215_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                i_1_0_reg_215 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
                i_1_0_reg_215 <= add_ln24_reg_718;
            end if; 
        end if;
    end process;

    i_2_0_reg_226_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_fu_504_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                i_2_0_reg_226 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state122)) then 
                i_2_0_reg_226 <= add_ln38_reg_843;
            end if; 
        end if;
    end process;

    j_1_0_reg_274_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln38_fu_601_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state94))) then 
                j_1_0_reg_274 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
                j_1_0_reg_274 <= add_ln43_reg_851;
            end if; 
        end if;
    end process;

    mean_value_x_0_0_reg_250_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln38_fu_601_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state94))) then 
                mean_value_x_0_0_reg_250 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
                mean_value_x_0_0_reg_250 <= select_ln44_1_fu_669_p3;
            end if; 
        end if;
    end process;

    mean_value_y_0_0_reg_238_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln38_fu_601_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state94))) then 
                mean_value_y_0_0_reg_238 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
                mean_value_y_0_0_reg_238 <= select_ln44_fu_662_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                add_ln24_reg_718 <= add_ln24_fu_510_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state94)) then
                add_ln38_reg_843 <= add_ln38_fu_607_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state95)) then
                add_ln43_reg_851 <= add_ln43_fu_619_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                centroids_x_load_1_reg_705 <= centroids_x_q1;
                centroids_x_load_reg_695 <= centroids_x_q0;
                centroids_y_load_1_reg_710 <= centroids_y_q1;
                centroids_y_load_reg_700 <= centroids_y_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state91)) then
                distance_reg_814 <= grp_fu_440_p1;
                min_distance_s_reg_808 <= grp_fu_437_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_690 <= i_fu_492_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state92)) then
                icmp_ln29_1_reg_825 <= icmp_ln29_1_fu_562_p2;
                icmp_ln29_2_reg_830 <= icmp_ln29_2_fu_568_p2;
                icmp_ln29_3_reg_835 <= icmp_ln29_3_fu_574_p2;
                icmp_ln29_reg_820 <= icmp_ln29_fu_556_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state96)) then
                icmp_ln44_reg_875 <= icmp_ln44_fu_642_p2;
                select_ln44_2_reg_881 <= select_ln44_2_fu_654_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln43_fu_613_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state95))) then
                icmp_ln51_reg_871 <= icmp_ln51_fu_632_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state10))) then
                reg_467 <= x_data_q0;
                reg_474 <= y_data_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                tmp_1_reg_748 <= grp_fu_409_p2;
                tmp_2_reg_743 <= grp_fu_405_p2;
                tmp_3_reg_753 <= grp_fu_413_p2;
                tmp_s_reg_738 <= grp_fu_401_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state89)) then
                tmp_4_reg_798 <= grp_fu_459_p2;
                tmp_8_reg_803 <= grp_fu_463_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state106)) then
                tmp_5_reg_896 <= grp_fu_431_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state84)) then
                tmp_i1_reg_783 <= grp_pow_generic_double_s_fu_314_ap_return;
                tmp_i2_reg_788 <= grp_pow_generic_double_s_fu_343_ap_return;
                tmp_i3_reg_793 <= grp_pow_generic_double_s_fu_372_ap_return;
                tmp_i_reg_778 <= grp_pow_generic_double_s_fu_285_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                x_assign_1_reg_763 <= grp_fu_446_p1;
                x_assign_2_reg_768 <= grp_fu_449_p1;
                x_assign_3_reg_773 <= grp_fu_452_p1;
                x_assign_reg_758 <= grp_fu_443_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_fu_504_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    zext_ln25_reg_723(5 downto 0) <= zext_ln25_fu_516_p1(5 downto 0);
            end if;
        end if;
    end process;
    zext_ln25_reg_723(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state9, icmp_ln24_fu_504_p2, ap_CS_fsm_state94, ap_CS_fsm_state95, icmp_ln43_fu_613_p2, icmp_ln51_fu_632_p2, icmp_ln38_fu_601_p2, icmp_ln13_fu_486_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln13_fu_486_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((icmp_ln24_fu_504_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state94;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state93;
            when ap_ST_fsm_state93 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state94 => 
                if (((icmp_ln38_fu_601_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state94))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state95;
                end if;
            when ap_ST_fsm_state95 => 
                if (((icmp_ln51_fu_632_p2 = ap_const_lv1_1) and (icmp_ln43_fu_613_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state95))) then
                    ap_NS_fsm <= ap_ST_fsm_state122;
                elsif (((icmp_ln43_fu_613_p2 = ap_const_lv1_1) and (icmp_ln51_fu_632_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state95))) then
                    ap_NS_fsm <= ap_ST_fsm_state102;
                else
                    ap_NS_fsm <= ap_ST_fsm_state96;
                end if;
            when ap_ST_fsm_state96 => 
                ap_NS_fsm <= ap_ST_fsm_state97;
            when ap_ST_fsm_state97 => 
                ap_NS_fsm <= ap_ST_fsm_state98;
            when ap_ST_fsm_state98 => 
                ap_NS_fsm <= ap_ST_fsm_state99;
            when ap_ST_fsm_state99 => 
                ap_NS_fsm <= ap_ST_fsm_state100;
            when ap_ST_fsm_state100 => 
                ap_NS_fsm <= ap_ST_fsm_state101;
            when ap_ST_fsm_state101 => 
                ap_NS_fsm <= ap_ST_fsm_state95;
            when ap_ST_fsm_state102 => 
                ap_NS_fsm <= ap_ST_fsm_state103;
            when ap_ST_fsm_state103 => 
                ap_NS_fsm <= ap_ST_fsm_state104;
            when ap_ST_fsm_state104 => 
                ap_NS_fsm <= ap_ST_fsm_state105;
            when ap_ST_fsm_state105 => 
                ap_NS_fsm <= ap_ST_fsm_state106;
            when ap_ST_fsm_state106 => 
                ap_NS_fsm <= ap_ST_fsm_state107;
            when ap_ST_fsm_state107 => 
                ap_NS_fsm <= ap_ST_fsm_state108;
            when ap_ST_fsm_state108 => 
                ap_NS_fsm <= ap_ST_fsm_state109;
            when ap_ST_fsm_state109 => 
                ap_NS_fsm <= ap_ST_fsm_state110;
            when ap_ST_fsm_state110 => 
                ap_NS_fsm <= ap_ST_fsm_state111;
            when ap_ST_fsm_state111 => 
                ap_NS_fsm <= ap_ST_fsm_state112;
            when ap_ST_fsm_state112 => 
                ap_NS_fsm <= ap_ST_fsm_state113;
            when ap_ST_fsm_state113 => 
                ap_NS_fsm <= ap_ST_fsm_state114;
            when ap_ST_fsm_state114 => 
                ap_NS_fsm <= ap_ST_fsm_state115;
            when ap_ST_fsm_state115 => 
                ap_NS_fsm <= ap_ST_fsm_state116;
            when ap_ST_fsm_state116 => 
                ap_NS_fsm <= ap_ST_fsm_state117;
            when ap_ST_fsm_state117 => 
                ap_NS_fsm <= ap_ST_fsm_state118;
            when ap_ST_fsm_state118 => 
                ap_NS_fsm <= ap_ST_fsm_state119;
            when ap_ST_fsm_state119 => 
                ap_NS_fsm <= ap_ST_fsm_state120;
            when ap_ST_fsm_state120 => 
                ap_NS_fsm <= ap_ST_fsm_state121;
            when ap_ST_fsm_state121 => 
                ap_NS_fsm <= ap_ST_fsm_state122;
            when ap_ST_fsm_state122 => 
                ap_NS_fsm <= ap_ST_fsm_state94;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln24_fu_510_p2 <= std_logic_vector(unsigned(i_1_0_reg_215) + unsigned(ap_const_lv6_1));
    add_ln38_fu_607_p2 <= std_logic_vector(unsigned(i_2_0_reg_226) + unsigned(ap_const_lv2_1));
    add_ln43_fu_619_p2 <= std_logic_vector(unsigned(j_1_0_reg_274) + unsigned(ap_const_lv6_1));
    add_ln47_fu_648_p2 <= std_logic_vector(unsigned(count_0_0_reg_262) + unsigned(ap_const_lv32_1));
    and_ln29_fu_588_p2 <= (or_ln29_fu_580_p2 and or_ln29_1_fu_584_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state101 <= ap_CS_fsm(100);
    ap_CS_fsm_state106 <= ap_CS_fsm(105);
    ap_CS_fsm_state107 <= ap_CS_fsm(106);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state122 <= ap_CS_fsm(121);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state84 <= ap_CS_fsm(83);
    ap_CS_fsm_state85 <= ap_CS_fsm(84);
    ap_CS_fsm_state89 <= ap_CS_fsm(88);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_CS_fsm_state90 <= ap_CS_fsm(89);
    ap_CS_fsm_state91 <= ap_CS_fsm(90);
    ap_CS_fsm_state92 <= ap_CS_fsm(91);
    ap_CS_fsm_state93 <= ap_CS_fsm(92);
    ap_CS_fsm_state94 <= ap_CS_fsm(93);
    ap_CS_fsm_state95 <= ap_CS_fsm(94);
    ap_CS_fsm_state96 <= ap_CS_fsm(95);
    ap_CS_fsm_state97 <= ap_CS_fsm(96);
    ap_NS_fsm_state18 <= ap_NS_fsm(17);

    ap_done_assign_proc : process(ap_CS_fsm_state94, icmp_ln38_fu_601_p2)
    begin
        if (((icmp_ln38_fu_601_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state94))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state94, icmp_ln38_fu_601_p2)
    begin
        if (((icmp_ln38_fu_601_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state94))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln29_1_fu_539_p1 <= min_distance_s_reg_808;
    bitcast_ln29_fu_522_p1 <= distance_reg_814;

    centroids_x_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state7, zext_ln14_fu_498_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            centroids_x_address0 <= zext_ln14_fu_498_p1(1 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            centroids_x_address0 <= ap_const_lv1_0;
        else 
            centroids_x_address0 <= "X";
        end if; 
    end process;


    centroids_x_address1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state122, zext_ln52_fu_676_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state122)) then 
            centroids_x_address1 <= zext_ln52_fu_676_p1(1 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            centroids_x_address1 <= ap_const_lv1_1;
        else 
            centroids_x_address1 <= "X";
        end if; 
    end process;


    centroids_x_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            centroids_x_ce0 <= ap_const_logic_1;
        else 
            centroids_x_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    centroids_x_ce1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state122)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state122) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            centroids_x_ce1 <= ap_const_logic_1;
        else 
            centroids_x_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    centroids_x_d0 <= grp_fu_431_p1;
    centroids_x_d1 <= grp_fu_419_p2;

    centroids_x_we0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            centroids_x_we0 <= ap_const_logic_1;
        else 
            centroids_x_we0 <= ap_const_logic_0;
        end if; 
    end process;


    centroids_x_we1_assign_proc : process(icmp_ln51_reg_871, ap_CS_fsm_state122)
    begin
        if (((icmp_ln51_reg_871 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state122))) then 
            centroids_x_we1 <= ap_const_logic_1;
        else 
            centroids_x_we1 <= ap_const_logic_0;
        end if; 
    end process;


    centroids_y_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state7, zext_ln14_fu_498_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            centroids_y_address0 <= zext_ln14_fu_498_p1(1 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            centroids_y_address0 <= ap_const_lv1_0;
        else 
            centroids_y_address0 <= "X";
        end if; 
    end process;


    centroids_y_address1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state122, zext_ln52_fu_676_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state122)) then 
            centroids_y_address1 <= zext_ln52_fu_676_p1(1 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            centroids_y_address1 <= ap_const_lv1_1;
        else 
            centroids_y_address1 <= "X";
        end if; 
    end process;


    centroids_y_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            centroids_y_ce0 <= ap_const_logic_1;
        else 
            centroids_y_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    centroids_y_ce1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state122)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state122) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            centroids_y_ce1 <= ap_const_logic_1;
        else 
            centroids_y_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    centroids_y_d0 <= grp_fu_431_p1;
    centroids_y_d1 <= grp_fu_425_p2;

    centroids_y_we0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            centroids_y_we0 <= ap_const_logic_1;
        else 
            centroids_y_we0 <= ap_const_logic_0;
        end if; 
    end process;


    centroids_y_we1_assign_proc : process(icmp_ln51_reg_871, ap_CS_fsm_state122)
    begin
        if (((icmp_ln51_reg_871 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state122))) then 
            centroids_y_we1 <= ap_const_logic_1;
        else 
            centroids_y_we1 <= ap_const_logic_0;
        end if; 
    end process;


    data_cluster_id_address0_assign_proc : process(zext_ln25_reg_723, ap_CS_fsm_state95, ap_CS_fsm_state93, zext_ln44_fu_625_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state95)) then 
            data_cluster_id_address0 <= zext_ln44_fu_625_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            data_cluster_id_address0 <= zext_ln25_reg_723(6 - 1 downto 0);
        else 
            data_cluster_id_address0 <= "XXXXXX";
        end if; 
    end process;


    data_cluster_id_ce0_assign_proc : process(ap_CS_fsm_state95, ap_CS_fsm_state93)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state95))) then 
            data_cluster_id_ce0 <= ap_const_logic_1;
        else 
            data_cluster_id_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    data_cluster_id_d0 <= (grp_fu_455_p2 and and_ln29_fu_588_p2);

    data_cluster_id_we0_assign_proc : process(ap_CS_fsm_state93)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            data_cluster_id_we0 <= ap_const_logic_1;
        else 
            data_cluster_id_we0 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_401_opcode_assign_proc : process(icmp_ln44_reg_875, ap_CS_fsm_state11, ap_CS_fsm_state97)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_401_opcode <= ap_const_lv2_1;
        elsif (((icmp_ln44_reg_875 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state97))) then 
            grp_fu_401_opcode <= ap_const_lv2_0;
        else 
            grp_fu_401_opcode <= "XX";
        end if; 
    end process;


    grp_fu_401_p0_assign_proc : process(reg_467, mean_value_x_0_0_reg_250, ap_CS_fsm_state11, ap_CS_fsm_state97)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state97)) then 
            grp_fu_401_p0 <= mean_value_x_0_0_reg_250;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_401_p0 <= reg_467;
        else 
            grp_fu_401_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_401_p1_assign_proc : process(reg_467, centroids_x_load_reg_695, ap_CS_fsm_state11, ap_CS_fsm_state97)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state97)) then 
            grp_fu_401_p1 <= reg_467;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_401_p1 <= centroids_x_load_reg_695;
        else 
            grp_fu_401_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_405_opcode_assign_proc : process(icmp_ln44_reg_875, ap_CS_fsm_state11, ap_CS_fsm_state97)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_405_opcode <= ap_const_lv2_1;
        elsif (((icmp_ln44_reg_875 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state97))) then 
            grp_fu_405_opcode <= ap_const_lv2_0;
        else 
            grp_fu_405_opcode <= "XX";
        end if; 
    end process;


    grp_fu_405_p0_assign_proc : process(reg_474, mean_value_y_0_0_reg_238, ap_CS_fsm_state11, ap_CS_fsm_state97)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state97)) then 
            grp_fu_405_p0 <= mean_value_y_0_0_reg_238;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_405_p0 <= reg_474;
        else 
            grp_fu_405_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_405_p1_assign_proc : process(reg_474, centroids_y_load_reg_700, ap_CS_fsm_state11, ap_CS_fsm_state97)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state97)) then 
            grp_fu_405_p1 <= reg_474;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_405_p1 <= centroids_y_load_reg_700;
        else 
            grp_fu_405_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_431_p0_assign_proc : process(zext_ln13_fu_481_p1, ap_CS_fsm_state2, ap_CS_fsm_state95, count_0_0_reg_262)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state95)) then 
            grp_fu_431_p0 <= count_0_0_reg_262;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_431_p0 <= zext_ln13_fu_481_p1;
        else 
            grp_fu_431_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_pow_generic_double_s_fu_285_ap_start <= grp_pow_generic_double_s_fu_285_ap_start_reg;
    grp_pow_generic_double_s_fu_314_ap_start <= grp_pow_generic_double_s_fu_314_ap_start_reg;
    grp_pow_generic_double_s_fu_343_ap_start <= grp_pow_generic_double_s_fu_343_ap_start_reg;
    grp_pow_generic_double_s_fu_372_ap_start <= grp_pow_generic_double_s_fu_372_ap_start_reg;
    i_fu_492_p2 <= std_logic_vector(unsigned(i_0_reg_203) + unsigned(ap_const_lv2_1));
    icmp_ln13_fu_486_p2 <= "1" when (i_0_reg_203 = ap_const_lv2_2) else "0";
    icmp_ln24_fu_504_p2 <= "1" when (i_1_0_reg_215 = ap_const_lv6_32) else "0";
    icmp_ln29_1_fu_562_p2 <= "1" when (trunc_ln29_fu_535_p1 = ap_const_lv23_0) else "0";
    icmp_ln29_2_fu_568_p2 <= "0" when (tmp_10_fu_542_p4 = ap_const_lv8_FF) else "1";
    icmp_ln29_3_fu_574_p2 <= "1" when (trunc_ln29_1_fu_552_p1 = ap_const_lv23_0) else "0";
    icmp_ln29_fu_556_p2 <= "0" when (tmp_9_fu_525_p4 = ap_const_lv8_FF) else "1";
    icmp_ln38_fu_601_p2 <= "1" when (i_2_0_reg_226 = ap_const_lv2_2) else "0";
    icmp_ln43_fu_613_p2 <= "1" when (j_1_0_reg_274 = ap_const_lv6_32) else "0";
    icmp_ln44_fu_642_p2 <= "1" when (zext_ln44_1_fu_638_p1 = i_2_0_reg_226) else "0";
    icmp_ln51_fu_632_p2 <= "1" when (count_0_0_reg_262 = ap_const_lv32_0) else "0";
    or_ln29_1_fu_584_p2 <= (icmp_ln29_3_reg_835 or icmp_ln29_2_reg_830);
    or_ln29_fu_580_p2 <= (icmp_ln29_reg_820 or icmp_ln29_1_reg_825);
    select_ln44_1_fu_669_p3 <= 
        grp_fu_401_p2 when (icmp_ln44_reg_875(0) = '1') else 
        mean_value_x_0_0_reg_250;
    select_ln44_2_fu_654_p3 <= 
        add_ln47_fu_648_p2 when (icmp_ln44_fu_642_p2(0) = '1') else 
        count_0_0_reg_262;
    select_ln44_fu_662_p3 <= 
        grp_fu_405_p2 when (icmp_ln44_reg_875(0) = '1') else 
        mean_value_y_0_0_reg_238;
    tmp_10_fu_542_p4 <= bitcast_ln29_1_fu_539_p1(30 downto 23);
    tmp_9_fu_525_p4 <= bitcast_ln29_fu_522_p1(30 downto 23);
    trunc_ln29_1_fu_552_p1 <= bitcast_ln29_1_fu_539_p1(23 - 1 downto 0);
    trunc_ln29_fu_535_p1 <= bitcast_ln29_fu_522_p1(23 - 1 downto 0);

    x_data_address0_assign_proc : process(ap_CS_fsm_state9, zext_ln25_fu_516_p1, ap_CS_fsm_state95, zext_ln44_fu_625_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state95)) then 
            x_data_address0 <= zext_ln44_fu_625_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            x_data_address0 <= zext_ln25_fu_516_p1(6 - 1 downto 0);
        else 
            x_data_address0 <= "XXXXXX";
        end if; 
    end process;


    x_data_ce0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state95)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state95) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            x_data_ce0 <= ap_const_logic_1;
        else 
            x_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    y_data_address0_assign_proc : process(ap_CS_fsm_state9, zext_ln25_fu_516_p1, ap_CS_fsm_state95, zext_ln44_fu_625_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state95)) then 
            y_data_address0 <= zext_ln44_fu_625_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            y_data_address0 <= zext_ln25_fu_516_p1(6 - 1 downto 0);
        else 
            y_data_address0 <= "XXXXXX";
        end if; 
    end process;


    y_data_ce0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state95)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state95) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            y_data_ce0 <= ap_const_logic_1;
        else 
            y_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln13_fu_481_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_203),32));
    zext_ln14_fu_498_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_203),64));
    zext_ln25_fu_516_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_0_reg_215),64));
    zext_ln44_1_fu_638_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data_cluster_id_q0),2));
    zext_ln44_fu_625_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_1_0_reg_274),64));
    zext_ln52_fu_676_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_0_reg_226),64));
end behav;
