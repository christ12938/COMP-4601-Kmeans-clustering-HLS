// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="kmeans,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.735000,HLS_SYN_LAT=1542,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=8,HLS_SYN_FF=3653,HLS_SYN_LUT=6343,HLS_VERSION=2020_1}" *)

module kmeans (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        centroids_x_address0,
        centroids_x_ce0,
        centroids_x_we0,
        centroids_x_d0,
        centroids_x_q0,
        centroids_x_address1,
        centroids_x_ce1,
        centroids_x_we1,
        centroids_x_d1,
        centroids_x_q1,
        centroids_y_address0,
        centroids_y_ce0,
        centroids_y_we0,
        centroids_y_d0,
        centroids_y_q0,
        centroids_y_address1,
        centroids_y_ce1,
        centroids_y_we1,
        centroids_y_d1,
        centroids_y_q1
);

parameter    ap_ST_fsm_state1 = 53'd1;
parameter    ap_ST_fsm_state2 = 53'd2;
parameter    ap_ST_fsm_state3 = 53'd4;
parameter    ap_ST_fsm_state4 = 53'd8;
parameter    ap_ST_fsm_state5 = 53'd16;
parameter    ap_ST_fsm_state6 = 53'd32;
parameter    ap_ST_fsm_state7 = 53'd64;
parameter    ap_ST_fsm_state8 = 53'd128;
parameter    ap_ST_fsm_state9 = 53'd256;
parameter    ap_ST_fsm_state10 = 53'd512;
parameter    ap_ST_fsm_state11 = 53'd1024;
parameter    ap_ST_fsm_state12 = 53'd2048;
parameter    ap_ST_fsm_state13 = 53'd4096;
parameter    ap_ST_fsm_state14 = 53'd8192;
parameter    ap_ST_fsm_state15 = 53'd16384;
parameter    ap_ST_fsm_state16 = 53'd32768;
parameter    ap_ST_fsm_state17 = 53'd65536;
parameter    ap_ST_fsm_state18 = 53'd131072;
parameter    ap_ST_fsm_state19 = 53'd262144;
parameter    ap_ST_fsm_state20 = 53'd524288;
parameter    ap_ST_fsm_state21 = 53'd1048576;
parameter    ap_ST_fsm_state22 = 53'd2097152;
parameter    ap_ST_fsm_state23 = 53'd4194304;
parameter    ap_ST_fsm_state24 = 53'd8388608;
parameter    ap_ST_fsm_state25 = 53'd16777216;
parameter    ap_ST_fsm_state26 = 53'd33554432;
parameter    ap_ST_fsm_state27 = 53'd67108864;
parameter    ap_ST_fsm_state28 = 53'd134217728;
parameter    ap_ST_fsm_state29 = 53'd268435456;
parameter    ap_ST_fsm_state30 = 53'd536870912;
parameter    ap_ST_fsm_state31 = 53'd1073741824;
parameter    ap_ST_fsm_state32 = 53'd2147483648;
parameter    ap_ST_fsm_state33 = 53'd4294967296;
parameter    ap_ST_fsm_state34 = 53'd8589934592;
parameter    ap_ST_fsm_state35 = 53'd17179869184;
parameter    ap_ST_fsm_state36 = 53'd34359738368;
parameter    ap_ST_fsm_state37 = 53'd68719476736;
parameter    ap_ST_fsm_state38 = 53'd137438953472;
parameter    ap_ST_fsm_state39 = 53'd274877906944;
parameter    ap_ST_fsm_state40 = 53'd549755813888;
parameter    ap_ST_fsm_state41 = 53'd1099511627776;
parameter    ap_ST_fsm_state42 = 53'd2199023255552;
parameter    ap_ST_fsm_state43 = 53'd4398046511104;
parameter    ap_ST_fsm_state44 = 53'd8796093022208;
parameter    ap_ST_fsm_state45 = 53'd17592186044416;
parameter    ap_ST_fsm_state46 = 53'd35184372088832;
parameter    ap_ST_fsm_state47 = 53'd70368744177664;
parameter    ap_ST_fsm_state48 = 53'd140737488355328;
parameter    ap_ST_fsm_state49 = 53'd281474976710656;
parameter    ap_ST_fsm_state50 = 53'd562949953421312;
parameter    ap_ST_fsm_state51 = 53'd1125899906842624;
parameter    ap_ST_fsm_state52 = 53'd2251799813685248;
parameter    ap_ST_fsm_state53 = 53'd4503599627370496;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [0:0] centroids_x_address0;
output   centroids_x_ce0;
output   centroids_x_we0;
output  [31:0] centroids_x_d0;
input  [31:0] centroids_x_q0;
output  [0:0] centroids_x_address1;
output   centroids_x_ce1;
output   centroids_x_we1;
output  [31:0] centroids_x_d1;
input  [31:0] centroids_x_q1;
output  [0:0] centroids_y_address0;
output   centroids_y_ce0;
output   centroids_y_we0;
output  [31:0] centroids_y_d0;
input  [31:0] centroids_y_q0;
output  [0:0] centroids_y_address1;
output   centroids_y_ce1;
output   centroids_y_we1;
output  [31:0] centroids_y_d1;
input  [31:0] centroids_y_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[0:0] centroids_x_address0;
reg centroids_x_ce0;
reg centroids_x_we0;
reg[0:0] centroids_x_address1;
reg centroids_x_ce1;
reg centroids_x_we1;
reg[0:0] centroids_y_address0;
reg centroids_y_ce0;
reg centroids_y_we0;
reg[0:0] centroids_y_address1;
reg centroids_y_ce1;
reg centroids_y_we1;

(* fsm_encoding = "none" *) reg   [52:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [5:0] x_data_address0;
reg    x_data_ce0;
wire   [31:0] x_data_q0;
reg   [5:0] y_data_address0;
reg    y_data_ce0;
wire   [31:0] y_data_q0;
reg   [31:0] reg_317;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state27;
reg   [31:0] reg_324;
wire   [31:0] grp_fu_261_p2;
reg   [31:0] reg_331;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state22;
wire   [31:0] grp_fu_265_p2;
reg   [31:0] reg_337;
wire   [31:0] zext_ln16_fu_343_p1;
wire    ap_CS_fsm_state2;
wire   [1:0] i_fu_354_p2;
reg   [1:0] i_reg_790;
reg   [31:0] centroids_x_load_reg_795;
wire    ap_CS_fsm_state8;
reg   [31:0] centroids_y_load_reg_800;
reg   [31:0] centroids_x_load_1_reg_805;
reg   [31:0] centroids_y_load_1_reg_810;
wire   [5:0] add_ln27_fu_372_p2;
reg   [5:0] add_ln27_reg_818;
wire    ap_CS_fsm_state9;
wire   [63:0] zext_ln28_fu_378_p1;
reg   [63:0] zext_ln28_reg_823;
wire   [0:0] icmp_ln27_fu_366_p2;
wire   [31:0] grp_fu_269_p2;
reg   [31:0] number_assign_2_reg_838;
wire   [31:0] grp_fu_273_p2;
reg   [31:0] number_assign_3_reg_845;
wire   [31:0] select_ln4_fu_436_p3;
reg   [31:0] select_ln4_reg_852;
wire    ap_CS_fsm_state17;
wire   [31:0] select_ln4_1_fu_496_p3;
reg   [31:0] select_ln4_1_reg_857;
wire   [31:0] select_ln4_2_fu_555_p3;
reg   [31:0] select_ln4_2_reg_862;
wire   [31:0] select_ln4_3_fu_613_p3;
reg   [31:0] select_ln4_3_reg_867;
wire   [0:0] icmp_ln32_fu_656_p2;
reg   [0:0] icmp_ln32_reg_872;
wire    ap_CS_fsm_state23;
wire   [0:0] icmp_ln32_1_fu_662_p2;
reg   [0:0] icmp_ln32_1_reg_877;
wire   [0:0] icmp_ln32_2_fu_668_p2;
reg   [0:0] icmp_ln32_2_reg_882;
wire   [0:0] icmp_ln32_3_fu_674_p2;
reg   [0:0] icmp_ln32_3_reg_887;
wire   [1:0] add_ln41_fu_707_p2;
reg   [1:0] add_ln41_reg_895;
wire    ap_CS_fsm_state25;
wire   [5:0] add_ln46_fu_719_p2;
reg   [5:0] add_ln46_reg_903;
wire    ap_CS_fsm_state26;
wire   [0:0] icmp_ln46_fu_713_p2;
wire   [0:0] icmp_ln54_fu_732_p2;
reg   [0:0] icmp_ln54_reg_923;
wire   [0:0] icmp_ln47_fu_742_p2;
reg   [0:0] icmp_ln47_reg_927;
wire   [31:0] select_ln47_2_fu_754_p3;
reg   [31:0] select_ln47_2_reg_933;
wire   [31:0] select_ln47_fu_762_p3;
wire    ap_CS_fsm_state32;
wire   [31:0] select_ln47_1_fu_769_p3;
wire   [31:0] grp_fu_291_p1;
reg   [31:0] tmp_5_reg_948;
wire    ap_CS_fsm_state37;
reg   [5:0] data_cluster_id_address0;
reg    data_cluster_id_ce0;
reg    data_cluster_id_we0;
wire   [0:0] data_cluster_id_d0;
wire   [0:0] data_cluster_id_q0;
reg   [1:0] i_0_reg_179;
wire    ap_CS_fsm_state7;
reg   [5:0] i_1_0_reg_191;
wire    ap_CS_fsm_state24;
reg   [1:0] i_2_0_reg_202;
wire    ap_CS_fsm_state53;
reg   [31:0] mean_value_y_0_0_reg_214;
wire   [0:0] icmp_ln41_fu_701_p2;
reg   [31:0] mean_value_x_0_0_reg_226;
reg   [31:0] count_0_0_reg_238;
reg   [5:0] j_1_0_reg_250;
wire   [63:0] zext_ln17_fu_360_p1;
wire   [63:0] zext_ln47_fu_725_p1;
wire   [63:0] zext_ln55_fu_776_p1;
wire   [31:0] grp_fu_279_p2;
wire   [31:0] grp_fu_285_p2;
reg   [31:0] grp_fu_261_p0;
reg   [31:0] grp_fu_261_p1;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state28;
reg   [31:0] grp_fu_265_p0;
reg   [31:0] grp_fu_265_p1;
wire    ap_CS_fsm_state38;
reg   [31:0] grp_fu_291_p0;
reg   [31:0] grp_fu_297_p0;
reg   [31:0] grp_fu_297_p1;
wire    ap_CS_fsm_state16;
wire   [31:0] bitcast_ln4_fu_384_p1;
wire   [7:0] tmp_3_fu_388_p4;
wire   [22:0] trunc_ln4_fu_398_p1;
wire   [0:0] icmp_ln4_1_fu_408_p2;
wire   [0:0] icmp_ln4_fu_402_p2;
wire   [0:0] or_ln4_fu_414_p2;
wire   [0:0] grp_fu_297_p2;
wire   [31:0] xor_ln4_fu_426_p2;
wire   [0:0] and_ln4_fu_420_p2;
wire   [31:0] bitcast_ln4_1_fu_432_p1;
wire   [31:0] bitcast_ln4_2_fu_444_p1;
wire   [7:0] tmp_6_fu_448_p4;
wire   [22:0] trunc_ln4_1_fu_458_p1;
wire   [0:0] icmp_ln4_3_fu_468_p2;
wire   [0:0] icmp_ln4_2_fu_462_p2;
wire   [0:0] or_ln4_1_fu_474_p2;
wire   [0:0] grp_fu_302_p2;
wire   [31:0] xor_ln4_1_fu_486_p2;
wire   [0:0] and_ln4_1_fu_480_p2;
wire   [31:0] bitcast_ln4_3_fu_492_p1;
wire   [31:0] bitcast_ln4_4_fu_504_p1;
wire   [7:0] tmp_8_fu_507_p4;
wire   [22:0] trunc_ln4_2_fu_517_p1;
wire   [0:0] icmp_ln4_5_fu_527_p2;
wire   [0:0] icmp_ln4_4_fu_521_p2;
wire   [0:0] or_ln4_2_fu_533_p2;
wire   [0:0] grp_fu_307_p2;
wire   [31:0] xor_ln4_2_fu_545_p2;
wire   [0:0] and_ln4_2_fu_539_p2;
wire   [31:0] bitcast_ln4_5_fu_551_p1;
wire   [31:0] bitcast_ln4_6_fu_562_p1;
wire   [7:0] tmp_s_fu_565_p4;
wire   [22:0] trunc_ln4_3_fu_575_p1;
wire   [0:0] icmp_ln4_7_fu_585_p2;
wire   [0:0] icmp_ln4_6_fu_579_p2;
wire   [0:0] or_ln4_3_fu_591_p2;
wire   [0:0] grp_fu_312_p2;
wire   [31:0] xor_ln4_3_fu_603_p2;
wire   [0:0] and_ln4_3_fu_597_p2;
wire   [31:0] bitcast_ln4_7_fu_609_p1;
wire   [31:0] bitcast_ln32_fu_620_p1;
wire   [31:0] bitcast_ln32_1_fu_638_p1;
wire   [7:0] tmp_11_fu_624_p4;
wire   [22:0] trunc_ln32_fu_634_p1;
wire   [7:0] tmp_12_fu_642_p4;
wire   [22:0] trunc_ln32_1_fu_652_p1;
wire   [0:0] or_ln32_fu_680_p2;
wire   [0:0] or_ln32_1_fu_684_p2;
wire   [0:0] and_ln32_fu_688_p2;
wire   [1:0] zext_ln47_1_fu_738_p1;
wire   [31:0] add_ln50_fu_748_p2;
reg   [1:0] grp_fu_261_opcode;
reg   [1:0] grp_fu_265_opcode;
reg   [4:0] grp_fu_297_opcode;
wire   [0:0] icmp_ln16_fu_348_p2;
reg   [52:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 53'd1;
end

kmeans_x_data #(
    .DataWidth( 32 ),
    .AddressRange( 50 ),
    .AddressWidth( 6 ))
x_data_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(x_data_address0),
    .ce0(x_data_ce0),
    .q0(x_data_q0)
);

kmeans_y_data #(
    .DataWidth( 32 ),
    .AddressRange( 50 ),
    .AddressWidth( 6 ))
y_data_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(y_data_address0),
    .ce0(y_data_ce0),
    .q0(y_data_q0)
);

kmeans_data_clustbkb #(
    .DataWidth( 1 ),
    .AddressRange( 50 ),
    .AddressWidth( 6 ))
data_cluster_id_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(data_cluster_id_address0),
    .ce0(data_cluster_id_ce0),
    .we0(data_cluster_id_we0),
    .d0(data_cluster_id_d0),
    .q0(data_cluster_id_q0)
);

kmeans_faddfsub_3cud #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
kmeans_faddfsub_3cud_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_261_p0),
    .din1(grp_fu_261_p1),
    .opcode(grp_fu_261_opcode),
    .ce(1'b1),
    .dout(grp_fu_261_p2)
);

kmeans_faddfsub_3cud #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
kmeans_faddfsub_3cud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_265_p0),
    .din1(grp_fu_265_p1),
    .opcode(grp_fu_265_opcode),
    .ce(1'b1),
    .dout(grp_fu_265_p2)
);

kmeans_fsub_32ns_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
kmeans_fsub_32ns_dEe_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_317),
    .din1(centroids_x_load_1_reg_805),
    .ce(1'b1),
    .dout(grp_fu_269_p2)
);

kmeans_fsub_32ns_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
kmeans_fsub_32ns_dEe_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_324),
    .din1(centroids_y_load_1_reg_810),
    .ce(1'b1),
    .dout(grp_fu_273_p2)
);

kmeans_fdiv_32ns_eOg #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
kmeans_fdiv_32ns_eOg_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(mean_value_x_0_0_reg_226),
    .din1(tmp_5_reg_948),
    .ce(1'b1),
    .dout(grp_fu_279_p2)
);

kmeans_fdiv_32ns_eOg #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
kmeans_fdiv_32ns_eOg_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(mean_value_y_0_0_reg_214),
    .din1(tmp_5_reg_948),
    .ce(1'b1),
    .dout(grp_fu_285_p2)
);

kmeans_sitofp_32nfYi #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
kmeans_sitofp_32nfYi_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_291_p0),
    .ce(1'b1),
    .dout(grp_fu_291_p1)
);

kmeans_fcmp_32ns_g8j #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
kmeans_fcmp_32ns_g8j_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_297_p0),
    .din1(grp_fu_297_p1),
    .ce(1'b1),
    .opcode(grp_fu_297_opcode),
    .dout(grp_fu_297_p2)
);

kmeans_fcmp_32ns_g8j #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
kmeans_fcmp_32ns_g8j_U9(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_337),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd3),
    .dout(grp_fu_302_p2)
);

kmeans_fcmp_32ns_g8j #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
kmeans_fcmp_32ns_g8j_U10(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(number_assign_2_reg_838),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd3),
    .dout(grp_fu_307_p2)
);

kmeans_fcmp_32ns_g8j #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
kmeans_fcmp_32ns_g8j_U11(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(number_assign_3_reg_845),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd3),
    .dout(grp_fu_312_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state25) & (icmp_ln41_fu_701_p2 == 1'd0))) begin
        count_0_0_reg_238 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        count_0_0_reg_238 <= select_ln47_2_reg_933;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        i_0_reg_179 <= i_reg_790;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_179 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i_1_0_reg_191 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        i_1_0_reg_191 <= add_ln27_reg_818;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln27_fu_366_p2 == 1'd1))) begin
        i_2_0_reg_202 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        i_2_0_reg_202 <= add_ln41_reg_895;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state25) & (icmp_ln41_fu_701_p2 == 1'd0))) begin
        j_1_0_reg_250 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        j_1_0_reg_250 <= add_ln46_reg_903;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state25) & (icmp_ln41_fu_701_p2 == 1'd0))) begin
        mean_value_x_0_0_reg_226 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        mean_value_x_0_0_reg_226 <= select_ln47_1_fu_769_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state25) & (icmp_ln41_fu_701_p2 == 1'd0))) begin
        mean_value_y_0_0_reg_214 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        mean_value_y_0_0_reg_214 <= select_ln47_fu_762_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        add_ln27_reg_818 <= add_ln27_fu_372_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        add_ln41_reg_895 <= add_ln41_fu_707_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        add_ln46_reg_903 <= add_ln46_fu_719_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        centroids_x_load_1_reg_805 <= centroids_x_q1;
        centroids_x_load_reg_795 <= centroids_x_q0;
        centroids_y_load_1_reg_810 <= centroids_y_q1;
        centroids_y_load_reg_800 <= centroids_y_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_790 <= i_fu_354_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        icmp_ln32_1_reg_877 <= icmp_ln32_1_fu_662_p2;
        icmp_ln32_2_reg_882 <= icmp_ln32_2_fu_668_p2;
        icmp_ln32_3_reg_887 <= icmp_ln32_3_fu_674_p2;
        icmp_ln32_reg_872 <= icmp_ln32_fu_656_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        icmp_ln47_reg_927 <= icmp_ln47_fu_742_p2;
        select_ln47_2_reg_933 <= select_ln47_2_fu_754_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln46_fu_713_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state26))) begin
        icmp_ln54_reg_923 <= icmp_ln54_fu_732_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        number_assign_2_reg_838 <= grp_fu_269_p2;
        number_assign_3_reg_845 <= grp_fu_273_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state10))) begin
        reg_317 <= x_data_q0;
        reg_324 <= y_data_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state15))) begin
        reg_331 <= grp_fu_261_p2;
        reg_337 <= grp_fu_265_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        select_ln4_1_reg_857 <= select_ln4_1_fu_496_p3;
        select_ln4_2_reg_862 <= select_ln4_2_fu_555_p3;
        select_ln4_3_reg_867 <= select_ln4_3_fu_613_p3;
        select_ln4_reg_852 <= select_ln4_fu_436_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        tmp_5_reg_948 <= grp_fu_291_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln27_fu_366_p2 == 1'd0))) begin
        zext_ln28_reg_823[5 : 0] <= zext_ln28_fu_378_p1[5 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln41_fu_701_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state25))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln41_fu_701_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state25))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        centroids_x_address0 = zext_ln17_fu_360_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        centroids_x_address0 = 1'd0;
    end else begin
        centroids_x_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        centroids_x_address1 = zext_ln55_fu_776_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        centroids_x_address1 = 1'd1;
    end else begin
        centroids_x_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state2))) begin
        centroids_x_ce0 = 1'b1;
    end else begin
        centroids_x_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state2))) begin
        centroids_x_ce1 = 1'b1;
    end else begin
        centroids_x_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        centroids_x_we0 = 1'b1;
    end else begin
        centroids_x_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state53) & (icmp_ln54_reg_923 == 1'd0))) begin
        centroids_x_we1 = 1'b1;
    end else begin
        centroids_x_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        centroids_y_address0 = zext_ln17_fu_360_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        centroids_y_address0 = 1'd0;
    end else begin
        centroids_y_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        centroids_y_address1 = zext_ln55_fu_776_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        centroids_y_address1 = 1'd1;
    end else begin
        centroids_y_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state2))) begin
        centroids_y_ce0 = 1'b1;
    end else begin
        centroids_y_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state2))) begin
        centroids_y_ce1 = 1'b1;
    end else begin
        centroids_y_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        centroids_y_we0 = 1'b1;
    end else begin
        centroids_y_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state53) & (icmp_ln54_reg_923 == 1'd0))) begin
        centroids_y_we1 = 1'b1;
    end else begin
        centroids_y_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        data_cluster_id_address0 = zext_ln47_fu_725_p1;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        data_cluster_id_address0 = zext_ln28_reg_823;
    end else begin
        data_cluster_id_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state26))) begin
        data_cluster_id_ce0 = 1'b1;
    end else begin
        data_cluster_id_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        data_cluster_id_we0 = 1'b1;
    end else begin
        data_cluster_id_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_261_opcode = 2'd1;
    end else if (((1'b1 == ap_CS_fsm_state18) | ((icmp_ln47_reg_927 == 1'd1) & (1'b1 == ap_CS_fsm_state28)))) begin
        grp_fu_261_opcode = 2'd0;
    end else begin
        grp_fu_261_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        grp_fu_261_p0 = mean_value_x_0_0_reg_226;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_261_p0 = select_ln4_reg_852;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_261_p0 = reg_317;
    end else begin
        grp_fu_261_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        grp_fu_261_p1 = reg_317;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_261_p1 = select_ln4_1_reg_857;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_261_p1 = centroids_x_load_reg_795;
    end else begin
        grp_fu_261_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_265_opcode = 2'd1;
    end else if (((1'b1 == ap_CS_fsm_state18) | ((icmp_ln47_reg_927 == 1'd1) & (1'b1 == ap_CS_fsm_state28)))) begin
        grp_fu_265_opcode = 2'd0;
    end else begin
        grp_fu_265_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        grp_fu_265_p0 = mean_value_y_0_0_reg_214;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_265_p0 = select_ln4_2_reg_862;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_265_p0 = reg_324;
    end else begin
        grp_fu_265_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        grp_fu_265_p1 = reg_324;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_265_p1 = select_ln4_3_reg_867;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_265_p1 = centroids_y_load_reg_800;
    end else begin
        grp_fu_265_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        grp_fu_291_p0 = count_0_0_reg_238;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_291_p0 = zext_ln16_fu_343_p1;
    end else begin
        grp_fu_291_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        grp_fu_297_opcode = 5'd4;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_297_opcode = 5'd3;
    end else begin
        grp_fu_297_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        grp_fu_297_p0 = reg_337;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_297_p0 = reg_331;
    end else begin
        grp_fu_297_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        grp_fu_297_p1 = reg_331;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_297_p1 = 32'd0;
    end else begin
        grp_fu_297_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        x_data_address0 = zext_ln47_fu_725_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        x_data_address0 = zext_ln28_fu_378_p1;
    end else begin
        x_data_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state9))) begin
        x_data_ce0 = 1'b1;
    end else begin
        x_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        y_data_address0 = zext_ln47_fu_725_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        y_data_address0 = zext_ln28_fu_378_p1;
    end else begin
        y_data_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state9))) begin
        y_data_ce0 = 1'b1;
    end else begin
        y_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln16_fu_348_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln27_fu_366_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state25 : begin
            if (((icmp_ln41_fu_701_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state25))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state26 : begin
            if (((icmp_ln54_fu_732_p2 == 1'd1) & (icmp_ln46_fu_713_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state26))) begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end else if (((icmp_ln46_fu_713_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state26) & (icmp_ln54_fu_732_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln27_fu_372_p2 = (i_1_0_reg_191 + 6'd1);

assign add_ln41_fu_707_p2 = (i_2_0_reg_202 + 2'd1);

assign add_ln46_fu_719_p2 = (j_1_0_reg_250 + 6'd1);

assign add_ln50_fu_748_p2 = (count_0_0_reg_238 + 32'd1);

assign and_ln32_fu_688_p2 = (or_ln32_fu_680_p2 & or_ln32_1_fu_684_p2);

assign and_ln4_1_fu_480_p2 = (or_ln4_1_fu_474_p2 & grp_fu_302_p2);

assign and_ln4_2_fu_539_p2 = (or_ln4_2_fu_533_p2 & grp_fu_307_p2);

assign and_ln4_3_fu_597_p2 = (or_ln4_3_fu_591_p2 & grp_fu_312_p2);

assign and_ln4_fu_420_p2 = (or_ln4_fu_414_p2 & grp_fu_297_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bitcast_ln32_1_fu_638_p1 = reg_331;

assign bitcast_ln32_fu_620_p1 = reg_337;

assign bitcast_ln4_1_fu_432_p1 = xor_ln4_fu_426_p2;

assign bitcast_ln4_2_fu_444_p1 = reg_337;

assign bitcast_ln4_3_fu_492_p1 = xor_ln4_1_fu_486_p2;

assign bitcast_ln4_4_fu_504_p1 = number_assign_2_reg_838;

assign bitcast_ln4_5_fu_551_p1 = xor_ln4_2_fu_545_p2;

assign bitcast_ln4_6_fu_562_p1 = number_assign_3_reg_845;

assign bitcast_ln4_7_fu_609_p1 = xor_ln4_3_fu_603_p2;

assign bitcast_ln4_fu_384_p1 = reg_331;

assign centroids_x_d0 = grp_fu_291_p1;

assign centroids_x_d1 = grp_fu_279_p2;

assign centroids_y_d0 = grp_fu_291_p1;

assign centroids_y_d1 = grp_fu_285_p2;

assign data_cluster_id_d0 = (grp_fu_297_p2 & and_ln32_fu_688_p2);

assign i_fu_354_p2 = (i_0_reg_179 + 2'd1);

assign icmp_ln16_fu_348_p2 = ((i_0_reg_179 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln27_fu_366_p2 = ((i_1_0_reg_191 == 6'd50) ? 1'b1 : 1'b0);

assign icmp_ln32_1_fu_662_p2 = ((trunc_ln32_fu_634_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln32_2_fu_668_p2 = ((tmp_12_fu_642_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln32_3_fu_674_p2 = ((trunc_ln32_1_fu_652_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln32_fu_656_p2 = ((tmp_11_fu_624_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln41_fu_701_p2 = ((i_2_0_reg_202 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln46_fu_713_p2 = ((j_1_0_reg_250 == 6'd50) ? 1'b1 : 1'b0);

assign icmp_ln47_fu_742_p2 = ((zext_ln47_1_fu_738_p1 == i_2_0_reg_202) ? 1'b1 : 1'b0);

assign icmp_ln4_1_fu_408_p2 = ((trunc_ln4_fu_398_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln4_2_fu_462_p2 = ((tmp_6_fu_448_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln4_3_fu_468_p2 = ((trunc_ln4_1_fu_458_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln4_4_fu_521_p2 = ((tmp_8_fu_507_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln4_5_fu_527_p2 = ((trunc_ln4_2_fu_517_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln4_6_fu_579_p2 = ((tmp_s_fu_565_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln4_7_fu_585_p2 = ((trunc_ln4_3_fu_575_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln4_fu_402_p2 = ((tmp_3_fu_388_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln54_fu_732_p2 = ((count_0_0_reg_238 == 32'd0) ? 1'b1 : 1'b0);

assign or_ln32_1_fu_684_p2 = (icmp_ln32_3_reg_887 | icmp_ln32_2_reg_882);

assign or_ln32_fu_680_p2 = (icmp_ln32_reg_872 | icmp_ln32_1_reg_877);

assign or_ln4_1_fu_474_p2 = (icmp_ln4_3_fu_468_p2 | icmp_ln4_2_fu_462_p2);

assign or_ln4_2_fu_533_p2 = (icmp_ln4_5_fu_527_p2 | icmp_ln4_4_fu_521_p2);

assign or_ln4_3_fu_591_p2 = (icmp_ln4_7_fu_585_p2 | icmp_ln4_6_fu_579_p2);

assign or_ln4_fu_414_p2 = (icmp_ln4_fu_402_p2 | icmp_ln4_1_fu_408_p2);

assign select_ln47_1_fu_769_p3 = ((icmp_ln47_reg_927[0:0] === 1'b1) ? grp_fu_261_p2 : mean_value_x_0_0_reg_226);

assign select_ln47_2_fu_754_p3 = ((icmp_ln47_fu_742_p2[0:0] === 1'b1) ? add_ln50_fu_748_p2 : count_0_0_reg_238);

assign select_ln47_fu_762_p3 = ((icmp_ln47_reg_927[0:0] === 1'b1) ? grp_fu_265_p2 : mean_value_y_0_0_reg_214);

assign select_ln4_1_fu_496_p3 = ((and_ln4_1_fu_480_p2[0:0] === 1'b1) ? reg_337 : bitcast_ln4_3_fu_492_p1);

assign select_ln4_2_fu_555_p3 = ((and_ln4_2_fu_539_p2[0:0] === 1'b1) ? number_assign_2_reg_838 : bitcast_ln4_5_fu_551_p1);

assign select_ln4_3_fu_613_p3 = ((and_ln4_3_fu_597_p2[0:0] === 1'b1) ? number_assign_3_reg_845 : bitcast_ln4_7_fu_609_p1);

assign select_ln4_fu_436_p3 = ((and_ln4_fu_420_p2[0:0] === 1'b1) ? reg_331 : bitcast_ln4_1_fu_432_p1);

assign tmp_11_fu_624_p4 = {{bitcast_ln32_fu_620_p1[30:23]}};

assign tmp_12_fu_642_p4 = {{bitcast_ln32_1_fu_638_p1[30:23]}};

assign tmp_3_fu_388_p4 = {{bitcast_ln4_fu_384_p1[30:23]}};

assign tmp_6_fu_448_p4 = {{bitcast_ln4_2_fu_444_p1[30:23]}};

assign tmp_8_fu_507_p4 = {{bitcast_ln4_4_fu_504_p1[30:23]}};

assign tmp_s_fu_565_p4 = {{bitcast_ln4_6_fu_562_p1[30:23]}};

assign trunc_ln32_1_fu_652_p1 = bitcast_ln32_1_fu_638_p1[22:0];

assign trunc_ln32_fu_634_p1 = bitcast_ln32_fu_620_p1[22:0];

assign trunc_ln4_1_fu_458_p1 = bitcast_ln4_2_fu_444_p1[22:0];

assign trunc_ln4_2_fu_517_p1 = bitcast_ln4_4_fu_504_p1[22:0];

assign trunc_ln4_3_fu_575_p1 = bitcast_ln4_6_fu_562_p1[22:0];

assign trunc_ln4_fu_398_p1 = bitcast_ln4_fu_384_p1[22:0];

assign xor_ln4_1_fu_486_p2 = (bitcast_ln4_2_fu_444_p1 ^ 32'd2147483648);

assign xor_ln4_2_fu_545_p2 = (bitcast_ln4_4_fu_504_p1 ^ 32'd2147483648);

assign xor_ln4_3_fu_603_p2 = (bitcast_ln4_6_fu_562_p1 ^ 32'd2147483648);

assign xor_ln4_fu_426_p2 = (bitcast_ln4_fu_384_p1 ^ 32'd2147483648);

assign zext_ln16_fu_343_p1 = i_0_reg_179;

assign zext_ln17_fu_360_p1 = i_0_reg_179;

assign zext_ln28_fu_378_p1 = i_1_0_reg_191;

assign zext_ln47_1_fu_738_p1 = data_cluster_id_q0;

assign zext_ln47_fu_725_p1 = j_1_0_reg_250;

assign zext_ln55_fu_776_p1 = i_2_0_reg_202;

always @ (posedge ap_clk) begin
    zext_ln28_reg_823[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
end

endmodule //kmeans
