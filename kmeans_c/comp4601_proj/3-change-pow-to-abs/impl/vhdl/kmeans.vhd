-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity kmeans is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    centroids_x_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    centroids_x_ce0 : OUT STD_LOGIC;
    centroids_x_we0 : OUT STD_LOGIC;
    centroids_x_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    centroids_x_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    centroids_x_address1 : OUT STD_LOGIC_VECTOR (0 downto 0);
    centroids_x_ce1 : OUT STD_LOGIC;
    centroids_x_we1 : OUT STD_LOGIC;
    centroids_x_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    centroids_x_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    centroids_y_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    centroids_y_ce0 : OUT STD_LOGIC;
    centroids_y_we0 : OUT STD_LOGIC;
    centroids_y_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    centroids_y_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    centroids_y_address1 : OUT STD_LOGIC_VECTOR (0 downto 0);
    centroids_y_ce1 : OUT STD_LOGIC;
    centroids_y_we1 : OUT STD_LOGIC;
    centroids_y_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    centroids_y_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of kmeans is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "kmeans,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.735000,HLS_SYN_LAT=1542,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=8,HLS_SYN_FF=3653,HLS_SYN_LUT=6343,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (52 downto 0) := "00000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (52 downto 0) := "00000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (52 downto 0) := "00000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (52 downto 0) := "00000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (52 downto 0) := "00000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (52 downto 0) := "00000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (52 downto 0) := "00001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (52 downto 0) := "00010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (52 downto 0) := "00100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (52 downto 0) := "01000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (52 downto 0) := "10000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv6_32 : STD_LOGIC_VECTOR (5 downto 0) := "110010";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_80000000 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal x_data_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal x_data_ce0 : STD_LOGIC;
    signal x_data_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_data_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal y_data_ce0 : STD_LOGIC;
    signal y_data_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_317 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal reg_324 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_261_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_331 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal grp_fu_265_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_337 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln16_fu_343_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_fu_354_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_reg_790 : STD_LOGIC_VECTOR (1 downto 0);
    signal centroids_x_load_reg_795 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal centroids_y_load_reg_800 : STD_LOGIC_VECTOR (31 downto 0);
    signal centroids_x_load_1_reg_805 : STD_LOGIC_VECTOR (31 downto 0);
    signal centroids_y_load_1_reg_810 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln27_fu_372_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln27_reg_818 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal zext_ln28_fu_378_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_reg_823 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln27_fu_366_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_269_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal number_assign_2_reg_838 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_273_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal number_assign_3_reg_845 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln4_fu_436_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln4_reg_852 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal select_ln4_1_fu_496_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln4_1_reg_857 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln4_2_fu_555_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln4_2_reg_862 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln4_3_fu_613_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln4_3_reg_867 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln32_fu_656_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_872 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal icmp_ln32_1_fu_662_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_1_reg_877 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_2_fu_668_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_2_reg_882 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_3_fu_674_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_3_reg_887 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln41_fu_707_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln41_reg_895 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal add_ln46_fu_719_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln46_reg_903 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal icmp_ln46_fu_713_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_fu_732_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_923 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln47_fu_742_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln47_reg_927 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln47_2_fu_754_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln47_2_reg_933 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln47_fu_762_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal select_ln47_1_fu_769_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_291_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_reg_948 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal data_cluster_id_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal data_cluster_id_ce0 : STD_LOGIC;
    signal data_cluster_id_we0 : STD_LOGIC;
    signal data_cluster_id_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal data_cluster_id_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_0_reg_179 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal i_1_0_reg_191 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal i_2_0_reg_202 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal mean_value_y_0_0_reg_214 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln41_fu_701_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mean_value_x_0_0_reg_226 : STD_LOGIC_VECTOR (31 downto 0);
    signal count_0_0_reg_238 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_1_0_reg_250 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln17_fu_360_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln47_fu_725_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln55_fu_776_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_279_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_285_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_261_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_261_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal grp_fu_265_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_265_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal grp_fu_291_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_297_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_297_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal bitcast_ln4_fu_384_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_388_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln4_fu_398_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln4_1_fu_408_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_fu_402_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln4_fu_414_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_297_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln4_fu_426_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln4_fu_420_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln4_1_fu_432_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln4_2_fu_444_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_448_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln4_1_fu_458_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln4_3_fu_468_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_2_fu_462_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln4_1_fu_474_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_302_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln4_1_fu_486_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln4_1_fu_480_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln4_3_fu_492_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln4_4_fu_504_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_507_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln4_2_fu_517_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln4_5_fu_527_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_4_fu_521_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln4_2_fu_533_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_307_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln4_2_fu_545_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln4_2_fu_539_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln4_5_fu_551_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln4_6_fu_562_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_565_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln4_3_fu_575_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln4_7_fu_585_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4_6_fu_579_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln4_3_fu_591_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_312_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln4_3_fu_603_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln4_3_fu_597_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln4_7_fu_609_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_fu_620_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_1_fu_638_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_624_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln32_fu_634_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_12_fu_642_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln32_1_fu_652_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_ln32_fu_680_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln32_1_fu_684_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln32_fu_688_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln47_1_fu_738_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln50_fu_748_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_261_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_265_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_297_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln16_fu_348_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (52 downto 0);

    component kmeans_faddfsub_3cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kmeans_fsub_32ns_dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kmeans_fdiv_32ns_eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kmeans_sitofp_32nfYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kmeans_fcmp_32ns_g8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component kmeans_x_data IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kmeans_y_data IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kmeans_data_clustbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    x_data_U : component kmeans_x_data
    generic map (
        DataWidth => 32,
        AddressRange => 50,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => x_data_address0,
        ce0 => x_data_ce0,
        q0 => x_data_q0);

    y_data_U : component kmeans_y_data
    generic map (
        DataWidth => 32,
        AddressRange => 50,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => y_data_address0,
        ce0 => y_data_ce0,
        q0 => y_data_q0);

    data_cluster_id_U : component kmeans_data_clustbkb
    generic map (
        DataWidth => 1,
        AddressRange => 50,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => data_cluster_id_address0,
        ce0 => data_cluster_id_ce0,
        we0 => data_cluster_id_we0,
        d0 => data_cluster_id_d0,
        q0 => data_cluster_id_q0);

    kmeans_faddfsub_3cud_U1 : component kmeans_faddfsub_3cud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_261_p0,
        din1 => grp_fu_261_p1,
        opcode => grp_fu_261_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_261_p2);

    kmeans_faddfsub_3cud_U2 : component kmeans_faddfsub_3cud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_265_p0,
        din1 => grp_fu_265_p1,
        opcode => grp_fu_265_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_265_p2);

    kmeans_fsub_32ns_dEe_U3 : component kmeans_fsub_32ns_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_317,
        din1 => centroids_x_load_1_reg_805,
        ce => ap_const_logic_1,
        dout => grp_fu_269_p2);

    kmeans_fsub_32ns_dEe_U4 : component kmeans_fsub_32ns_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_324,
        din1 => centroids_y_load_1_reg_810,
        ce => ap_const_logic_1,
        dout => grp_fu_273_p2);

    kmeans_fdiv_32ns_eOg_U5 : component kmeans_fdiv_32ns_eOg
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => mean_value_x_0_0_reg_226,
        din1 => tmp_5_reg_948,
        ce => ap_const_logic_1,
        dout => grp_fu_279_p2);

    kmeans_fdiv_32ns_eOg_U6 : component kmeans_fdiv_32ns_eOg
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => mean_value_y_0_0_reg_214,
        din1 => tmp_5_reg_948,
        ce => ap_const_logic_1,
        dout => grp_fu_285_p2);

    kmeans_sitofp_32nfYi_U7 : component kmeans_sitofp_32nfYi
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_291_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_291_p1);

    kmeans_fcmp_32ns_g8j_U8 : component kmeans_fcmp_32ns_g8j
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_297_p0,
        din1 => grp_fu_297_p1,
        ce => ap_const_logic_1,
        opcode => grp_fu_297_opcode,
        dout => grp_fu_297_p2);

    kmeans_fcmp_32ns_g8j_U9 : component kmeans_fcmp_32ns_g8j
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_337,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_3,
        dout => grp_fu_302_p2);

    kmeans_fcmp_32ns_g8j_U10 : component kmeans_fcmp_32ns_g8j
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => number_assign_2_reg_838,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_3,
        dout => grp_fu_307_p2);

    kmeans_fcmp_32ns_g8j_U11 : component kmeans_fcmp_32ns_g8j
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => number_assign_3_reg_845,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_3,
        dout => grp_fu_312_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    count_0_0_reg_238_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state25) and (icmp_ln41_fu_701_p2 = ap_const_lv1_0))) then 
                count_0_0_reg_238 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                count_0_0_reg_238 <= select_ln47_2_reg_933;
            end if; 
        end if;
    end process;

    i_0_reg_179_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                i_0_reg_179 <= i_reg_790;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_179 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    i_1_0_reg_191_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                i_1_0_reg_191 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                i_1_0_reg_191 <= add_ln27_reg_818;
            end if; 
        end if;
    end process;

    i_2_0_reg_202_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln27_fu_366_p2 = ap_const_lv1_1))) then 
                i_2_0_reg_202 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
                i_2_0_reg_202 <= add_ln41_reg_895;
            end if; 
        end if;
    end process;

    j_1_0_reg_250_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state25) and (icmp_ln41_fu_701_p2 = ap_const_lv1_0))) then 
                j_1_0_reg_250 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                j_1_0_reg_250 <= add_ln46_reg_903;
            end if; 
        end if;
    end process;

    mean_value_x_0_0_reg_226_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state25) and (icmp_ln41_fu_701_p2 = ap_const_lv1_0))) then 
                mean_value_x_0_0_reg_226 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                mean_value_x_0_0_reg_226 <= select_ln47_1_fu_769_p3;
            end if; 
        end if;
    end process;

    mean_value_y_0_0_reg_214_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state25) and (icmp_ln41_fu_701_p2 = ap_const_lv1_0))) then 
                mean_value_y_0_0_reg_214 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                mean_value_y_0_0_reg_214 <= select_ln47_fu_762_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                add_ln27_reg_818 <= add_ln27_fu_372_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                add_ln41_reg_895 <= add_ln41_fu_707_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                add_ln46_reg_903 <= add_ln46_fu_719_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                centroids_x_load_1_reg_805 <= centroids_x_q1;
                centroids_x_load_reg_795 <= centroids_x_q0;
                centroids_y_load_1_reg_810 <= centroids_y_q1;
                centroids_y_load_reg_800 <= centroids_y_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_790 <= i_fu_354_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                icmp_ln32_1_reg_877 <= icmp_ln32_1_fu_662_p2;
                icmp_ln32_2_reg_882 <= icmp_ln32_2_fu_668_p2;
                icmp_ln32_3_reg_887 <= icmp_ln32_3_fu_674_p2;
                icmp_ln32_reg_872 <= icmp_ln32_fu_656_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                icmp_ln47_reg_927 <= icmp_ln47_fu_742_p2;
                select_ln47_2_reg_933 <= select_ln47_2_fu_754_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln46_fu_713_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state26))) then
                icmp_ln54_reg_923 <= icmp_ln54_fu_732_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                number_assign_2_reg_838 <= grp_fu_269_p2;
                number_assign_3_reg_845 <= grp_fu_273_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state10))) then
                reg_317 <= x_data_q0;
                reg_324 <= y_data_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state15))) then
                reg_331 <= grp_fu_261_p2;
                reg_337 <= grp_fu_265_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                select_ln4_1_reg_857 <= select_ln4_1_fu_496_p3;
                select_ln4_2_reg_862 <= select_ln4_2_fu_555_p3;
                select_ln4_3_reg_867 <= select_ln4_3_fu_613_p3;
                select_ln4_reg_852 <= select_ln4_fu_436_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then
                tmp_5_reg_948 <= grp_fu_291_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln27_fu_366_p2 = ap_const_lv1_0))) then
                    zext_ln28_reg_823(5 downto 0) <= zext_ln28_fu_378_p1(5 downto 0);
            end if;
        end if;
    end process;
    zext_ln28_reg_823(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state9, icmp_ln27_fu_366_p2, ap_CS_fsm_state25, ap_CS_fsm_state26, icmp_ln46_fu_713_p2, icmp_ln54_fu_732_p2, icmp_ln41_fu_701_p2, icmp_ln16_fu_348_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln16_fu_348_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln27_fu_366_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state25 => 
                if (((icmp_ln41_fu_701_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state26 => 
                if (((icmp_ln54_fu_732_p2 = ap_const_lv1_1) and (icmp_ln46_fu_713_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state26))) then
                    ap_NS_fsm <= ap_ST_fsm_state53;
                elsif (((icmp_ln46_fu_713_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state26) and (icmp_ln54_fu_732_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln27_fu_372_p2 <= std_logic_vector(unsigned(i_1_0_reg_191) + unsigned(ap_const_lv6_1));
    add_ln41_fu_707_p2 <= std_logic_vector(unsigned(i_2_0_reg_202) + unsigned(ap_const_lv2_1));
    add_ln46_fu_719_p2 <= std_logic_vector(unsigned(j_1_0_reg_250) + unsigned(ap_const_lv6_1));
    add_ln50_fu_748_p2 <= std_logic_vector(unsigned(count_0_0_reg_238) + unsigned(ap_const_lv32_1));
    and_ln32_fu_688_p2 <= (or_ln32_fu_680_p2 and or_ln32_1_fu_684_p2);
    and_ln4_1_fu_480_p2 <= (or_ln4_1_fu_474_p2 and grp_fu_302_p2);
    and_ln4_2_fu_539_p2 <= (or_ln4_2_fu_533_p2 and grp_fu_307_p2);
    and_ln4_3_fu_597_p2 <= (or_ln4_3_fu_591_p2 and grp_fu_312_p2);
    and_ln4_fu_420_p2 <= (or_ln4_fu_414_p2 and grp_fu_297_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state25, icmp_ln41_fu_701_p2)
    begin
        if (((icmp_ln41_fu_701_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state25, icmp_ln41_fu_701_p2)
    begin
        if (((icmp_ln41_fu_701_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln32_1_fu_638_p1 <= reg_331;
    bitcast_ln32_fu_620_p1 <= reg_337;
    bitcast_ln4_1_fu_432_p1 <= xor_ln4_fu_426_p2;
    bitcast_ln4_2_fu_444_p1 <= reg_337;
    bitcast_ln4_3_fu_492_p1 <= xor_ln4_1_fu_486_p2;
    bitcast_ln4_4_fu_504_p1 <= number_assign_2_reg_838;
    bitcast_ln4_5_fu_551_p1 <= xor_ln4_2_fu_545_p2;
    bitcast_ln4_6_fu_562_p1 <= number_assign_3_reg_845;
    bitcast_ln4_7_fu_609_p1 <= xor_ln4_3_fu_603_p2;
    bitcast_ln4_fu_384_p1 <= reg_331;

    centroids_x_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state7, zext_ln17_fu_360_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            centroids_x_address0 <= zext_ln17_fu_360_p1(1 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            centroids_x_address0 <= ap_const_lv1_0;
        else 
            centroids_x_address0 <= "X";
        end if; 
    end process;


    centroids_x_address1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state53, zext_ln55_fu_776_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            centroids_x_address1 <= zext_ln55_fu_776_p1(1 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            centroids_x_address1 <= ap_const_lv1_1;
        else 
            centroids_x_address1 <= "X";
        end if; 
    end process;


    centroids_x_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            centroids_x_ce0 <= ap_const_logic_1;
        else 
            centroids_x_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    centroids_x_ce1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state53)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            centroids_x_ce1 <= ap_const_logic_1;
        else 
            centroids_x_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    centroids_x_d0 <= grp_fu_291_p1;
    centroids_x_d1 <= grp_fu_279_p2;

    centroids_x_we0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            centroids_x_we0 <= ap_const_logic_1;
        else 
            centroids_x_we0 <= ap_const_logic_0;
        end if; 
    end process;


    centroids_x_we1_assign_proc : process(icmp_ln54_reg_923, ap_CS_fsm_state53)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state53) and (icmp_ln54_reg_923 = ap_const_lv1_0))) then 
            centroids_x_we1 <= ap_const_logic_1;
        else 
            centroids_x_we1 <= ap_const_logic_0;
        end if; 
    end process;


    centroids_y_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state7, zext_ln17_fu_360_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            centroids_y_address0 <= zext_ln17_fu_360_p1(1 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            centroids_y_address0 <= ap_const_lv1_0;
        else 
            centroids_y_address0 <= "X";
        end if; 
    end process;


    centroids_y_address1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state53, zext_ln55_fu_776_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            centroids_y_address1 <= zext_ln55_fu_776_p1(1 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            centroids_y_address1 <= ap_const_lv1_1;
        else 
            centroids_y_address1 <= "X";
        end if; 
    end process;


    centroids_y_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            centroids_y_ce0 <= ap_const_logic_1;
        else 
            centroids_y_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    centroids_y_ce1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state53)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            centroids_y_ce1 <= ap_const_logic_1;
        else 
            centroids_y_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    centroids_y_d0 <= grp_fu_291_p1;
    centroids_y_d1 <= grp_fu_285_p2;

    centroids_y_we0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            centroids_y_we0 <= ap_const_logic_1;
        else 
            centroids_y_we0 <= ap_const_logic_0;
        end if; 
    end process;


    centroids_y_we1_assign_proc : process(icmp_ln54_reg_923, ap_CS_fsm_state53)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state53) and (icmp_ln54_reg_923 = ap_const_lv1_0))) then 
            centroids_y_we1 <= ap_const_logic_1;
        else 
            centroids_y_we1 <= ap_const_logic_0;
        end if; 
    end process;


    data_cluster_id_address0_assign_proc : process(zext_ln28_reg_823, ap_CS_fsm_state26, ap_CS_fsm_state24, zext_ln47_fu_725_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            data_cluster_id_address0 <= zext_ln47_fu_725_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            data_cluster_id_address0 <= zext_ln28_reg_823(6 - 1 downto 0);
        else 
            data_cluster_id_address0 <= "XXXXXX";
        end if; 
    end process;


    data_cluster_id_ce0_assign_proc : process(ap_CS_fsm_state26, ap_CS_fsm_state24)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            data_cluster_id_ce0 <= ap_const_logic_1;
        else 
            data_cluster_id_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    data_cluster_id_d0 <= (grp_fu_297_p2 and and_ln32_fu_688_p2);

    data_cluster_id_we0_assign_proc : process(ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            data_cluster_id_we0 <= ap_const_logic_1;
        else 
            data_cluster_id_we0 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_261_opcode_assign_proc : process(icmp_ln47_reg_927, ap_CS_fsm_state11, ap_CS_fsm_state18, ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_261_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state18) or ((icmp_ln47_reg_927 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state28)))) then 
            grp_fu_261_opcode <= ap_const_lv2_0;
        else 
            grp_fu_261_opcode <= "XX";
        end if; 
    end process;


    grp_fu_261_p0_assign_proc : process(reg_317, select_ln4_reg_852, mean_value_x_0_0_reg_226, ap_CS_fsm_state11, ap_CS_fsm_state18, ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_fu_261_p0 <= mean_value_x_0_0_reg_226;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_261_p0 <= select_ln4_reg_852;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_261_p0 <= reg_317;
        else 
            grp_fu_261_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_261_p1_assign_proc : process(reg_317, centroids_x_load_reg_795, select_ln4_1_reg_857, ap_CS_fsm_state11, ap_CS_fsm_state18, ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_fu_261_p1 <= reg_317;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_261_p1 <= select_ln4_1_reg_857;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_261_p1 <= centroids_x_load_reg_795;
        else 
            grp_fu_261_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_265_opcode_assign_proc : process(icmp_ln47_reg_927, ap_CS_fsm_state11, ap_CS_fsm_state18, ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_265_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state18) or ((icmp_ln47_reg_927 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state28)))) then 
            grp_fu_265_opcode <= ap_const_lv2_0;
        else 
            grp_fu_265_opcode <= "XX";
        end if; 
    end process;


    grp_fu_265_p0_assign_proc : process(reg_324, select_ln4_2_reg_862, mean_value_y_0_0_reg_214, ap_CS_fsm_state11, ap_CS_fsm_state18, ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_fu_265_p0 <= mean_value_y_0_0_reg_214;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_265_p0 <= select_ln4_2_reg_862;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_265_p0 <= reg_324;
        else 
            grp_fu_265_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_265_p1_assign_proc : process(reg_324, centroids_y_load_reg_800, select_ln4_3_reg_867, ap_CS_fsm_state11, ap_CS_fsm_state18, ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_fu_265_p1 <= reg_324;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_265_p1 <= select_ln4_3_reg_867;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_265_p1 <= centroids_y_load_reg_800;
        else 
            grp_fu_265_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_291_p0_assign_proc : process(zext_ln16_fu_343_p1, ap_CS_fsm_state2, ap_CS_fsm_state26, count_0_0_reg_238)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_fu_291_p0 <= count_0_0_reg_238;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_291_p0 <= zext_ln16_fu_343_p1;
        else 
            grp_fu_291_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_297_opcode_assign_proc : process(ap_CS_fsm_state23, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_fu_297_opcode <= ap_const_lv5_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_297_opcode <= ap_const_lv5_3;
        else 
            grp_fu_297_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_297_p0_assign_proc : process(reg_331, reg_337, ap_CS_fsm_state23, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_fu_297_p0 <= reg_337;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_297_p0 <= reg_331;
        else 
            grp_fu_297_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_297_p1_assign_proc : process(reg_331, ap_CS_fsm_state23, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_fu_297_p1 <= reg_331;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_297_p1 <= ap_const_lv32_0;
        else 
            grp_fu_297_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_fu_354_p2 <= std_logic_vector(unsigned(i_0_reg_179) + unsigned(ap_const_lv2_1));
    icmp_ln16_fu_348_p2 <= "1" when (i_0_reg_179 = ap_const_lv2_2) else "0";
    icmp_ln27_fu_366_p2 <= "1" when (i_1_0_reg_191 = ap_const_lv6_32) else "0";
    icmp_ln32_1_fu_662_p2 <= "1" when (trunc_ln32_fu_634_p1 = ap_const_lv23_0) else "0";
    icmp_ln32_2_fu_668_p2 <= "0" when (tmp_12_fu_642_p4 = ap_const_lv8_FF) else "1";
    icmp_ln32_3_fu_674_p2 <= "1" when (trunc_ln32_1_fu_652_p1 = ap_const_lv23_0) else "0";
    icmp_ln32_fu_656_p2 <= "0" when (tmp_11_fu_624_p4 = ap_const_lv8_FF) else "1";
    icmp_ln41_fu_701_p2 <= "1" when (i_2_0_reg_202 = ap_const_lv2_2) else "0";
    icmp_ln46_fu_713_p2 <= "1" when (j_1_0_reg_250 = ap_const_lv6_32) else "0";
    icmp_ln47_fu_742_p2 <= "1" when (zext_ln47_1_fu_738_p1 = i_2_0_reg_202) else "0";
    icmp_ln4_1_fu_408_p2 <= "1" when (trunc_ln4_fu_398_p1 = ap_const_lv23_0) else "0";
    icmp_ln4_2_fu_462_p2 <= "0" when (tmp_6_fu_448_p4 = ap_const_lv8_FF) else "1";
    icmp_ln4_3_fu_468_p2 <= "1" when (trunc_ln4_1_fu_458_p1 = ap_const_lv23_0) else "0";
    icmp_ln4_4_fu_521_p2 <= "0" when (tmp_8_fu_507_p4 = ap_const_lv8_FF) else "1";
    icmp_ln4_5_fu_527_p2 <= "1" when (trunc_ln4_2_fu_517_p1 = ap_const_lv23_0) else "0";
    icmp_ln4_6_fu_579_p2 <= "0" when (tmp_s_fu_565_p4 = ap_const_lv8_FF) else "1";
    icmp_ln4_7_fu_585_p2 <= "1" when (trunc_ln4_3_fu_575_p1 = ap_const_lv23_0) else "0";
    icmp_ln4_fu_402_p2 <= "0" when (tmp_3_fu_388_p4 = ap_const_lv8_FF) else "1";
    icmp_ln54_fu_732_p2 <= "1" when (count_0_0_reg_238 = ap_const_lv32_0) else "0";
    or_ln32_1_fu_684_p2 <= (icmp_ln32_3_reg_887 or icmp_ln32_2_reg_882);
    or_ln32_fu_680_p2 <= (icmp_ln32_reg_872 or icmp_ln32_1_reg_877);
    or_ln4_1_fu_474_p2 <= (icmp_ln4_3_fu_468_p2 or icmp_ln4_2_fu_462_p2);
    or_ln4_2_fu_533_p2 <= (icmp_ln4_5_fu_527_p2 or icmp_ln4_4_fu_521_p2);
    or_ln4_3_fu_591_p2 <= (icmp_ln4_7_fu_585_p2 or icmp_ln4_6_fu_579_p2);
    or_ln4_fu_414_p2 <= (icmp_ln4_fu_402_p2 or icmp_ln4_1_fu_408_p2);
    select_ln47_1_fu_769_p3 <= 
        grp_fu_261_p2 when (icmp_ln47_reg_927(0) = '1') else 
        mean_value_x_0_0_reg_226;
    select_ln47_2_fu_754_p3 <= 
        add_ln50_fu_748_p2 when (icmp_ln47_fu_742_p2(0) = '1') else 
        count_0_0_reg_238;
    select_ln47_fu_762_p3 <= 
        grp_fu_265_p2 when (icmp_ln47_reg_927(0) = '1') else 
        mean_value_y_0_0_reg_214;
    select_ln4_1_fu_496_p3 <= 
        reg_337 when (and_ln4_1_fu_480_p2(0) = '1') else 
        bitcast_ln4_3_fu_492_p1;
    select_ln4_2_fu_555_p3 <= 
        number_assign_2_reg_838 when (and_ln4_2_fu_539_p2(0) = '1') else 
        bitcast_ln4_5_fu_551_p1;
    select_ln4_3_fu_613_p3 <= 
        number_assign_3_reg_845 when (and_ln4_3_fu_597_p2(0) = '1') else 
        bitcast_ln4_7_fu_609_p1;
    select_ln4_fu_436_p3 <= 
        reg_331 when (and_ln4_fu_420_p2(0) = '1') else 
        bitcast_ln4_1_fu_432_p1;
    tmp_11_fu_624_p4 <= bitcast_ln32_fu_620_p1(30 downto 23);
    tmp_12_fu_642_p4 <= bitcast_ln32_1_fu_638_p1(30 downto 23);
    tmp_3_fu_388_p4 <= bitcast_ln4_fu_384_p1(30 downto 23);
    tmp_6_fu_448_p4 <= bitcast_ln4_2_fu_444_p1(30 downto 23);
    tmp_8_fu_507_p4 <= bitcast_ln4_4_fu_504_p1(30 downto 23);
    tmp_s_fu_565_p4 <= bitcast_ln4_6_fu_562_p1(30 downto 23);
    trunc_ln32_1_fu_652_p1 <= bitcast_ln32_1_fu_638_p1(23 - 1 downto 0);
    trunc_ln32_fu_634_p1 <= bitcast_ln32_fu_620_p1(23 - 1 downto 0);
    trunc_ln4_1_fu_458_p1 <= bitcast_ln4_2_fu_444_p1(23 - 1 downto 0);
    trunc_ln4_2_fu_517_p1 <= bitcast_ln4_4_fu_504_p1(23 - 1 downto 0);
    trunc_ln4_3_fu_575_p1 <= bitcast_ln4_6_fu_562_p1(23 - 1 downto 0);
    trunc_ln4_fu_398_p1 <= bitcast_ln4_fu_384_p1(23 - 1 downto 0);

    x_data_address0_assign_proc : process(ap_CS_fsm_state9, zext_ln28_fu_378_p1, ap_CS_fsm_state26, zext_ln47_fu_725_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            x_data_address0 <= zext_ln47_fu_725_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            x_data_address0 <= zext_ln28_fu_378_p1(6 - 1 downto 0);
        else 
            x_data_address0 <= "XXXXXX";
        end if; 
    end process;


    x_data_ce0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            x_data_ce0 <= ap_const_logic_1;
        else 
            x_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln4_1_fu_486_p2 <= (bitcast_ln4_2_fu_444_p1 xor ap_const_lv32_80000000);
    xor_ln4_2_fu_545_p2 <= (bitcast_ln4_4_fu_504_p1 xor ap_const_lv32_80000000);
    xor_ln4_3_fu_603_p2 <= (bitcast_ln4_6_fu_562_p1 xor ap_const_lv32_80000000);
    xor_ln4_fu_426_p2 <= (bitcast_ln4_fu_384_p1 xor ap_const_lv32_80000000);

    y_data_address0_assign_proc : process(ap_CS_fsm_state9, zext_ln28_fu_378_p1, ap_CS_fsm_state26, zext_ln47_fu_725_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            y_data_address0 <= zext_ln47_fu_725_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            y_data_address0 <= zext_ln28_fu_378_p1(6 - 1 downto 0);
        else 
            y_data_address0 <= "XXXXXX";
        end if; 
    end process;


    y_data_ce0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            y_data_ce0 <= ap_const_logic_1;
        else 
            y_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln16_fu_343_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_179),32));
    zext_ln17_fu_360_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_179),64));
    zext_ln28_fu_378_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_0_reg_191),64));
    zext_ln47_1_fu_738_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data_cluster_id_q0),2));
    zext_ln47_fu_725_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_1_0_reg_250),64));
    zext_ln55_fu_776_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_0_reg_202),64));
end behav;
