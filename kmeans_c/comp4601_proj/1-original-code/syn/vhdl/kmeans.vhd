-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity kmeans is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    centroids_x_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    centroids_x_ce0 : OUT STD_LOGIC;
    centroids_x_we0 : OUT STD_LOGIC;
    centroids_x_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    centroids_x_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    centroids_x_address1 : OUT STD_LOGIC_VECTOR (0 downto 0);
    centroids_x_ce1 : OUT STD_LOGIC;
    centroids_x_we1 : OUT STD_LOGIC;
    centroids_x_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    centroids_x_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    centroids_y_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    centroids_y_ce0 : OUT STD_LOGIC;
    centroids_y_we0 : OUT STD_LOGIC;
    centroids_y_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    centroids_y_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    centroids_y_address1 : OUT STD_LOGIC_VECTOR (0 downto 0);
    centroids_y_ce1 : OUT STD_LOGIC;
    centroids_y_we1 : OUT STD_LOGIC;
    centroids_y_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    centroids_y_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of kmeans is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "kmeans,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.514000,HLS_SYN_LAT=498014,HLS_SYN_TPT=none,HLS_SYN_MEM=270,HLS_SYN_DSP=294,HLS_SYN_FF=83065,HLS_SYN_LUT=41844,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state98 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state99 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state100 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state101 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state102 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state103 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state104 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state105 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state106 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state107 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state108 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state109 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state110 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state111 : STD_LOGIC_VECTOR (122 downto 0) := "000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state112 : STD_LOGIC_VECTOR (122 downto 0) := "000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state113 : STD_LOGIC_VECTOR (122 downto 0) := "000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state114 : STD_LOGIC_VECTOR (122 downto 0) := "000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state115 : STD_LOGIC_VECTOR (122 downto 0) := "000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state116 : STD_LOGIC_VECTOR (122 downto 0) := "000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state117 : STD_LOGIC_VECTOR (122 downto 0) := "000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state118 : STD_LOGIC_VECTOR (122 downto 0) := "000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state119 : STD_LOGIC_VECTOR (122 downto 0) := "000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state120 : STD_LOGIC_VECTOR (122 downto 0) := "000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state121 : STD_LOGIC_VECTOR (122 downto 0) := "001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state122 : STD_LOGIC_VECTOR (122 downto 0) := "010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state123 : STD_LOGIC_VECTOR (122 downto 0) := "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv32_59 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011001";
    constant ap_const_lv32_5B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011011";
    constant ap_const_lv32_5C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011100";
    constant ap_const_lv32_5E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011110";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_65 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100101";
    constant ap_const_lv32_6A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101010";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_5D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011101";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_7A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111010";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_61 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100001";
    constant ap_const_lv32_6B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101011";
    constant ap_const_lv32_5A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011010";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_55 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010101";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv7_64 : STD_LOGIC_VECTOR (6 downto 0) := "1100100";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv6_32 : STD_LOGIC_VECTOR (5 downto 0) := "110010";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (122 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal x_data_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal x_data_ce0 : STD_LOGIC;
    signal x_data_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_data_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal y_data_ce0 : STD_LOGIC;
    signal y_data_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_486 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state97 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state97 : signal is "none";
    signal reg_493 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln13_fu_500_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_fu_511_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_reg_721 : STD_LOGIC_VECTOR (1 downto 0);
    signal interation_fu_529_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal interation_reg_729 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal centroids_x_load_reg_734 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal centroids_y_load_reg_739 : STD_LOGIC_VECTOR (31 downto 0);
    signal centroids_x_load_1_reg_744 : STD_LOGIC_VECTOR (31 downto 0);
    signal centroids_y_load_1_reg_749 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_3_fu_541_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_3_reg_757 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal zext_ln25_fu_547_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln25_reg_762 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln24_fu_535_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_420_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_777 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal grp_fu_424_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_782 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_428_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_reg_787 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_432_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_reg_792 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_462_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_assign_reg_797 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal grp_fu_465_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_assign_1_reg_802 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_468_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_assign_2_reg_807 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_471_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_assign_3_reg_812 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_pow_generic_double_s_fu_304_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_reg_817 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state85 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state85 : signal is "none";
    signal grp_pow_generic_double_s_fu_333_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i4_reg_822 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_pow_generic_double_s_fu_362_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i5_reg_827 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_pow_generic_double_s_fu_391_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i6_reg_832 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_478_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_reg_837 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state90 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state90 : signal is "none";
    signal grp_fu_482_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_reg_842 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_456_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal min_distance_reg_847 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state92 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state92 : signal is "none";
    signal grp_fu_459_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal distance_reg_853 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln29_fu_587_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_reg_859 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state93 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state93 : signal is "none";
    signal icmp_ln29_1_fu_593_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_1_reg_864 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_2_fu_599_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_2_reg_869 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_3_fu_605_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_3_reg_874 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_4_fu_638_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_4_reg_882 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state95 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state95 : signal is "none";
    signal j_fu_650_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_reg_890 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state96 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state96 : signal is "none";
    signal icmp_ln43_fu_644_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_fu_663_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_reg_910 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln44_fu_673_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln44_reg_914 : STD_LOGIC_VECTOR (0 downto 0);
    signal count_1_fu_685_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal count_1_reg_920 : STD_LOGIC_VECTOR (31 downto 0);
    signal mean_value_y_1_fu_693_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state102 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state102 : signal is "none";
    signal mean_value_x_1_fu_700_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_450_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_reg_935 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state107 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state107 : signal is "none";
    signal data_cluster_id_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal data_cluster_id_ce0 : STD_LOGIC;
    signal data_cluster_id_we0 : STD_LOGIC;
    signal data_cluster_id_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal data_cluster_id_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pow_generic_double_s_fu_304_ap_start : STD_LOGIC;
    signal grp_pow_generic_double_s_fu_304_ap_done : STD_LOGIC;
    signal grp_pow_generic_double_s_fu_304_ap_idle : STD_LOGIC;
    signal grp_pow_generic_double_s_fu_304_ap_ready : STD_LOGIC;
    signal grp_pow_generic_double_s_fu_333_ap_start : STD_LOGIC;
    signal grp_pow_generic_double_s_fu_333_ap_done : STD_LOGIC;
    signal grp_pow_generic_double_s_fu_333_ap_idle : STD_LOGIC;
    signal grp_pow_generic_double_s_fu_333_ap_ready : STD_LOGIC;
    signal grp_pow_generic_double_s_fu_362_ap_start : STD_LOGIC;
    signal grp_pow_generic_double_s_fu_362_ap_done : STD_LOGIC;
    signal grp_pow_generic_double_s_fu_362_ap_idle : STD_LOGIC;
    signal grp_pow_generic_double_s_fu_362_ap_ready : STD_LOGIC;
    signal grp_pow_generic_double_s_fu_391_ap_start : STD_LOGIC;
    signal grp_pow_generic_double_s_fu_391_ap_done : STD_LOGIC;
    signal grp_pow_generic_double_s_fu_391_ap_idle : STD_LOGIC;
    signal grp_pow_generic_double_s_fu_391_ap_ready : STD_LOGIC;
    signal i_0_reg_211 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal interation_0_reg_223 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln38_fu_632_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_fu_505_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_reg_234 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state94 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state94 : signal is "none";
    signal i_2_reg_245 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state123 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state123 : signal is "none";
    signal mean_value_y_0_reg_257 : STD_LOGIC_VECTOR (31 downto 0);
    signal mean_value_x_0_reg_269 : STD_LOGIC_VECTOR (31 downto 0);
    signal count_0_reg_281 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_1_reg_293 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_pow_generic_double_s_fu_304_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (122 downto 0);
    signal ap_NS_fsm_state19 : STD_LOGIC;
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal grp_pow_generic_double_s_fu_333_ap_start_reg : STD_LOGIC := '0';
    signal grp_pow_generic_double_s_fu_362_ap_start_reg : STD_LOGIC := '0';
    signal grp_pow_generic_double_s_fu_391_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln14_fu_517_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln44_fu_656_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln52_fu_707_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_438_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_444_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_420_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_420_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state98 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state98 : signal is "none";
    signal grp_fu_424_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_424_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state108 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state108 : signal is "none";
    signal grp_fu_450_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state91 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state91 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state86 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state86 : signal is "none";
    signal bitcast_ln29_fu_553_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln29_1_fu_570_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_556_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln29_fu_566_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_3_fu_573_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln29_1_fu_583_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_ln29_fu_611_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln29_1_fu_615_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln29_fu_619_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_474_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln44_1_fu_669_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal count_fu_679_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_420_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_424_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln21_fu_523_p2 : STD_LOGIC_VECTOR (0 downto 0);

    component pow_generic_double_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        base_r : IN STD_LOGIC_VECTOR (63 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component kmeans_faddfsub_3CeG IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kmeans_fsub_32ns_DeQ IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kmeans_fdiv_32ns_Ee0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kmeans_sitofp_32nFfa IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kmeans_fptrunc_64Gfk IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kmeans_fpext_32nsHfu IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component kmeans_fcmp_32ns_IfE IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component kmeans_dadd_64ns_JfO IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component kmeans_x_data IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kmeans_y_data IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component kmeans_data_clustBew IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    x_data_U : component kmeans_x_data
    generic map (
        DataWidth => 32,
        AddressRange => 50,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => x_data_address0,
        ce0 => x_data_ce0,
        q0 => x_data_q0);

    y_data_U : component kmeans_y_data
    generic map (
        DataWidth => 32,
        AddressRange => 50,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => y_data_address0,
        ce0 => y_data_ce0,
        q0 => y_data_q0);

    data_cluster_id_U : component kmeans_data_clustBew
    generic map (
        DataWidth => 1,
        AddressRange => 50,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => data_cluster_id_address0,
        ce0 => data_cluster_id_ce0,
        we0 => data_cluster_id_we0,
        d0 => data_cluster_id_d0,
        q0 => data_cluster_id_q0);

    grp_pow_generic_double_s_fu_304 : component pow_generic_double_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_pow_generic_double_s_fu_304_ap_start,
        ap_done => grp_pow_generic_double_s_fu_304_ap_done,
        ap_idle => grp_pow_generic_double_s_fu_304_ap_idle,
        ap_ready => grp_pow_generic_double_s_fu_304_ap_ready,
        base_r => x_assign_reg_797,
        ap_return => grp_pow_generic_double_s_fu_304_ap_return);

    grp_pow_generic_double_s_fu_333 : component pow_generic_double_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_pow_generic_double_s_fu_333_ap_start,
        ap_done => grp_pow_generic_double_s_fu_333_ap_done,
        ap_idle => grp_pow_generic_double_s_fu_333_ap_idle,
        ap_ready => grp_pow_generic_double_s_fu_333_ap_ready,
        base_r => x_assign_1_reg_802,
        ap_return => grp_pow_generic_double_s_fu_333_ap_return);

    grp_pow_generic_double_s_fu_362 : component pow_generic_double_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_pow_generic_double_s_fu_362_ap_start,
        ap_done => grp_pow_generic_double_s_fu_362_ap_done,
        ap_idle => grp_pow_generic_double_s_fu_362_ap_idle,
        ap_ready => grp_pow_generic_double_s_fu_362_ap_ready,
        base_r => x_assign_2_reg_807,
        ap_return => grp_pow_generic_double_s_fu_362_ap_return);

    grp_pow_generic_double_s_fu_391 : component pow_generic_double_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_pow_generic_double_s_fu_391_ap_start,
        ap_done => grp_pow_generic_double_s_fu_391_ap_done,
        ap_idle => grp_pow_generic_double_s_fu_391_ap_idle,
        ap_ready => grp_pow_generic_double_s_fu_391_ap_ready,
        base_r => x_assign_3_reg_812,
        ap_return => grp_pow_generic_double_s_fu_391_ap_return);

    kmeans_faddfsub_3CeG_U42 : component kmeans_faddfsub_3CeG
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_420_p0,
        din1 => grp_fu_420_p1,
        opcode => grp_fu_420_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_420_p2);

    kmeans_faddfsub_3CeG_U43 : component kmeans_faddfsub_3CeG
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_424_p0,
        din1 => grp_fu_424_p1,
        opcode => grp_fu_424_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_424_p2);

    kmeans_fsub_32ns_DeQ_U44 : component kmeans_fsub_32ns_DeQ
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_486,
        din1 => centroids_x_load_1_reg_744,
        ce => ap_const_logic_1,
        dout => grp_fu_428_p2);

    kmeans_fsub_32ns_DeQ_U45 : component kmeans_fsub_32ns_DeQ
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_493,
        din1 => centroids_y_load_1_reg_749,
        ce => ap_const_logic_1,
        dout => grp_fu_432_p2);

    kmeans_fdiv_32ns_Ee0_U46 : component kmeans_fdiv_32ns_Ee0
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => mean_value_x_0_reg_269,
        din1 => tmp_8_reg_935,
        ce => ap_const_logic_1,
        dout => grp_fu_438_p2);

    kmeans_fdiv_32ns_Ee0_U47 : component kmeans_fdiv_32ns_Ee0
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => mean_value_y_0_reg_257,
        din1 => tmp_8_reg_935,
        ce => ap_const_logic_1,
        dout => grp_fu_444_p2);

    kmeans_sitofp_32nFfa_U48 : component kmeans_sitofp_32nFfa
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_450_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_450_p1);

    kmeans_fptrunc_64Gfk_U49 : component kmeans_fptrunc_64Gfk
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_4_reg_837,
        ce => ap_const_logic_1,
        dout => grp_fu_456_p1);

    kmeans_fptrunc_64Gfk_U50 : component kmeans_fptrunc_64Gfk
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_9_reg_842,
        ce => ap_const_logic_1,
        dout => grp_fu_459_p1);

    kmeans_fpext_32nsHfu_U51 : component kmeans_fpext_32nsHfu
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_s_reg_777,
        ce => ap_const_logic_1,
        dout => grp_fu_462_p1);

    kmeans_fpext_32nsHfu_U52 : component kmeans_fpext_32nsHfu
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_2_reg_782,
        ce => ap_const_logic_1,
        dout => grp_fu_465_p1);

    kmeans_fpext_32nsHfu_U53 : component kmeans_fpext_32nsHfu
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_5_reg_787,
        ce => ap_const_logic_1,
        dout => grp_fu_468_p1);

    kmeans_fpext_32nsHfu_U54 : component kmeans_fpext_32nsHfu
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_7_reg_792,
        ce => ap_const_logic_1,
        dout => grp_fu_471_p1);

    kmeans_fcmp_32ns_IfE_U55 : component kmeans_fcmp_32ns_IfE
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => distance_reg_853,
        din1 => min_distance_reg_847,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_4,
        dout => grp_fu_474_p2);

    kmeans_dadd_64ns_JfO_U56 : component kmeans_dadd_64ns_JfO
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_i_reg_817,
        din1 => tmp_i4_reg_822,
        ce => ap_const_logic_1,
        dout => grp_fu_478_p2);

    kmeans_dadd_64ns_JfO_U57 : component kmeans_dadd_64ns_JfO
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_i5_reg_827,
        din1 => tmp_i6_reg_832,
        ce => ap_const_logic_1,
        dout => grp_fu_482_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_pow_generic_double_s_fu_304_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_pow_generic_double_s_fu_304_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_NS_fsm_state19) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                    grp_pow_generic_double_s_fu_304_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_pow_generic_double_s_fu_304_ap_ready = ap_const_logic_1)) then 
                    grp_pow_generic_double_s_fu_304_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_pow_generic_double_s_fu_333_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_pow_generic_double_s_fu_333_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_NS_fsm_state19) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                    grp_pow_generic_double_s_fu_333_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_pow_generic_double_s_fu_333_ap_ready = ap_const_logic_1)) then 
                    grp_pow_generic_double_s_fu_333_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_pow_generic_double_s_fu_362_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_pow_generic_double_s_fu_362_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_NS_fsm_state19) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                    grp_pow_generic_double_s_fu_362_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_pow_generic_double_s_fu_362_ap_ready = ap_const_logic_1)) then 
                    grp_pow_generic_double_s_fu_362_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_pow_generic_double_s_fu_391_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_pow_generic_double_s_fu_391_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_NS_fsm_state19) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                    grp_pow_generic_double_s_fu_391_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_pow_generic_double_s_fu_391_ap_ready = ap_const_logic_1)) then 
                    grp_pow_generic_double_s_fu_391_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    count_0_reg_281_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln38_fu_632_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state95))) then 
                count_0_reg_281 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state102)) then 
                count_0_reg_281 <= count_1_reg_920;
            end if; 
        end if;
    end process;

    i_0_reg_211_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                i_0_reg_211 <= i_reg_721;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_211 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    i_1_reg_234_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                i_1_reg_234 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state94)) then 
                i_1_reg_234 <= i_3_reg_757;
            end if; 
        end if;
    end process;

    i_2_reg_245_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_fu_535_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                i_2_reg_245 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state123)) then 
                i_2_reg_245 <= i_4_reg_882;
            end if; 
        end if;
    end process;

    interation_0_reg_223_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln13_fu_505_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                interation_0_reg_223 <= ap_const_lv7_0;
            elsif (((icmp_ln38_fu_632_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state95))) then 
                interation_0_reg_223 <= interation_reg_729;
            end if; 
        end if;
    end process;

    j_1_reg_293_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln38_fu_632_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state95))) then 
                j_1_reg_293 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state102)) then 
                j_1_reg_293 <= j_reg_890;
            end if; 
        end if;
    end process;

    mean_value_x_0_reg_269_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln38_fu_632_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state95))) then 
                mean_value_x_0_reg_269 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state102)) then 
                mean_value_x_0_reg_269 <= mean_value_x_1_fu_700_p3;
            end if; 
        end if;
    end process;

    mean_value_y_0_reg_257_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln38_fu_632_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state95))) then 
                mean_value_y_0_reg_257 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state102)) then 
                mean_value_y_0_reg_257 <= mean_value_y_1_fu_693_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                centroids_x_load_1_reg_744 <= centroids_x_q1;
                centroids_x_load_reg_734 <= centroids_x_q0;
                centroids_y_load_1_reg_749 <= centroids_y_q1;
                centroids_y_load_reg_739 <= centroids_y_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state97)) then
                count_1_reg_920 <= count_1_fu_685_p3;
                icmp_ln44_reg_914 <= icmp_ln44_fu_673_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state92)) then
                distance_reg_853 <= grp_fu_459_p1;
                min_distance_reg_847 <= grp_fu_456_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                i_3_reg_757 <= i_3_fu_541_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state95)) then
                i_4_reg_882 <= i_4_fu_638_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_721 <= i_fu_511_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state93)) then
                icmp_ln29_1_reg_864 <= icmp_ln29_1_fu_593_p2;
                icmp_ln29_2_reg_869 <= icmp_ln29_2_fu_599_p2;
                icmp_ln29_3_reg_874 <= icmp_ln29_3_fu_605_p2;
                icmp_ln29_reg_859 <= icmp_ln29_fu_587_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln43_fu_644_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state96))) then
                icmp_ln51_reg_910 <= icmp_ln51_fu_663_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                interation_reg_729 <= interation_fu_529_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state96)) then
                j_reg_890 <= j_fu_650_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state11))) then
                reg_486 <= x_data_q0;
                reg_493 <= y_data_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                tmp_2_reg_782 <= grp_fu_424_p2;
                tmp_5_reg_787 <= grp_fu_428_p2;
                tmp_7_reg_792 <= grp_fu_432_p2;
                tmp_s_reg_777 <= grp_fu_420_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state90)) then
                tmp_4_reg_837 <= grp_fu_478_p2;
                tmp_9_reg_842 <= grp_fu_482_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state107)) then
                tmp_8_reg_935 <= grp_fu_450_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state85)) then
                tmp_i4_reg_822 <= grp_pow_generic_double_s_fu_333_ap_return;
                tmp_i5_reg_827 <= grp_pow_generic_double_s_fu_362_ap_return;
                tmp_i6_reg_832 <= grp_pow_generic_double_s_fu_391_ap_return;
                tmp_i_reg_817 <= grp_pow_generic_double_s_fu_304_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                x_assign_1_reg_802 <= grp_fu_465_p1;
                x_assign_2_reg_807 <= grp_fu_468_p1;
                x_assign_3_reg_812 <= grp_fu_471_p1;
                x_assign_reg_797 <= grp_fu_462_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_fu_535_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    zext_ln25_reg_762(5 downto 0) <= zext_ln25_fu_547_p1(5 downto 0);
            end if;
        end if;
    end process;
    zext_ln25_reg_762(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state8, ap_CS_fsm_state10, icmp_ln24_fu_535_p2, ap_CS_fsm_state95, ap_CS_fsm_state96, icmp_ln43_fu_644_p2, icmp_ln51_fu_663_p2, icmp_ln38_fu_632_p2, icmp_ln13_fu_505_p2, icmp_ln21_fu_523_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln13_fu_505_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state8 => 
                if (((icmp_ln21_fu_523_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((icmp_ln24_fu_535_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state95;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state93;
            when ap_ST_fsm_state93 => 
                ap_NS_fsm <= ap_ST_fsm_state94;
            when ap_ST_fsm_state94 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state95 => 
                if (((icmp_ln38_fu_632_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state95))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state96;
                end if;
            when ap_ST_fsm_state96 => 
                if (((icmp_ln51_fu_663_p2 = ap_const_lv1_1) and (icmp_ln43_fu_644_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state96))) then
                    ap_NS_fsm <= ap_ST_fsm_state123;
                elsif (((icmp_ln43_fu_644_p2 = ap_const_lv1_1) and (icmp_ln51_fu_663_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state96))) then
                    ap_NS_fsm <= ap_ST_fsm_state103;
                else
                    ap_NS_fsm <= ap_ST_fsm_state97;
                end if;
            when ap_ST_fsm_state97 => 
                ap_NS_fsm <= ap_ST_fsm_state98;
            when ap_ST_fsm_state98 => 
                ap_NS_fsm <= ap_ST_fsm_state99;
            when ap_ST_fsm_state99 => 
                ap_NS_fsm <= ap_ST_fsm_state100;
            when ap_ST_fsm_state100 => 
                ap_NS_fsm <= ap_ST_fsm_state101;
            when ap_ST_fsm_state101 => 
                ap_NS_fsm <= ap_ST_fsm_state102;
            when ap_ST_fsm_state102 => 
                ap_NS_fsm <= ap_ST_fsm_state96;
            when ap_ST_fsm_state103 => 
                ap_NS_fsm <= ap_ST_fsm_state104;
            when ap_ST_fsm_state104 => 
                ap_NS_fsm <= ap_ST_fsm_state105;
            when ap_ST_fsm_state105 => 
                ap_NS_fsm <= ap_ST_fsm_state106;
            when ap_ST_fsm_state106 => 
                ap_NS_fsm <= ap_ST_fsm_state107;
            when ap_ST_fsm_state107 => 
                ap_NS_fsm <= ap_ST_fsm_state108;
            when ap_ST_fsm_state108 => 
                ap_NS_fsm <= ap_ST_fsm_state109;
            when ap_ST_fsm_state109 => 
                ap_NS_fsm <= ap_ST_fsm_state110;
            when ap_ST_fsm_state110 => 
                ap_NS_fsm <= ap_ST_fsm_state111;
            when ap_ST_fsm_state111 => 
                ap_NS_fsm <= ap_ST_fsm_state112;
            when ap_ST_fsm_state112 => 
                ap_NS_fsm <= ap_ST_fsm_state113;
            when ap_ST_fsm_state113 => 
                ap_NS_fsm <= ap_ST_fsm_state114;
            when ap_ST_fsm_state114 => 
                ap_NS_fsm <= ap_ST_fsm_state115;
            when ap_ST_fsm_state115 => 
                ap_NS_fsm <= ap_ST_fsm_state116;
            when ap_ST_fsm_state116 => 
                ap_NS_fsm <= ap_ST_fsm_state117;
            when ap_ST_fsm_state117 => 
                ap_NS_fsm <= ap_ST_fsm_state118;
            when ap_ST_fsm_state118 => 
                ap_NS_fsm <= ap_ST_fsm_state119;
            when ap_ST_fsm_state119 => 
                ap_NS_fsm <= ap_ST_fsm_state120;
            when ap_ST_fsm_state120 => 
                ap_NS_fsm <= ap_ST_fsm_state121;
            when ap_ST_fsm_state121 => 
                ap_NS_fsm <= ap_ST_fsm_state122;
            when ap_ST_fsm_state122 => 
                ap_NS_fsm <= ap_ST_fsm_state123;
            when ap_ST_fsm_state123 => 
                ap_NS_fsm <= ap_ST_fsm_state95;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    and_ln29_fu_619_p2 <= (or_ln29_fu_611_p2 and or_ln29_1_fu_615_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state102 <= ap_CS_fsm(101);
    ap_CS_fsm_state107 <= ap_CS_fsm(106);
    ap_CS_fsm_state108 <= ap_CS_fsm(107);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state123 <= ap_CS_fsm(122);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state85 <= ap_CS_fsm(84);
    ap_CS_fsm_state86 <= ap_CS_fsm(85);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_CS_fsm_state90 <= ap_CS_fsm(89);
    ap_CS_fsm_state91 <= ap_CS_fsm(90);
    ap_CS_fsm_state92 <= ap_CS_fsm(91);
    ap_CS_fsm_state93 <= ap_CS_fsm(92);
    ap_CS_fsm_state94 <= ap_CS_fsm(93);
    ap_CS_fsm_state95 <= ap_CS_fsm(94);
    ap_CS_fsm_state96 <= ap_CS_fsm(95);
    ap_CS_fsm_state97 <= ap_CS_fsm(96);
    ap_CS_fsm_state98 <= ap_CS_fsm(97);
    ap_NS_fsm_state19 <= ap_NS_fsm(18);

    ap_done_assign_proc : process(ap_CS_fsm_state8, icmp_ln21_fu_523_p2)
    begin
        if (((icmp_ln21_fu_523_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state8, icmp_ln21_fu_523_p2)
    begin
        if (((icmp_ln21_fu_523_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln29_1_fu_570_p1 <= min_distance_reg_847;
    bitcast_ln29_fu_553_p1 <= distance_reg_853;

    centroids_x_address0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state7, zext_ln14_fu_517_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            centroids_x_address0 <= ap_const_lv1_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            centroids_x_address0 <= zext_ln14_fu_517_p1(1 - 1 downto 0);
        else 
            centroids_x_address0 <= "X";
        end if; 
    end process;


    centroids_x_address1_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state123, zext_ln52_fu_707_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state123)) then 
            centroids_x_address1 <= zext_ln52_fu_707_p1(1 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            centroids_x_address1 <= ap_const_lv1_1;
        else 
            centroids_x_address1 <= "X";
        end if; 
    end process;


    centroids_x_ce0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            centroids_x_ce0 <= ap_const_logic_1;
        else 
            centroids_x_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    centroids_x_ce1_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state123)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state123) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            centroids_x_ce1 <= ap_const_logic_1;
        else 
            centroids_x_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    centroids_x_d0 <= grp_fu_450_p1;
    centroids_x_d1 <= grp_fu_438_p2;

    centroids_x_we0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            centroids_x_we0 <= ap_const_logic_1;
        else 
            centroids_x_we0 <= ap_const_logic_0;
        end if; 
    end process;


    centroids_x_we1_assign_proc : process(icmp_ln51_reg_910, ap_CS_fsm_state123)
    begin
        if (((icmp_ln51_reg_910 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state123))) then 
            centroids_x_we1 <= ap_const_logic_1;
        else 
            centroids_x_we1 <= ap_const_logic_0;
        end if; 
    end process;


    centroids_y_address0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state7, zext_ln14_fu_517_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            centroids_y_address0 <= ap_const_lv1_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            centroids_y_address0 <= zext_ln14_fu_517_p1(1 - 1 downto 0);
        else 
            centroids_y_address0 <= "X";
        end if; 
    end process;


    centroids_y_address1_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state123, zext_ln52_fu_707_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state123)) then 
            centroids_y_address1 <= zext_ln52_fu_707_p1(1 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            centroids_y_address1 <= ap_const_lv1_1;
        else 
            centroids_y_address1 <= "X";
        end if; 
    end process;


    centroids_y_ce0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            centroids_y_ce0 <= ap_const_logic_1;
        else 
            centroids_y_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    centroids_y_ce1_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state123)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state123) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            centroids_y_ce1 <= ap_const_logic_1;
        else 
            centroids_y_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    centroids_y_d0 <= grp_fu_450_p1;
    centroids_y_d1 <= grp_fu_444_p2;

    centroids_y_we0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            centroids_y_we0 <= ap_const_logic_1;
        else 
            centroids_y_we0 <= ap_const_logic_0;
        end if; 
    end process;


    centroids_y_we1_assign_proc : process(icmp_ln51_reg_910, ap_CS_fsm_state123)
    begin
        if (((icmp_ln51_reg_910 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state123))) then 
            centroids_y_we1 <= ap_const_logic_1;
        else 
            centroids_y_we1 <= ap_const_logic_0;
        end if; 
    end process;

    count_1_fu_685_p3 <= 
        count_fu_679_p2 when (icmp_ln44_fu_673_p2(0) = '1') else 
        count_0_reg_281;
    count_fu_679_p2 <= std_logic_vector(unsigned(count_0_reg_281) + unsigned(ap_const_lv32_1));

    data_cluster_id_address0_assign_proc : process(zext_ln25_reg_762, ap_CS_fsm_state96, ap_CS_fsm_state94, zext_ln44_fu_656_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            data_cluster_id_address0 <= zext_ln44_fu_656_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state94)) then 
            data_cluster_id_address0 <= zext_ln25_reg_762(6 - 1 downto 0);
        else 
            data_cluster_id_address0 <= "XXXXXX";
        end if; 
    end process;


    data_cluster_id_ce0_assign_proc : process(ap_CS_fsm_state96, ap_CS_fsm_state94)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state96))) then 
            data_cluster_id_ce0 <= ap_const_logic_1;
        else 
            data_cluster_id_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    data_cluster_id_d0 <= (grp_fu_474_p2 and and_ln29_fu_619_p2);

    data_cluster_id_we0_assign_proc : process(ap_CS_fsm_state94)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state94)) then 
            data_cluster_id_we0 <= ap_const_logic_1;
        else 
            data_cluster_id_we0 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_420_opcode_assign_proc : process(icmp_ln44_reg_914, ap_CS_fsm_state12, ap_CS_fsm_state98)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_420_opcode <= ap_const_lv2_1;
        elsif (((icmp_ln44_reg_914 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state98))) then 
            grp_fu_420_opcode <= ap_const_lv2_0;
        else 
            grp_fu_420_opcode <= "XX";
        end if; 
    end process;


    grp_fu_420_p0_assign_proc : process(reg_486, mean_value_x_0_reg_269, ap_CS_fsm_state12, ap_CS_fsm_state98)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state98)) then 
            grp_fu_420_p0 <= mean_value_x_0_reg_269;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_420_p0 <= reg_486;
        else 
            grp_fu_420_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_420_p1_assign_proc : process(reg_486, centroids_x_load_reg_734, ap_CS_fsm_state12, ap_CS_fsm_state98)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state98)) then 
            grp_fu_420_p1 <= reg_486;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_420_p1 <= centroids_x_load_reg_734;
        else 
            grp_fu_420_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_424_opcode_assign_proc : process(icmp_ln44_reg_914, ap_CS_fsm_state12, ap_CS_fsm_state98)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_424_opcode <= ap_const_lv2_1;
        elsif (((icmp_ln44_reg_914 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state98))) then 
            grp_fu_424_opcode <= ap_const_lv2_0;
        else 
            grp_fu_424_opcode <= "XX";
        end if; 
    end process;


    grp_fu_424_p0_assign_proc : process(reg_493, mean_value_y_0_reg_257, ap_CS_fsm_state12, ap_CS_fsm_state98)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state98)) then 
            grp_fu_424_p0 <= mean_value_y_0_reg_257;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_424_p0 <= reg_493;
        else 
            grp_fu_424_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_424_p1_assign_proc : process(reg_493, centroids_y_load_reg_739, ap_CS_fsm_state12, ap_CS_fsm_state98)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state98)) then 
            grp_fu_424_p1 <= reg_493;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_424_p1 <= centroids_y_load_reg_739;
        else 
            grp_fu_424_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_450_p0_assign_proc : process(zext_ln13_fu_500_p1, ap_CS_fsm_state2, ap_CS_fsm_state96, count_0_reg_281)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            grp_fu_450_p0 <= count_0_reg_281;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_450_p0 <= zext_ln13_fu_500_p1;
        else 
            grp_fu_450_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_pow_generic_double_s_fu_304_ap_start <= grp_pow_generic_double_s_fu_304_ap_start_reg;
    grp_pow_generic_double_s_fu_333_ap_start <= grp_pow_generic_double_s_fu_333_ap_start_reg;
    grp_pow_generic_double_s_fu_362_ap_start <= grp_pow_generic_double_s_fu_362_ap_start_reg;
    grp_pow_generic_double_s_fu_391_ap_start <= grp_pow_generic_double_s_fu_391_ap_start_reg;
    i_3_fu_541_p2 <= std_logic_vector(unsigned(i_1_reg_234) + unsigned(ap_const_lv6_1));
    i_4_fu_638_p2 <= std_logic_vector(unsigned(i_2_reg_245) + unsigned(ap_const_lv2_1));
    i_fu_511_p2 <= std_logic_vector(unsigned(i_0_reg_211) + unsigned(ap_const_lv2_1));
    icmp_ln13_fu_505_p2 <= "1" when (i_0_reg_211 = ap_const_lv2_2) else "0";
    icmp_ln21_fu_523_p2 <= "1" when (interation_0_reg_223 = ap_const_lv7_64) else "0";
    icmp_ln24_fu_535_p2 <= "1" when (i_1_reg_234 = ap_const_lv6_32) else "0";
    icmp_ln29_1_fu_593_p2 <= "1" when (trunc_ln29_fu_566_p1 = ap_const_lv23_0) else "0";
    icmp_ln29_2_fu_599_p2 <= "0" when (tmp_3_fu_573_p4 = ap_const_lv8_FF) else "1";
    icmp_ln29_3_fu_605_p2 <= "1" when (trunc_ln29_1_fu_583_p1 = ap_const_lv23_0) else "0";
    icmp_ln29_fu_587_p2 <= "0" when (tmp_1_fu_556_p4 = ap_const_lv8_FF) else "1";
    icmp_ln38_fu_632_p2 <= "1" when (i_2_reg_245 = ap_const_lv2_2) else "0";
    icmp_ln43_fu_644_p2 <= "1" when (j_1_reg_293 = ap_const_lv6_32) else "0";
    icmp_ln44_fu_673_p2 <= "1" when (zext_ln44_1_fu_669_p1 = i_2_reg_245) else "0";
    icmp_ln51_fu_663_p2 <= "1" when (count_0_reg_281 = ap_const_lv32_0) else "0";
    interation_fu_529_p2 <= std_logic_vector(unsigned(interation_0_reg_223) + unsigned(ap_const_lv7_1));
    j_fu_650_p2 <= std_logic_vector(unsigned(j_1_reg_293) + unsigned(ap_const_lv6_1));
    mean_value_x_1_fu_700_p3 <= 
        grp_fu_420_p2 when (icmp_ln44_reg_914(0) = '1') else 
        mean_value_x_0_reg_269;
    mean_value_y_1_fu_693_p3 <= 
        grp_fu_424_p2 when (icmp_ln44_reg_914(0) = '1') else 
        mean_value_y_0_reg_257;
    or_ln29_1_fu_615_p2 <= (icmp_ln29_3_reg_874 or icmp_ln29_2_reg_869);
    or_ln29_fu_611_p2 <= (icmp_ln29_reg_859 or icmp_ln29_1_reg_864);
    tmp_1_fu_556_p4 <= bitcast_ln29_fu_553_p1(30 downto 23);
    tmp_3_fu_573_p4 <= bitcast_ln29_1_fu_570_p1(30 downto 23);
    trunc_ln29_1_fu_583_p1 <= bitcast_ln29_1_fu_570_p1(23 - 1 downto 0);
    trunc_ln29_fu_566_p1 <= bitcast_ln29_fu_553_p1(23 - 1 downto 0);

    x_data_address0_assign_proc : process(ap_CS_fsm_state10, zext_ln25_fu_547_p1, ap_CS_fsm_state96, zext_ln44_fu_656_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            x_data_address0 <= zext_ln44_fu_656_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            x_data_address0 <= zext_ln25_fu_547_p1(6 - 1 downto 0);
        else 
            x_data_address0 <= "XXXXXX";
        end if; 
    end process;


    x_data_ce0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state96)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            x_data_ce0 <= ap_const_logic_1;
        else 
            x_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    y_data_address0_assign_proc : process(ap_CS_fsm_state10, zext_ln25_fu_547_p1, ap_CS_fsm_state96, zext_ln44_fu_656_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            y_data_address0 <= zext_ln44_fu_656_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            y_data_address0 <= zext_ln25_fu_547_p1(6 - 1 downto 0);
        else 
            y_data_address0 <= "XXXXXX";
        end if; 
    end process;


    y_data_ce0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state96)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            y_data_ce0 <= ap_const_logic_1;
        else 
            y_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln13_fu_500_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_211),32));
    zext_ln14_fu_517_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_211),64));
    zext_ln25_fu_547_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_234),64));
    zext_ln44_1_fu_669_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data_cluster_id_q0),2));
    zext_ln44_fu_656_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_1_reg_293),64));
    zext_ln52_fu_707_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_245),64));
end behav;
