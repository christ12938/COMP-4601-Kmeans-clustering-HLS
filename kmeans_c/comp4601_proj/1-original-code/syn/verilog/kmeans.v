// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="kmeans,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.514000,HLS_SYN_LAT=498014,HLS_SYN_TPT=none,HLS_SYN_MEM=270,HLS_SYN_DSP=294,HLS_SYN_FF=83065,HLS_SYN_LUT=41844,HLS_VERSION=2020_1}" *)

module kmeans (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        centroids_x_address0,
        centroids_x_ce0,
        centroids_x_we0,
        centroids_x_d0,
        centroids_x_q0,
        centroids_x_address1,
        centroids_x_ce1,
        centroids_x_we1,
        centroids_x_d1,
        centroids_x_q1,
        centroids_y_address0,
        centroids_y_ce0,
        centroids_y_we0,
        centroids_y_d0,
        centroids_y_q0,
        centroids_y_address1,
        centroids_y_ce1,
        centroids_y_we1,
        centroids_y_d1,
        centroids_y_q1
);

parameter    ap_ST_fsm_state1 = 123'd1;
parameter    ap_ST_fsm_state2 = 123'd2;
parameter    ap_ST_fsm_state3 = 123'd4;
parameter    ap_ST_fsm_state4 = 123'd8;
parameter    ap_ST_fsm_state5 = 123'd16;
parameter    ap_ST_fsm_state6 = 123'd32;
parameter    ap_ST_fsm_state7 = 123'd64;
parameter    ap_ST_fsm_state8 = 123'd128;
parameter    ap_ST_fsm_state9 = 123'd256;
parameter    ap_ST_fsm_state10 = 123'd512;
parameter    ap_ST_fsm_state11 = 123'd1024;
parameter    ap_ST_fsm_state12 = 123'd2048;
parameter    ap_ST_fsm_state13 = 123'd4096;
parameter    ap_ST_fsm_state14 = 123'd8192;
parameter    ap_ST_fsm_state15 = 123'd16384;
parameter    ap_ST_fsm_state16 = 123'd32768;
parameter    ap_ST_fsm_state17 = 123'd65536;
parameter    ap_ST_fsm_state18 = 123'd131072;
parameter    ap_ST_fsm_state19 = 123'd262144;
parameter    ap_ST_fsm_state20 = 123'd524288;
parameter    ap_ST_fsm_state21 = 123'd1048576;
parameter    ap_ST_fsm_state22 = 123'd2097152;
parameter    ap_ST_fsm_state23 = 123'd4194304;
parameter    ap_ST_fsm_state24 = 123'd8388608;
parameter    ap_ST_fsm_state25 = 123'd16777216;
parameter    ap_ST_fsm_state26 = 123'd33554432;
parameter    ap_ST_fsm_state27 = 123'd67108864;
parameter    ap_ST_fsm_state28 = 123'd134217728;
parameter    ap_ST_fsm_state29 = 123'd268435456;
parameter    ap_ST_fsm_state30 = 123'd536870912;
parameter    ap_ST_fsm_state31 = 123'd1073741824;
parameter    ap_ST_fsm_state32 = 123'd2147483648;
parameter    ap_ST_fsm_state33 = 123'd4294967296;
parameter    ap_ST_fsm_state34 = 123'd8589934592;
parameter    ap_ST_fsm_state35 = 123'd17179869184;
parameter    ap_ST_fsm_state36 = 123'd34359738368;
parameter    ap_ST_fsm_state37 = 123'd68719476736;
parameter    ap_ST_fsm_state38 = 123'd137438953472;
parameter    ap_ST_fsm_state39 = 123'd274877906944;
parameter    ap_ST_fsm_state40 = 123'd549755813888;
parameter    ap_ST_fsm_state41 = 123'd1099511627776;
parameter    ap_ST_fsm_state42 = 123'd2199023255552;
parameter    ap_ST_fsm_state43 = 123'd4398046511104;
parameter    ap_ST_fsm_state44 = 123'd8796093022208;
parameter    ap_ST_fsm_state45 = 123'd17592186044416;
parameter    ap_ST_fsm_state46 = 123'd35184372088832;
parameter    ap_ST_fsm_state47 = 123'd70368744177664;
parameter    ap_ST_fsm_state48 = 123'd140737488355328;
parameter    ap_ST_fsm_state49 = 123'd281474976710656;
parameter    ap_ST_fsm_state50 = 123'd562949953421312;
parameter    ap_ST_fsm_state51 = 123'd1125899906842624;
parameter    ap_ST_fsm_state52 = 123'd2251799813685248;
parameter    ap_ST_fsm_state53 = 123'd4503599627370496;
parameter    ap_ST_fsm_state54 = 123'd9007199254740992;
parameter    ap_ST_fsm_state55 = 123'd18014398509481984;
parameter    ap_ST_fsm_state56 = 123'd36028797018963968;
parameter    ap_ST_fsm_state57 = 123'd72057594037927936;
parameter    ap_ST_fsm_state58 = 123'd144115188075855872;
parameter    ap_ST_fsm_state59 = 123'd288230376151711744;
parameter    ap_ST_fsm_state60 = 123'd576460752303423488;
parameter    ap_ST_fsm_state61 = 123'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 123'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 123'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 123'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 123'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 123'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 123'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 123'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 123'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 123'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 123'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 123'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 123'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 123'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 123'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 123'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 123'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 123'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 123'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 123'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 123'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 123'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 123'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 123'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 123'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 123'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 123'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 123'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 123'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 123'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 123'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 123'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 123'd4951760157141521099596496896;
parameter    ap_ST_fsm_state94 = 123'd9903520314283042199192993792;
parameter    ap_ST_fsm_state95 = 123'd19807040628566084398385987584;
parameter    ap_ST_fsm_state96 = 123'd39614081257132168796771975168;
parameter    ap_ST_fsm_state97 = 123'd79228162514264337593543950336;
parameter    ap_ST_fsm_state98 = 123'd158456325028528675187087900672;
parameter    ap_ST_fsm_state99 = 123'd316912650057057350374175801344;
parameter    ap_ST_fsm_state100 = 123'd633825300114114700748351602688;
parameter    ap_ST_fsm_state101 = 123'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state102 = 123'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state103 = 123'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state104 = 123'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state105 = 123'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state106 = 123'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state107 = 123'd81129638414606681695789005144064;
parameter    ap_ST_fsm_state108 = 123'd162259276829213363391578010288128;
parameter    ap_ST_fsm_state109 = 123'd324518553658426726783156020576256;
parameter    ap_ST_fsm_state110 = 123'd649037107316853453566312041152512;
parameter    ap_ST_fsm_state111 = 123'd1298074214633706907132624082305024;
parameter    ap_ST_fsm_state112 = 123'd2596148429267413814265248164610048;
parameter    ap_ST_fsm_state113 = 123'd5192296858534827628530496329220096;
parameter    ap_ST_fsm_state114 = 123'd10384593717069655257060992658440192;
parameter    ap_ST_fsm_state115 = 123'd20769187434139310514121985316880384;
parameter    ap_ST_fsm_state116 = 123'd41538374868278621028243970633760768;
parameter    ap_ST_fsm_state117 = 123'd83076749736557242056487941267521536;
parameter    ap_ST_fsm_state118 = 123'd166153499473114484112975882535043072;
parameter    ap_ST_fsm_state119 = 123'd332306998946228968225951765070086144;
parameter    ap_ST_fsm_state120 = 123'd664613997892457936451903530140172288;
parameter    ap_ST_fsm_state121 = 123'd1329227995784915872903807060280344576;
parameter    ap_ST_fsm_state122 = 123'd2658455991569831745807614120560689152;
parameter    ap_ST_fsm_state123 = 123'd5316911983139663491615228241121378304;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [0:0] centroids_x_address0;
output   centroids_x_ce0;
output   centroids_x_we0;
output  [31:0] centroids_x_d0;
input  [31:0] centroids_x_q0;
output  [0:0] centroids_x_address1;
output   centroids_x_ce1;
output   centroids_x_we1;
output  [31:0] centroids_x_d1;
input  [31:0] centroids_x_q1;
output  [0:0] centroids_y_address0;
output   centroids_y_ce0;
output   centroids_y_we0;
output  [31:0] centroids_y_d0;
input  [31:0] centroids_y_q0;
output  [0:0] centroids_y_address1;
output   centroids_y_ce1;
output   centroids_y_we1;
output  [31:0] centroids_y_d1;
input  [31:0] centroids_y_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[0:0] centroids_x_address0;
reg centroids_x_ce0;
reg centroids_x_we0;
reg[0:0] centroids_x_address1;
reg centroids_x_ce1;
reg centroids_x_we1;
reg[0:0] centroids_y_address0;
reg centroids_y_ce0;
reg centroids_y_we0;
reg[0:0] centroids_y_address1;
reg centroids_y_ce1;
reg centroids_y_we1;

(* fsm_encoding = "none" *) reg   [122:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [5:0] x_data_address0;
reg    x_data_ce0;
wire   [31:0] x_data_q0;
reg   [5:0] y_data_address0;
reg    y_data_ce0;
wire   [31:0] y_data_q0;
reg   [31:0] reg_486;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state97;
reg   [31:0] reg_493;
wire   [31:0] zext_ln13_fu_500_p1;
wire    ap_CS_fsm_state2;
wire   [1:0] i_fu_511_p2;
reg   [1:0] i_reg_721;
wire   [6:0] interation_fu_529_p2;
reg   [6:0] interation_reg_729;
wire    ap_CS_fsm_state8;
reg   [31:0] centroids_x_load_reg_734;
wire    ap_CS_fsm_state9;
reg   [31:0] centroids_y_load_reg_739;
reg   [31:0] centroids_x_load_1_reg_744;
reg   [31:0] centroids_y_load_1_reg_749;
wire   [5:0] i_3_fu_541_p2;
reg   [5:0] i_3_reg_757;
wire    ap_CS_fsm_state10;
wire   [63:0] zext_ln25_fu_547_p1;
reg   [63:0] zext_ln25_reg_762;
wire   [0:0] icmp_ln24_fu_535_p2;
wire   [31:0] grp_fu_420_p2;
reg   [31:0] tmp_s_reg_777;
wire    ap_CS_fsm_state16;
wire   [31:0] grp_fu_424_p2;
reg   [31:0] tmp_2_reg_782;
wire   [31:0] grp_fu_428_p2;
reg   [31:0] tmp_5_reg_787;
wire   [31:0] grp_fu_432_p2;
reg   [31:0] tmp_7_reg_792;
wire   [63:0] grp_fu_462_p1;
reg   [63:0] x_assign_reg_797;
wire    ap_CS_fsm_state18;
wire   [63:0] grp_fu_465_p1;
reg   [63:0] x_assign_1_reg_802;
wire   [63:0] grp_fu_468_p1;
reg   [63:0] x_assign_2_reg_807;
wire   [63:0] grp_fu_471_p1;
reg   [63:0] x_assign_3_reg_812;
wire   [63:0] grp_pow_generic_double_s_fu_304_ap_return;
reg   [63:0] tmp_i_reg_817;
wire    ap_CS_fsm_state85;
wire   [63:0] grp_pow_generic_double_s_fu_333_ap_return;
reg   [63:0] tmp_i4_reg_822;
wire   [63:0] grp_pow_generic_double_s_fu_362_ap_return;
reg   [63:0] tmp_i5_reg_827;
wire   [63:0] grp_pow_generic_double_s_fu_391_ap_return;
reg   [63:0] tmp_i6_reg_832;
wire   [63:0] grp_fu_478_p2;
reg   [63:0] tmp_4_reg_837;
wire    ap_CS_fsm_state90;
wire   [63:0] grp_fu_482_p2;
reg   [63:0] tmp_9_reg_842;
wire   [31:0] grp_fu_456_p1;
reg   [31:0] min_distance_reg_847;
wire    ap_CS_fsm_state92;
wire   [31:0] grp_fu_459_p1;
reg   [31:0] distance_reg_853;
wire   [0:0] icmp_ln29_fu_587_p2;
reg   [0:0] icmp_ln29_reg_859;
wire    ap_CS_fsm_state93;
wire   [0:0] icmp_ln29_1_fu_593_p2;
reg   [0:0] icmp_ln29_1_reg_864;
wire   [0:0] icmp_ln29_2_fu_599_p2;
reg   [0:0] icmp_ln29_2_reg_869;
wire   [0:0] icmp_ln29_3_fu_605_p2;
reg   [0:0] icmp_ln29_3_reg_874;
wire   [1:0] i_4_fu_638_p2;
reg   [1:0] i_4_reg_882;
wire    ap_CS_fsm_state95;
wire   [5:0] j_fu_650_p2;
reg   [5:0] j_reg_890;
wire    ap_CS_fsm_state96;
wire   [0:0] icmp_ln43_fu_644_p2;
wire   [0:0] icmp_ln51_fu_663_p2;
reg   [0:0] icmp_ln51_reg_910;
wire   [0:0] icmp_ln44_fu_673_p2;
reg   [0:0] icmp_ln44_reg_914;
wire   [31:0] count_1_fu_685_p3;
reg   [31:0] count_1_reg_920;
wire   [31:0] mean_value_y_1_fu_693_p3;
wire    ap_CS_fsm_state102;
wire   [31:0] mean_value_x_1_fu_700_p3;
wire   [31:0] grp_fu_450_p1;
reg   [31:0] tmp_8_reg_935;
wire    ap_CS_fsm_state107;
reg   [5:0] data_cluster_id_address0;
reg    data_cluster_id_ce0;
reg    data_cluster_id_we0;
wire   [0:0] data_cluster_id_d0;
wire   [0:0] data_cluster_id_q0;
wire    grp_pow_generic_double_s_fu_304_ap_start;
wire    grp_pow_generic_double_s_fu_304_ap_done;
wire    grp_pow_generic_double_s_fu_304_ap_idle;
wire    grp_pow_generic_double_s_fu_304_ap_ready;
wire    grp_pow_generic_double_s_fu_333_ap_start;
wire    grp_pow_generic_double_s_fu_333_ap_done;
wire    grp_pow_generic_double_s_fu_333_ap_idle;
wire    grp_pow_generic_double_s_fu_333_ap_ready;
wire    grp_pow_generic_double_s_fu_362_ap_start;
wire    grp_pow_generic_double_s_fu_362_ap_done;
wire    grp_pow_generic_double_s_fu_362_ap_idle;
wire    grp_pow_generic_double_s_fu_362_ap_ready;
wire    grp_pow_generic_double_s_fu_391_ap_start;
wire    grp_pow_generic_double_s_fu_391_ap_done;
wire    grp_pow_generic_double_s_fu_391_ap_idle;
wire    grp_pow_generic_double_s_fu_391_ap_ready;
reg   [1:0] i_0_reg_211;
wire    ap_CS_fsm_state7;
reg   [6:0] interation_0_reg_223;
wire   [0:0] icmp_ln38_fu_632_p2;
wire   [0:0] icmp_ln13_fu_505_p2;
reg   [5:0] i_1_reg_234;
wire    ap_CS_fsm_state94;
reg   [1:0] i_2_reg_245;
wire    ap_CS_fsm_state123;
reg   [31:0] mean_value_y_0_reg_257;
reg   [31:0] mean_value_x_0_reg_269;
reg   [31:0] count_0_reg_281;
reg   [5:0] j_1_reg_293;
reg    grp_pow_generic_double_s_fu_304_ap_start_reg;
reg   [122:0] ap_NS_fsm;
wire    ap_NS_fsm_state19;
wire    ap_CS_fsm_state19;
reg    grp_pow_generic_double_s_fu_333_ap_start_reg;
reg    grp_pow_generic_double_s_fu_362_ap_start_reg;
reg    grp_pow_generic_double_s_fu_391_ap_start_reg;
wire   [63:0] zext_ln14_fu_517_p1;
wire   [63:0] zext_ln44_fu_656_p1;
wire   [63:0] zext_ln52_fu_707_p1;
wire   [31:0] grp_fu_438_p2;
wire   [31:0] grp_fu_444_p2;
reg   [31:0] grp_fu_420_p0;
reg   [31:0] grp_fu_420_p1;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state98;
reg   [31:0] grp_fu_424_p0;
reg   [31:0] grp_fu_424_p1;
wire    ap_CS_fsm_state108;
reg   [31:0] grp_fu_450_p0;
wire    ap_CS_fsm_state91;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state86;
wire   [31:0] bitcast_ln29_fu_553_p1;
wire   [31:0] bitcast_ln29_1_fu_570_p1;
wire   [7:0] tmp_1_fu_556_p4;
wire   [22:0] trunc_ln29_fu_566_p1;
wire   [7:0] tmp_3_fu_573_p4;
wire   [22:0] trunc_ln29_1_fu_583_p1;
wire   [0:0] or_ln29_fu_611_p2;
wire   [0:0] or_ln29_1_fu_615_p2;
wire   [0:0] and_ln29_fu_619_p2;
wire   [0:0] grp_fu_474_p2;
wire   [1:0] zext_ln44_1_fu_669_p1;
wire   [31:0] count_fu_679_p2;
reg   [1:0] grp_fu_420_opcode;
reg   [1:0] grp_fu_424_opcode;
wire   [0:0] icmp_ln21_fu_523_p2;

// power-on initialization
initial begin
#0 ap_CS_fsm = 123'd1;
#0 grp_pow_generic_double_s_fu_304_ap_start_reg = 1'b0;
#0 grp_pow_generic_double_s_fu_333_ap_start_reg = 1'b0;
#0 grp_pow_generic_double_s_fu_362_ap_start_reg = 1'b0;
#0 grp_pow_generic_double_s_fu_391_ap_start_reg = 1'b0;
end

kmeans_x_data #(
    .DataWidth( 32 ),
    .AddressRange( 50 ),
    .AddressWidth( 6 ))
x_data_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(x_data_address0),
    .ce0(x_data_ce0),
    .q0(x_data_q0)
);

kmeans_y_data #(
    .DataWidth( 32 ),
    .AddressRange( 50 ),
    .AddressWidth( 6 ))
y_data_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(y_data_address0),
    .ce0(y_data_ce0),
    .q0(y_data_q0)
);

kmeans_data_clustBew #(
    .DataWidth( 1 ),
    .AddressRange( 50 ),
    .AddressWidth( 6 ))
data_cluster_id_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(data_cluster_id_address0),
    .ce0(data_cluster_id_ce0),
    .we0(data_cluster_id_we0),
    .d0(data_cluster_id_d0),
    .q0(data_cluster_id_q0)
);

pow_generic_double_s grp_pow_generic_double_s_fu_304(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_pow_generic_double_s_fu_304_ap_start),
    .ap_done(grp_pow_generic_double_s_fu_304_ap_done),
    .ap_idle(grp_pow_generic_double_s_fu_304_ap_idle),
    .ap_ready(grp_pow_generic_double_s_fu_304_ap_ready),
    .base_r(x_assign_reg_797),
    .ap_return(grp_pow_generic_double_s_fu_304_ap_return)
);

pow_generic_double_s grp_pow_generic_double_s_fu_333(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_pow_generic_double_s_fu_333_ap_start),
    .ap_done(grp_pow_generic_double_s_fu_333_ap_done),
    .ap_idle(grp_pow_generic_double_s_fu_333_ap_idle),
    .ap_ready(grp_pow_generic_double_s_fu_333_ap_ready),
    .base_r(x_assign_1_reg_802),
    .ap_return(grp_pow_generic_double_s_fu_333_ap_return)
);

pow_generic_double_s grp_pow_generic_double_s_fu_362(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_pow_generic_double_s_fu_362_ap_start),
    .ap_done(grp_pow_generic_double_s_fu_362_ap_done),
    .ap_idle(grp_pow_generic_double_s_fu_362_ap_idle),
    .ap_ready(grp_pow_generic_double_s_fu_362_ap_ready),
    .base_r(x_assign_2_reg_807),
    .ap_return(grp_pow_generic_double_s_fu_362_ap_return)
);

pow_generic_double_s grp_pow_generic_double_s_fu_391(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_pow_generic_double_s_fu_391_ap_start),
    .ap_done(grp_pow_generic_double_s_fu_391_ap_done),
    .ap_idle(grp_pow_generic_double_s_fu_391_ap_idle),
    .ap_ready(grp_pow_generic_double_s_fu_391_ap_ready),
    .base_r(x_assign_3_reg_812),
    .ap_return(grp_pow_generic_double_s_fu_391_ap_return)
);

kmeans_faddfsub_3CeG #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
kmeans_faddfsub_3CeG_U42(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_420_p0),
    .din1(grp_fu_420_p1),
    .opcode(grp_fu_420_opcode),
    .ce(1'b1),
    .dout(grp_fu_420_p2)
);

kmeans_faddfsub_3CeG #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
kmeans_faddfsub_3CeG_U43(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_424_p0),
    .din1(grp_fu_424_p1),
    .opcode(grp_fu_424_opcode),
    .ce(1'b1),
    .dout(grp_fu_424_p2)
);

kmeans_fsub_32ns_DeQ #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
kmeans_fsub_32ns_DeQ_U44(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_486),
    .din1(centroids_x_load_1_reg_744),
    .ce(1'b1),
    .dout(grp_fu_428_p2)
);

kmeans_fsub_32ns_DeQ #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
kmeans_fsub_32ns_DeQ_U45(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_493),
    .din1(centroids_y_load_1_reg_749),
    .ce(1'b1),
    .dout(grp_fu_432_p2)
);

kmeans_fdiv_32ns_Ee0 #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
kmeans_fdiv_32ns_Ee0_U46(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(mean_value_x_0_reg_269),
    .din1(tmp_8_reg_935),
    .ce(1'b1),
    .dout(grp_fu_438_p2)
);

kmeans_fdiv_32ns_Ee0 #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
kmeans_fdiv_32ns_Ee0_U47(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(mean_value_y_0_reg_257),
    .din1(tmp_8_reg_935),
    .ce(1'b1),
    .dout(grp_fu_444_p2)
);

kmeans_sitofp_32nFfa #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
kmeans_sitofp_32nFfa_U48(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_450_p0),
    .ce(1'b1),
    .dout(grp_fu_450_p1)
);

kmeans_fptrunc_64Gfk #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
kmeans_fptrunc_64Gfk_U49(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_4_reg_837),
    .ce(1'b1),
    .dout(grp_fu_456_p1)
);

kmeans_fptrunc_64Gfk #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
kmeans_fptrunc_64Gfk_U50(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_9_reg_842),
    .ce(1'b1),
    .dout(grp_fu_459_p1)
);

kmeans_fpext_32nsHfu #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
kmeans_fpext_32nsHfu_U51(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_s_reg_777),
    .ce(1'b1),
    .dout(grp_fu_462_p1)
);

kmeans_fpext_32nsHfu #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
kmeans_fpext_32nsHfu_U52(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_2_reg_782),
    .ce(1'b1),
    .dout(grp_fu_465_p1)
);

kmeans_fpext_32nsHfu #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
kmeans_fpext_32nsHfu_U53(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_5_reg_787),
    .ce(1'b1),
    .dout(grp_fu_468_p1)
);

kmeans_fpext_32nsHfu #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
kmeans_fpext_32nsHfu_U54(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_7_reg_792),
    .ce(1'b1),
    .dout(grp_fu_471_p1)
);

kmeans_fcmp_32ns_IfE #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
kmeans_fcmp_32ns_IfE_U55(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(distance_reg_853),
    .din1(min_distance_reg_847),
    .ce(1'b1),
    .opcode(5'd4),
    .dout(grp_fu_474_p2)
);

kmeans_dadd_64ns_JfO #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
kmeans_dadd_64ns_JfO_U56(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_i_reg_817),
    .din1(tmp_i4_reg_822),
    .ce(1'b1),
    .dout(grp_fu_478_p2)
);

kmeans_dadd_64ns_JfO #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
kmeans_dadd_64ns_JfO_U57(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_i5_reg_827),
    .din1(tmp_i6_reg_832),
    .ce(1'b1),
    .dout(grp_fu_482_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_pow_generic_double_s_fu_304_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_NS_fsm_state19) & (1'b1 == ap_CS_fsm_state18))) begin
            grp_pow_generic_double_s_fu_304_ap_start_reg <= 1'b1;
        end else if ((grp_pow_generic_double_s_fu_304_ap_ready == 1'b1)) begin
            grp_pow_generic_double_s_fu_304_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_pow_generic_double_s_fu_333_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_NS_fsm_state19) & (1'b1 == ap_CS_fsm_state18))) begin
            grp_pow_generic_double_s_fu_333_ap_start_reg <= 1'b1;
        end else if ((grp_pow_generic_double_s_fu_333_ap_ready == 1'b1)) begin
            grp_pow_generic_double_s_fu_333_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_pow_generic_double_s_fu_362_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_NS_fsm_state19) & (1'b1 == ap_CS_fsm_state18))) begin
            grp_pow_generic_double_s_fu_362_ap_start_reg <= 1'b1;
        end else if ((grp_pow_generic_double_s_fu_362_ap_ready == 1'b1)) begin
            grp_pow_generic_double_s_fu_362_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_pow_generic_double_s_fu_391_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_NS_fsm_state19) & (1'b1 == ap_CS_fsm_state18))) begin
            grp_pow_generic_double_s_fu_391_ap_start_reg <= 1'b1;
        end else if ((grp_pow_generic_double_s_fu_391_ap_ready == 1'b1)) begin
            grp_pow_generic_double_s_fu_391_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln38_fu_632_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state95))) begin
        count_0_reg_281 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state102)) begin
        count_0_reg_281 <= count_1_reg_920;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        i_0_reg_211 <= i_reg_721;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_211 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        i_1_reg_234 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state94)) begin
        i_1_reg_234 <= i_3_reg_757;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_fu_535_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
        i_2_reg_245 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state123)) begin
        i_2_reg_245 <= i_4_reg_882;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln13_fu_505_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        interation_0_reg_223 <= 7'd0;
    end else if (((icmp_ln38_fu_632_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state95))) begin
        interation_0_reg_223 <= interation_reg_729;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln38_fu_632_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state95))) begin
        j_1_reg_293 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state102)) begin
        j_1_reg_293 <= j_reg_890;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln38_fu_632_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state95))) begin
        mean_value_x_0_reg_269 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state102)) begin
        mean_value_x_0_reg_269 <= mean_value_x_1_fu_700_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln38_fu_632_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state95))) begin
        mean_value_y_0_reg_257 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state102)) begin
        mean_value_y_0_reg_257 <= mean_value_y_1_fu_693_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        centroids_x_load_1_reg_744 <= centroids_x_q1;
        centroids_x_load_reg_734 <= centroids_x_q0;
        centroids_y_load_1_reg_749 <= centroids_y_q1;
        centroids_y_load_reg_739 <= centroids_y_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state97)) begin
        count_1_reg_920 <= count_1_fu_685_p3;
        icmp_ln44_reg_914 <= icmp_ln44_fu_673_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state92)) begin
        distance_reg_853 <= grp_fu_459_p1;
        min_distance_reg_847 <= grp_fu_456_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        i_3_reg_757 <= i_3_fu_541_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state95)) begin
        i_4_reg_882 <= i_4_fu_638_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_721 <= i_fu_511_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state93)) begin
        icmp_ln29_1_reg_864 <= icmp_ln29_1_fu_593_p2;
        icmp_ln29_2_reg_869 <= icmp_ln29_2_fu_599_p2;
        icmp_ln29_3_reg_874 <= icmp_ln29_3_fu_605_p2;
        icmp_ln29_reg_859 <= icmp_ln29_fu_587_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln43_fu_644_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state96))) begin
        icmp_ln51_reg_910 <= icmp_ln51_fu_663_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        interation_reg_729 <= interation_fu_529_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state96)) begin
        j_reg_890 <= j_fu_650_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state97) | (1'b1 == ap_CS_fsm_state11))) begin
        reg_486 <= x_data_q0;
        reg_493 <= y_data_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        tmp_2_reg_782 <= grp_fu_424_p2;
        tmp_5_reg_787 <= grp_fu_428_p2;
        tmp_7_reg_792 <= grp_fu_432_p2;
        tmp_s_reg_777 <= grp_fu_420_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state90)) begin
        tmp_4_reg_837 <= grp_fu_478_p2;
        tmp_9_reg_842 <= grp_fu_482_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state107)) begin
        tmp_8_reg_935 <= grp_fu_450_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state85)) begin
        tmp_i4_reg_822 <= grp_pow_generic_double_s_fu_333_ap_return;
        tmp_i5_reg_827 <= grp_pow_generic_double_s_fu_362_ap_return;
        tmp_i6_reg_832 <= grp_pow_generic_double_s_fu_391_ap_return;
        tmp_i_reg_817 <= grp_pow_generic_double_s_fu_304_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        x_assign_1_reg_802 <= grp_fu_465_p1;
        x_assign_2_reg_807 <= grp_fu_468_p1;
        x_assign_3_reg_812 <= grp_fu_471_p1;
        x_assign_reg_797 <= grp_fu_462_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_fu_535_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        zext_ln25_reg_762[5 : 0] <= zext_ln25_fu_547_p1[5 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln21_fu_523_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln21_fu_523_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        centroids_x_address0 = 1'd0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        centroids_x_address0 = zext_ln14_fu_517_p1;
    end else begin
        centroids_x_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state123)) begin
        centroids_x_address1 = zext_ln52_fu_707_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        centroids_x_address1 = 1'd1;
    end else begin
        centroids_x_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state8))) begin
        centroids_x_ce0 = 1'b1;
    end else begin
        centroids_x_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state123) | (1'b1 == ap_CS_fsm_state8))) begin
        centroids_x_ce1 = 1'b1;
    end else begin
        centroids_x_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        centroids_x_we0 = 1'b1;
    end else begin
        centroids_x_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln51_reg_910 == 1'd0) & (1'b1 == ap_CS_fsm_state123))) begin
        centroids_x_we1 = 1'b1;
    end else begin
        centroids_x_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        centroids_y_address0 = 1'd0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        centroids_y_address0 = zext_ln14_fu_517_p1;
    end else begin
        centroids_y_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state123)) begin
        centroids_y_address1 = zext_ln52_fu_707_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        centroids_y_address1 = 1'd1;
    end else begin
        centroids_y_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state8))) begin
        centroids_y_ce0 = 1'b1;
    end else begin
        centroids_y_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state123) | (1'b1 == ap_CS_fsm_state8))) begin
        centroids_y_ce1 = 1'b1;
    end else begin
        centroids_y_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        centroids_y_we0 = 1'b1;
    end else begin
        centroids_y_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln51_reg_910 == 1'd0) & (1'b1 == ap_CS_fsm_state123))) begin
        centroids_y_we1 = 1'b1;
    end else begin
        centroids_y_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state96)) begin
        data_cluster_id_address0 = zext_ln44_fu_656_p1;
    end else if ((1'b1 == ap_CS_fsm_state94)) begin
        data_cluster_id_address0 = zext_ln25_reg_762;
    end else begin
        data_cluster_id_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state94) | (1'b1 == ap_CS_fsm_state96))) begin
        data_cluster_id_ce0 = 1'b1;
    end else begin
        data_cluster_id_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state94)) begin
        data_cluster_id_we0 = 1'b1;
    end else begin
        data_cluster_id_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_420_opcode = 2'd1;
    end else if (((icmp_ln44_reg_914 == 1'd1) & (1'b1 == ap_CS_fsm_state98))) begin
        grp_fu_420_opcode = 2'd0;
    end else begin
        grp_fu_420_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state98)) begin
        grp_fu_420_p0 = mean_value_x_0_reg_269;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_420_p0 = reg_486;
    end else begin
        grp_fu_420_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state98)) begin
        grp_fu_420_p1 = reg_486;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_420_p1 = centroids_x_load_reg_734;
    end else begin
        grp_fu_420_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_424_opcode = 2'd1;
    end else if (((icmp_ln44_reg_914 == 1'd1) & (1'b1 == ap_CS_fsm_state98))) begin
        grp_fu_424_opcode = 2'd0;
    end else begin
        grp_fu_424_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state98)) begin
        grp_fu_424_p0 = mean_value_y_0_reg_257;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_424_p0 = reg_493;
    end else begin
        grp_fu_424_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state98)) begin
        grp_fu_424_p1 = reg_493;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_424_p1 = centroids_y_load_reg_739;
    end else begin
        grp_fu_424_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state96)) begin
        grp_fu_450_p0 = count_0_reg_281;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_450_p0 = zext_ln13_fu_500_p1;
    end else begin
        grp_fu_450_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state96)) begin
        x_data_address0 = zext_ln44_fu_656_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        x_data_address0 = zext_ln25_fu_547_p1;
    end else begin
        x_data_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state96) | (1'b1 == ap_CS_fsm_state10))) begin
        x_data_ce0 = 1'b1;
    end else begin
        x_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state96)) begin
        y_data_address0 = zext_ln44_fu_656_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        y_data_address0 = zext_ln25_fu_547_p1;
    end else begin
        y_data_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state96) | (1'b1 == ap_CS_fsm_state10))) begin
        y_data_ce0 = 1'b1;
    end else begin
        y_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln13_fu_505_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state8 : begin
            if (((icmp_ln21_fu_523_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((icmp_ln24_fu_535_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state95;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state95 : begin
            if (((icmp_ln38_fu_632_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state95))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state96;
            end
        end
        ap_ST_fsm_state96 : begin
            if (((icmp_ln51_fu_663_p2 == 1'd1) & (icmp_ln43_fu_644_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state96))) begin
                ap_NS_fsm = ap_ST_fsm_state123;
            end else if (((icmp_ln43_fu_644_p2 == 1'd1) & (icmp_ln51_fu_663_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state96))) begin
                ap_NS_fsm = ap_ST_fsm_state103;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state97;
            end
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state109 : begin
            ap_NS_fsm = ap_ST_fsm_state110;
        end
        ap_ST_fsm_state110 : begin
            ap_NS_fsm = ap_ST_fsm_state111;
        end
        ap_ST_fsm_state111 : begin
            ap_NS_fsm = ap_ST_fsm_state112;
        end
        ap_ST_fsm_state112 : begin
            ap_NS_fsm = ap_ST_fsm_state113;
        end
        ap_ST_fsm_state113 : begin
            ap_NS_fsm = ap_ST_fsm_state114;
        end
        ap_ST_fsm_state114 : begin
            ap_NS_fsm = ap_ST_fsm_state115;
        end
        ap_ST_fsm_state115 : begin
            ap_NS_fsm = ap_ST_fsm_state116;
        end
        ap_ST_fsm_state116 : begin
            ap_NS_fsm = ap_ST_fsm_state117;
        end
        ap_ST_fsm_state117 : begin
            ap_NS_fsm = ap_ST_fsm_state118;
        end
        ap_ST_fsm_state118 : begin
            ap_NS_fsm = ap_ST_fsm_state119;
        end
        ap_ST_fsm_state119 : begin
            ap_NS_fsm = ap_ST_fsm_state120;
        end
        ap_ST_fsm_state120 : begin
            ap_NS_fsm = ap_ST_fsm_state121;
        end
        ap_ST_fsm_state121 : begin
            ap_NS_fsm = ap_ST_fsm_state122;
        end
        ap_ST_fsm_state122 : begin
            ap_NS_fsm = ap_ST_fsm_state123;
        end
        ap_ST_fsm_state123 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln29_fu_619_p2 = (or_ln29_fu_611_p2 & or_ln29_1_fu_615_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state102 = ap_CS_fsm[32'd101];

assign ap_CS_fsm_state107 = ap_CS_fsm[32'd106];

assign ap_CS_fsm_state108 = ap_CS_fsm[32'd107];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state123 = ap_CS_fsm[32'd122];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state85 = ap_CS_fsm[32'd84];

assign ap_CS_fsm_state86 = ap_CS_fsm[32'd85];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state90 = ap_CS_fsm[32'd89];

assign ap_CS_fsm_state91 = ap_CS_fsm[32'd90];

assign ap_CS_fsm_state92 = ap_CS_fsm[32'd91];

assign ap_CS_fsm_state93 = ap_CS_fsm[32'd92];

assign ap_CS_fsm_state94 = ap_CS_fsm[32'd93];

assign ap_CS_fsm_state95 = ap_CS_fsm[32'd94];

assign ap_CS_fsm_state96 = ap_CS_fsm[32'd95];

assign ap_CS_fsm_state97 = ap_CS_fsm[32'd96];

assign ap_CS_fsm_state98 = ap_CS_fsm[32'd97];

assign ap_NS_fsm_state19 = ap_NS_fsm[32'd18];

assign bitcast_ln29_1_fu_570_p1 = min_distance_reg_847;

assign bitcast_ln29_fu_553_p1 = distance_reg_853;

assign centroids_x_d0 = grp_fu_450_p1;

assign centroids_x_d1 = grp_fu_438_p2;

assign centroids_y_d0 = grp_fu_450_p1;

assign centroids_y_d1 = grp_fu_444_p2;

assign count_1_fu_685_p3 = ((icmp_ln44_fu_673_p2[0:0] === 1'b1) ? count_fu_679_p2 : count_0_reg_281);

assign count_fu_679_p2 = (count_0_reg_281 + 32'd1);

assign data_cluster_id_d0 = (grp_fu_474_p2 & and_ln29_fu_619_p2);

assign grp_pow_generic_double_s_fu_304_ap_start = grp_pow_generic_double_s_fu_304_ap_start_reg;

assign grp_pow_generic_double_s_fu_333_ap_start = grp_pow_generic_double_s_fu_333_ap_start_reg;

assign grp_pow_generic_double_s_fu_362_ap_start = grp_pow_generic_double_s_fu_362_ap_start_reg;

assign grp_pow_generic_double_s_fu_391_ap_start = grp_pow_generic_double_s_fu_391_ap_start_reg;

assign i_3_fu_541_p2 = (i_1_reg_234 + 6'd1);

assign i_4_fu_638_p2 = (i_2_reg_245 + 2'd1);

assign i_fu_511_p2 = (i_0_reg_211 + 2'd1);

assign icmp_ln13_fu_505_p2 = ((i_0_reg_211 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln21_fu_523_p2 = ((interation_0_reg_223 == 7'd100) ? 1'b1 : 1'b0);

assign icmp_ln24_fu_535_p2 = ((i_1_reg_234 == 6'd50) ? 1'b1 : 1'b0);

assign icmp_ln29_1_fu_593_p2 = ((trunc_ln29_fu_566_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln29_2_fu_599_p2 = ((tmp_3_fu_573_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln29_3_fu_605_p2 = ((trunc_ln29_1_fu_583_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln29_fu_587_p2 = ((tmp_1_fu_556_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln38_fu_632_p2 = ((i_2_reg_245 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln43_fu_644_p2 = ((j_1_reg_293 == 6'd50) ? 1'b1 : 1'b0);

assign icmp_ln44_fu_673_p2 = ((zext_ln44_1_fu_669_p1 == i_2_reg_245) ? 1'b1 : 1'b0);

assign icmp_ln51_fu_663_p2 = ((count_0_reg_281 == 32'd0) ? 1'b1 : 1'b0);

assign interation_fu_529_p2 = (interation_0_reg_223 + 7'd1);

assign j_fu_650_p2 = (j_1_reg_293 + 6'd1);

assign mean_value_x_1_fu_700_p3 = ((icmp_ln44_reg_914[0:0] === 1'b1) ? grp_fu_420_p2 : mean_value_x_0_reg_269);

assign mean_value_y_1_fu_693_p3 = ((icmp_ln44_reg_914[0:0] === 1'b1) ? grp_fu_424_p2 : mean_value_y_0_reg_257);

assign or_ln29_1_fu_615_p2 = (icmp_ln29_3_reg_874 | icmp_ln29_2_reg_869);

assign or_ln29_fu_611_p2 = (icmp_ln29_reg_859 | icmp_ln29_1_reg_864);

assign tmp_1_fu_556_p4 = {{bitcast_ln29_fu_553_p1[30:23]}};

assign tmp_3_fu_573_p4 = {{bitcast_ln29_1_fu_570_p1[30:23]}};

assign trunc_ln29_1_fu_583_p1 = bitcast_ln29_1_fu_570_p1[22:0];

assign trunc_ln29_fu_566_p1 = bitcast_ln29_fu_553_p1[22:0];

assign zext_ln13_fu_500_p1 = i_0_reg_211;

assign zext_ln14_fu_517_p1 = i_0_reg_211;

assign zext_ln25_fu_547_p1 = i_1_reg_234;

assign zext_ln44_1_fu_669_p1 = data_cluster_id_q0;

assign zext_ln44_fu_656_p1 = j_1_reg_293;

assign zext_ln52_fu_707_p1 = i_2_reg_245;

always @ (posedge ap_clk) begin
    zext_ln25_reg_762[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
end

endmodule //kmeans
